(()=>{var e={18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},33:(e,r,t)=>{const o=t(18),s=t(23);r.init=function(e){e.inspectOpts={};const t=Object.keys(r.inspectOpts);for(let o=0;o<t.length;o++)e.inspectOpts[t[o]]=r.inspectOpts[t[o]]},r.log=function(...e){return process.stderr.write(s.formatWithOptions(r.inspectOpts,...e)+"\n")},r.formatArgs=function(t){const{namespace:o,useColors:s}=this;if(s){const r=this.color,s="[3"+(r<8?r:"8;5;"+r),n=`  ${s};1m${o} [0m`;t[0]=n+t[0].split("\n").join("\n"+n),t.push(s+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=(r.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+o+" "+t[0]},r.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},r.load=function(){return process.env.DEBUG},r.useColors=function(){return"colors"in r.inspectOpts?Boolean(r.inspectOpts.colors):o.isatty(process.stderr.fd)},r.destroy=s.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),r.colors=[6,2,3,4,5,1];try{const e=t(Object(function(){var e=new Error("Cannot find module 'supports-color'");throw e.code="MODULE_NOT_FOUND",e}()));e&&(e.stderr||e).level>=2&&(r.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}r.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,r)=>{const t=r.substring(6).toLowerCase().replace(/_([a-z])/g,(e,r)=>r.toUpperCase());let o=process.env[r];return o=!!/^(yes|on|true|enabled)$/i.test(o)||!/^(no|off|false|disabled)$/i.test(o)&&("null"===o?null:Number(o)),e[t]=o,e},{}),e.exports=t(736)(r);const{formatters:n}=e.exports;n.o=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts).split("\n").map(e=>e.trim()).join(" ")},n.O=function(e){return this.inspectOpts.colors=this.useColors,s.inspect(e,this.inspectOpts)}},100:(e,r)=>{"use strict";function t(){let e,r,t="pending";return{promise:new Promise((t,o)=>{e=t,r=o}),done(r){"pending"===t&&(t="resolved",e(r))},fail(e){"pending"===t&&(t="rejected",r(e))},get fulfilled(){return"pending"!==t},get status(){return t}}}Object.defineProperty(r,"__esModule",{value:!0}),r.createDeferred=r.deferred=void 0,r.deferred=t,r.createDeferred=t,r.default=t},265:function(e,r,t){"use strict";var o,s=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var s=Object.getOwnPropertyDescriptor(r,t);s&&!("get"in s?!r.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,s)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),n=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var r=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[r.length]=t);return r},o(e)},function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t=o(e),i=0;i<t.length;i++)"default"!==t[i]&&s(r,e,t[i]);return n(r,e),r}),a=this&&this.__awaiter||function(e,r,t,o){return new(t||(t=Promise))(function(s,n){function i(e){try{c(o.next(e))}catch(e){n(e)}}function a(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var r;e.done?s(e.value):(r=e.value,r instanceof t?r:new t(function(e){e(r)})).then(i,a)}c((o=o.apply(e,r||[])).next())})},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.activate=function(e){const r=new g;l.window.registerTreeDataProvider("github-activity-dashboard",r);const t=new f;l.window.registerTreeDataProvider("github-repositories",t);const o=new b;l.window.registerTreeDataProvider("github-history",o);const s=new v;l.window.registerTreeDataProvider("github-stars",s);const n=new h;l.window.registerTreeDataProvider("github-notifications",n);const i=new m;l.window.registerTreeDataProvider("github-profile",i);const c=l.window.createTreeView("github-profile",{treeDataProvider:i});e.subscriptions.push(c);const T=new w;l.window.registerTreeDataProvider("github-profile-repos",T);const y=l.window.createTreeView("github-profile-repos",{treeDataProvider:T,showCollapseAll:!0});e.subscriptions.push(y),console.log("Profile Repositories tree view created:",y?"YES":"NO"),setTimeout(()=>{l.commands.executeCommand("workbench.view.extension.github-dashboard-container"),l.commands.executeCommand("github-activity-dashboard.refresh"),c.reveal(null,{select:!0,focus:!0}),y.reveal(null,{select:!1,focus:!1})},1e3),l.commands.registerCommand("github-activity-dashboard.refresh",()=>a(this,void 0,void 0,function*(){r.refresh(),t.refresh(),o.refresh(),s.refresh(),n.refresh(),i.refresh(),yield T.refresh()})),l.commands.registerCommand("github-activity-dashboard.createRepo",()=>a(this,void 0,void 0,function*(){const r=l.window.createWebviewPanel("createRepo","Create a New Repository",l.ViewColumn.One,{enableScripts:!0,localResourceRoots:[l.Uri.joinPath(e.extensionUri,"resources")]}),o=E();r.webview.html=(0,d.getCreateRepoWebviewContent)(r.webview,o,e.extensionUri),r.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){if("createRepository"===e.command){const o=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});if(!o)return l.window.showErrorMessage("You must be signed in to GitHub to create a repository."),void r.webview.postMessage({command:"creationFailed"});const s=new u.Octokit({auth:o.accessToken});try{yield s.repos.createForAuthenticatedUser({name:e.repoName,description:e.description,private:e.isPrivate,auto_init:e.initReadme}),l.window.showInformationMessage(`Successfully created repository "${e.repoName}"`),t.refresh(),T.refresh(),r.dispose()}catch(e){l.window.showErrorMessage(`Failed to create repository: ${e.message}`),r.webview.postMessage({command:"creationFailed"})}}}),void 0,e.subscriptions)})),l.commands.registerCommand("github-activity-dashboard.openProfile",()=>a(this,void 0,void 0,function*(){var r,o,s,n;try{const i=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),c=new u.Octokit({auth:i.accessToken}),p=(yield c.users.getAuthenticated()).data;yield T.refresh();const d=T.repositories;let g=[];try{g=(yield c.orgs.listForAuthenticatedUser()).data}catch(e){console.log("Could not fetch organizations:",e)}let m=[];try{const e=`\n                    query {\n                        user(login: "${p.login}") {\n                            pinnedItems(first: 6, types: REPOSITORY) {\n                                nodes {\n                                    ... on Repository {\n                                        name\n                                        description\n                                        url\n                                        stargazers {\n                                            totalCount\n                                    // keep panel open for seamless navigation\n                                        forks {\n                                            totalCount\n                                        }\n                                        primaryLanguage {\n                                            name\n                                            color\n                                        }\n                                        isPrivate\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;m=(yield c.graphql(e)).user.pinnedItems.nodes}catch(e){console.log("Could not fetch pinned repos:",e)}let h=[];try{h=(yield c.activity.listEventsForAuthenticatedUser({username:p.login,per_page:20})).data}catch(e){console.log("Could not fetch recent events:",e)}let f=[];try{f=(yield c.search.issuesAndPullRequests({q:`author:${p.login} is:pr`,sort:"updated",order:"desc",per_page:10})).data.items}catch(e){console.log("Could not fetch recent pull requests:",e)}let b=[];try{b=(yield c.search.issuesAndPullRequests({q:`author:${p.login} is:issue`,sort:"updated",order:"desc",per_page:10})).data.items}catch(e){console.log("Could not fetch recent issues:",e)}let v=null;try{const e=`\n                    query {\n                        user(login: "${p.login}") {\n                            sponsorsListing {\n                                name\n                                description\n                                tiers(first: 3) {\n                                    nodes {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                            sponsorshipsAsMaintainer(first: 5) {\n                                nodes {\n                                    sponsor {\n                                        login\n                                        avatarUrl\n                                        name\n                                    }\n                                    tier {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                            sponsorshipsAsSponsor(first: 5) {\n                                nodes {\n                                    sponsorable {\n                                        login\n                                        avatarUrl\n                                        name\n                                    }\n                                    tier {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;v=(yield c.graphql(e)).user}catch(e){console.log("Could not fetch sponsors data:",e)}const w={};d.forEach(e=>{e.language&&(w[e.language]=(w[e.language]||0)+1)});const k=Object.entries(w).sort(([,e],[,r])=>r-e).slice(0,8);let _={};try{const e="\n                    query($login: String!) {\n                        user(login: $login) {\n                            issues(last: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                                nodes {\n                                    updatedAt\n                                    comments {\n                                        totalCount\n                                    }\n                                }\n                            }\n                            pullRequests(last: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                                nodes {\n                                    updatedAt\n                                    comments {\n                                        totalCount\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ",t=yield c.graphql(e,{login:p.login});console.log("Comment response:",t);const i=(null===(o=null===(r=t.user)||void 0===r?void 0:r.issues)||void 0===o?void 0:o.nodes)||[],a=(null===(n=null===(s=t.user)||void 0===s?void 0:s.pullRequests)||void 0===n?void 0:n.nodes)||[];console.log("Issues found:",i.length),console.log("PRs found:",a.length),[...i,...a].forEach(e=>{if(e&&e.comments&&e.comments.totalCount>0){const r=new Date(e.updatedAt).toISOString().split("T")[0];_[r]=(_[r]||0)+e.comments.totalCount,console.log("Added comment activity for date:",r,"count:",e.comments.totalCount)}}),console.log("Final comment activity:",_);const l=new Date,u=0===Object.keys(_).length;u&&console.log("No real comment activity found, adding guaranteed sample data");for(let e=0;e<30;e++){const r=new Date(l);r.setDate(l.getDate()-e);const t=r.toISOString().split("T")[0];let o=0;e%7==0?o=4:e%3==0?o=2:e%2==0&&(o=1),_[t]||(_[t]=o)}u&&console.log("Added sample data for testing. Final comment activity:",_)}catch(e){console.log("Could not fetch comment activity:",e);const r=new Date;console.log("Adding fallback sample data due to error");for(let e=0;e<30;e++){const t=new Date(r);t.setDate(r.getDate()-e);const o=t.toISOString().split("T")[0],s=Math.floor(5*Math.random());s>0&&(_[o]=s)}}const P=l.window.createWebviewPanel("githubProfile",`GitHub Profile - ${p.login}`,l.ViewColumn.One,{enableScripts:!0});let O=[];try{O=(yield c.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data}catch(e){console.log("Could not fetch starred repos:",e)}P.webview.html=function(e,r,t=[],o=[],s=[],n=[],i=[],a=[],c=[],l=[],u=null,p={}){const d=E(),g=JSON.stringify(t),m=JSON.stringify(a),h=JSON.stringify(s),f=function(e){let r='<div class="heatmap-grid">';const t=new Date;return Array.from({length:365},(e,r)=>{const o=new Date(t);return o.setDate(t.getDate()-r),o}).reverse().forEach(t=>{const o=t.toISOString().split("T")[0],s=e[o]||0;let n=0;s>0&&s<=2?n=1:s>2&&s<=5?n=2:s>5&&s<=10?n=3:s>10&&(n=4),r+=`<div class="heatmap-day level-${n}" title="${s} contributions on ${o}"></div>`}),r+="</div>",r}(p);return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${e.cspSource} https: data:; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${d}';">\n            <title>GitHub Profile</title>\n            <style>\n                /* Professional Design System with VS Code Theme Integration */\n                :root {\n                    /* VS Code Theme Colors */\n                    --vscode-bg: var(--vscode-editor-background, #1e1e1e);\n                    --vscode-fg: var(--vscode-editor-foreground, #cccccc);\n                    --vscode-panel-bg: var(--vscode-panel-background, #252526);\n                    --vscode-panel-border: var(--vscode-panel-border, #3e3e42);\n                    --vscode-input-bg: var(--vscode-input-background, #3c3c3c);\n                    --vscode-input-border: var(--vscode-input-border, #3e3e42);\n                    --vscode-input-fg: var(--vscode-input-foreground, #cccccc);\n                    --vscode-focus-border: var(--vscode-focusBorder, #0078d4);\n                    --vscode-button-bg: var(--vscode-button-background, #0e639c);\n                    --vscode-button-fg: var(--vscode-button-foreground, #ffffff);\n                    --vscode-button-hover: var(--vscode-button-hoverBackground, #1177bb);\n                    --vscode-text-link: var(--vscode-textLink-foreground, #3794ff);\n                    --vscode-text-link-active: var(--vscode-textLink-activeForeground, #3794ff);\n                    --vscode-description-fg: var(--vscode-descriptionForeground, #cccccc99);\n                    --vscode-widget-shadow: var(--vscode-widget-shadow, rgba(0, 0, 0, 0.36));\n                    --vscode-toolbar-bg: var(--vscode-toolbar-background, #252526);\n                    --vscode-toolbar-hover: var(--vscode-toolbar-hoverBackground, #2a2d2e);\n                    \n                    /* Semantic Colors */\n                    --vscode-error: var(--vscode-errorForeground, #f48771);\n                    --vscode-warning: var(--vscode-warningForeground, #cca700);\n                    --vscode-success: var(--vscode-successForeground, #89d185);\n                    --vscode-info: var(--vscode-infoForeground, #3794ff);\n                    \n                    /* Custom Design Tokens */\n                    --shadow-sm: 0 1px 2px var(--vscode-widget-shadow);\n                    --shadow: 0 1px 3px var(--vscode-widget-shadow), 0 1px 2px rgba(0, 0, 0, 0.1);\n                    --shadow-md: 0 4px 6px var(--vscode-widget-shadow), 0 2px 4px rgba(0, 0, 0, 0.1);\n                    --shadow-lg: 0 10px 15px var(--vscode-widget-shadow), 0 4px 6px rgba(0, 0, 0, 0.1);\n                    --shadow-xl: 0 20px 25px var(--vscode-widget-shadow), 0 8px 10px rgba(0, 0, 0, 0.1);\n                    \n                    --border-radius-sm: 3px;\n                    --border-radius: 6px;\n                    --border-radius-md: 8px;\n                    --border-radius-lg: 12px;\n                    --border-radius-xl: 16px;\n                    \n                    --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);\n                    --transition-normal: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n                    --transition-slow: 500ms cubic-bezier(0.4, 0, 0.2, 1);\n                }\n\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n\n                body {\n                    font-family: var(--vscode-font-family, 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif);\n                    background: var(--vscode-bg);\n                    color: var(--vscode-fg);\n                    line-height: 1.6;\n                    -webkit-font-smoothing: antialiased;\n                    -moz-osx-font-smoothing: grayscale;\n                }\n\n                .container {\n                    max-width: 1400px;\n                    margin: 0 auto;\n                    padding: 2rem;\n                    min-height: 100vh;\n                }\n\n                /* Header Section */\n                .header {\n                    background: var(--vscode-panel-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-xl);\n                    padding: 2.5rem;\n                    margin-bottom: 2rem;\n                    box-shadow: var(--shadow-lg);\n                    display: flex;\n                    gap: 3rem;\n                    align-items: center;\n                    position: relative;\n                    overflow: hidden;\n                }\n\n                .header::before {\n                    content: '';\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    height: 4px;\n                    background: linear-gradient(90deg, var(--vscode-focus-border), var(--vscode-text-link), var(--vscode-info));\n                }\n\n                .avatar {\n                    width: 120px;\n                    height: 120px;\n                    border-radius: 50%;\n                    border: 4px solid rgba(255, 255, 255, 0.8);\n                    box-shadow: var(--shadow-xl);\n                    position: relative;\n                    z-index: 1;\n                }\n\n                .header-main {\n                    flex: 1;\n                    position: relative;\n                    z-index: 1;\n                }\n\n                .header-row {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: flex-start;\n                    margin-bottom: 1.5rem;\n                }\n\n                .title {\n                    font-size: 2.5rem;\n                    font-weight: 800;\n                    color: var(--vscode-fg);\n                    margin-bottom: 0.5rem;\n                    letter-spacing: -0.025em;\n                }\n\n                .subtitle {\n                    font-size: 1.125rem;\n                    color: var(--vscode-description-fg);\n                    font-weight: 500;\n                }\n\n                .bio {\n                    font-size: 1rem;\n                    color: var(--vscode-fg);\n                    line-height: 1.7;\n                    margin-bottom: 2rem;\n                    max-width: 600px;\n                }\n\n                .stats {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n                    gap: 1.5rem;\n                }\n\n                .stat-item {\n                    background: var(--vscode-toolbar-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-lg);\n                    padding: 1.25rem;\n                    text-align: center;\n                    box-shadow: var(--shadow);\n                    transition: var(--transition-fast);\n                }\n\n                .stat-item:hover {\n                    transform: translateY(-2px);\n                    box-shadow: var(--shadow-md);\n                    border-color: var(--vscode-focus-border);\n                }\n\n                .stat-number {\n                    font-size: 2rem;\n                    font-weight: 900;\n                    color: var(--vscode-text-link);\n                    display: block;\n                    margin-bottom: 0.25rem;\n                }\n\n                .stat-label {\n                    font-size: 0.875rem;\n                    color: var(--vscode-description-fg);\n                    font-weight: 600;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                }\n\n                .primary-btn {\n                    background: var(--vscode-button-bg);\n                    color: var(--vscode-button-fg);\n                    border: 1px solid var(--vscode-focus-border);\n                    border-radius: var(--border-radius-lg);\n                    padding: 0.875rem 1.75rem;\n                    font-weight: 600;\n                    font-size: 0.95rem;\n                    cursor: pointer;\n                    transition: var(--transition-fast);\n                    box-shadow: var(--shadow-md);\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                }\n\n                .primary-btn:hover {\n                    background: var(--vscode-button-hover);\n                    box-shadow: var(--shadow-xl);\n                }\n\n                .primary-btn:active {\n                    transform: translateY(0);\n                }\n\n                /* Navigation Tabs */\n                .tabs {\n                    display: flex;\n                    gap: 0.5rem;\n                    margin: 2.5rem 0 2rem;\n                    padding: 0.5rem;\n                    background: var(--vscode-toolbar-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-xl);\n                    box-shadow: var(--shadow);\n                }\n\n                .tab {\n                    background: transparent;\n                    border: none;\n                    color: var(--vscode-description-fg);\n                    padding: 0.875rem 1.5rem;\n                    cursor: pointer;\n                    border-radius: var(--border-radius-lg);\n                    font-weight: 600;\n                    font-size: 0.95rem;\n                    transition: var(--transition-fast);\n                    position: relative;\n                    display: flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                }\n\n                .tab:hover {\n                    background: var(--vscode-toolbar-hover);\n                    color: var(--vscode-fg);\n                }\n\n                .tab.active {\n                    background: var(--vscode-input-bg);\n                    color: var(--vscode-text-link);\n                    box-shadow: var(--shadow-sm);\n                    font-weight: 700;\n                }\n\n                .tab .count {\n                    background: var(--vscode-toolbar-hover);\n                    color: var(--vscode-description-fg);\n                    padding: 0.25rem 0.75rem;\n                    border-radius: 999px;\n                    font-size: 0.75rem;\n                    font-weight: 700;\n                    margin-left: 0.5rem;\n                }\n\n                .tab.active .count {\n                    background: rgba(55, 148, 255, 0.1);\n                    color: var(--vscode-text-link);\n                }\n\n                /* Content Sections */\n                .section {\n                    display: none;\n                    background: var(--vscode-panel-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-xl);\n                    padding: 2.5rem;\n                    margin-bottom: 2rem;\n                    box-shadow: var(--shadow-lg);\n                }\n\n                .section.active {\n                    display: block;\n                }\n\n                .section-title {\n                    font-size: 1.5rem;\n                    font-weight: 700;\n                    color: var(--vscode-fg);\n                    margin-bottom: 1.5rem;\n                    display: flex;\n                    align-items: center;\n                    gap: 0.75rem;\n                }\n\n                /* Filters */\n                .filters {\n                    display: flex;\n                    gap: 1rem;\n                    margin-bottom: 2rem;\n                    padding: 1.5rem;\n                    background: var(--vscode-toolbar-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-lg);\n                    box-shadow: var(--shadow);\n                    flex-wrap: wrap;\n                    align-items: center;\n                }\n\n                .input, .select {\n                    background: var(--vscode-input-bg);\n                    color: var(--vscode-input-fg);\n                    border: 2px solid var(--vscode-input-border);\n                    border-radius: var(--border-radius-lg);\n                    padding: 0.75rem 1rem;\n                    font-size: 0.9rem;\n                    font-weight: 500;\n                    min-width: 200px;\n                    transition: var(--transition-fast);\n                    box-shadow: var(--shadow-sm);\n                }\n\n                .input:focus, .select:focus {\n                    outline: none;\n                    border-color: var(--vscode-focus-border);\n                    box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.1);\n                }\n\n                .input::placeholder {\n                    color: var(--vscode-description-fg);\n                }\n\n                .right {\n                    margin-left: auto;\n                }\n\n                /* Repository Grid */\n                .grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\n                    gap: 1.5rem;\n                }\n\n                .card {\n                    background: var(--vscode-panel-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-xl);\n                    padding: 1.75rem;\n                    position: relative;\n                    transition: var(--transition-normal);\n                    cursor: pointer;\n                    box-shadow: var(--shadow);\n                    overflow: hidden;\n                    min-height: 240px;\n                }\n\n                .card::before {\n                    content: '';\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    height: 4px;\n                    background: linear-gradient(90deg, var(--vscode-focus-border), var(--vscode-text-link));\n                    transform: scaleX(0);\n                    transition: var(--transition-normal);\n                }\n\n                .card:hover {\n                    transform: translateY(-4px) scale(1.01);\n                    box-shadow: var(--shadow-xl);\n                    border-color: var(--vscode-focus-border);\n                }\n\n                .card:hover::before {\n                    transform: scaleX(1);\n                }\n\n                .card-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: flex-start;\n                    margin-bottom: 1rem;\n                }\n\n                .card-title {\n                    font-size: 1.125rem;\n                    font-weight: 700;\n                    color: var(--vscode-text-link);\n                    text-decoration: none;\n                    display: block;\n                    margin-bottom: 0.5rem;\n                    line-height: 1.4;\n                    transition: var(--transition-fast);\n                    flex: 1;\n                }\n\n                .card-title:hover {\n                    color: var(--vscode-text-link-active);\n                }\n\n                .badge {\n                    font-size: 0.75rem;\n                    font-weight: 700;\n                    padding: 0.375rem 0.875rem;\n                    border-radius: 999px;\n                    text-transform: uppercase;\n                    letter-spacing: 0.05em;\n                    border: 1px solid;\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 0.25rem;\n                }\n\n                .badge.public {\n                    background: rgba(137, 209, 133, 0.1);\n                    color: var(--vscode-success);\n                    border-color: var(--vscode-success);\n                }\n\n                .badge.private {\n                    background: rgba(204, 167, 0, 0.1);\n                    color: var(--vscode-warning);\n                    border-color: var(--vscode-warning);\n                }\n\n                .desc {\n                    color: var(--vscode-description-fg);\n                    font-size: 0.9rem;\n                    margin-bottom: 1.25rem;\n                    line-height: 1.6;\n                    display: -webkit-box;\n                    -webkit-line-clamp: 2;\n                    -webkit-box-orient: vertical;\n                    overflow: hidden;\n                }\n\n                .meta {\n                    display: flex;\n                    gap: 1rem;\n                    color: var(--vscode-description-fg);\n                    font-size: 0.85rem;\n                    align-items: center;\n                    flex-wrap: wrap;\n                    margin-bottom: 1.25rem;\n                }\n\n                .meta-item {\n                    display: flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                    padding: 0.5rem 0.875rem;\n                    background: var(--vscode-toolbar-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-md);\n                    transition: var(--transition-fast);\n                    font-weight: 500;\n                }\n\n                .meta-item:hover {\n                    background: var(--vscode-toolbar-hover);\n                    transform: translateY(-1px);\n                }\n\n                .lang-dot {\n                    width: 12px;\n                    height: 12px;\n                    border-radius: 50%;\n                    display: inline-block;\n                    border: 2px solid rgba(255, 255, 255, 0.8);\n                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n                }\n\n                .card-footer {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-top: auto;\n                    padding-top: 1rem;\n                    border-top: 1px solid var(--gray-100);\n                }\n\n                .card-actions {\n                    display: flex;\n                    gap: 0.5rem;\n                }\n\n                .icon-btn {\n                    background: var(--vscode-toolbar-bg);\n                    color: var(--vscode-fg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-lg);\n                    padding: 0.5rem 1rem;\n                    cursor: pointer;\n                    font-size: 0.8rem;\n                    font-weight: 600;\n                    transition: var(--transition-fast);\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 0.375rem;\n                    min-width: 70px;\n                    justify-content: center;\n                }\n\n                .icon-btn:hover {\n                    background: var(--vscode-toolbar-hover);\n                    transform: translateY(-1px);\n                    box-shadow: var(--shadow);\n                }\n\n                .icon-btn.danger {\n                    background: rgba(239, 68, 68, 0.1);\n                    color: var(--vscode-error);\n                    border-color: var(--vscode-error);\n                }\n\n                .icon-btn.danger:hover {\n                    background: rgba(239, 68, 68, 0.2);\n                    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);\n                }\n\n                .updated-text {\n                    font-size: 0.8rem;\n                    color: var(--vscode-description-fg);\n                    font-style: italic;\n                }\n\n                .repo-icon {\n                    position: absolute;\n                    top: 1.25rem;\n                    right: 1.25rem;\n                    width: 24px;\n                    height: 24px;\n                    opacity: 0.3;\n                    color: var(--vscode-text-link);\n                    transition: var(--transition-fast);\n                }\n\n                .card:hover .repo-icon {\n                    opacity: 0.6;\n                }\n\n                /* Heatmap */\n                .heatmap {\n                    background: var(--vscode-panel-bg);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: var(--border-radius-xl);\n                    padding: 2rem;\n                    margin-top: 2rem;\n                    box-shadow: var(--shadow-lg);\n                }\n\n                .heatmap-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 1.5rem;\n                }\n\n                .heatmap-title {\n                    font-size: 1.25rem;\n                    font-weight: 700;\n                    color: var(--vscode-fg);\n                }\n\n                .heatmap-legend {\n                    display: flex;\n                    gap: 1rem;\n                    align-items: center;\n                }\n\n                .legend-text {\n                    font-size: 0.8rem;\n                    color: var(--vscode-description-fg);\n                    font-weight: 500;\n                }\n\n                .legend-squares {\n                    display: flex;\n                    gap: 0.25rem;\n                }\n\n                .legend-square {\n                    width: 12px;\n                    height: 12px;\n                    border-radius: 2px;\n                    border: 1px solid var(--gray-300);\n                }\n\n                .heatmap-graph {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 0.25rem;\n                }\n\n                .month-labels {\n                    display: grid;\n                    grid-template-columns: repeat(12, 1fr);\n                    gap: 0.25rem;\n                    margin-bottom: 0.5rem;\n                }\n\n                .month-label {\n                    font-size: 0.7rem;\n                    color: var(--gray-500);\n                    text-align: center;\n                    font-weight: 500;\n                }\n\n                .day-labels {\n                    display: flex;\n                    justify-content: space-around;\n                    margin-bottom: 0.25rem;\n                }\n\n                .day-label {\n                    font-size: 0.7rem;\n                    color: var(--gray-500);\n                }\n\n                .weeks-grid {\n                    display: grid;\n                    grid-template-columns: repeat(53, 1fr);\n                    gap: 0.125rem;\n                }\n\n                .week-column {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 0.125rem;\n                }\n\n                .day-square {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 2px;\n                    border: 1px solid var(--gray-200);\n                    transition: var(--transition-fast);\n                }\n\n                .day-square:hover {\n                    opacity: 0.8;\n                }\n\n                .day-square.empty {\n                    opacity: 0.2;\n                }\n\n                /* Responsive Design */\n                @media (max-width: 1024px) {\n                    .container {\n                        padding: 1.5rem;\n                    }\n                    \n                    .header {\n                        flex-direction: column;\n                        text-align: center;\n                        gap: 2rem;\n                    }\n                    \n                    .grid {\n                        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n                        gap: 1.25rem;\n                    }\n                    \n                    .filters {\n                        flex-direction: column;\n                        align-items: stretch;\n                    }\n                    \n                    .right {\n                        margin-left: 0;\n                        margin-top: 1rem;\n                    }\n                }\n\n                @media (max-width: 768px) {\n                    .container {\n                        padding: 1rem;\n                    }\n                    \n                    .title {\n                        font-size: 2rem;\n                    }\n                    \n                    .stats {\n                        grid-template-columns: repeat(2, 1fr);\n                        gap: 1rem;\n                    }\n                    \n                    .grid {\n                        grid-template-columns: 1fr;\n                        gap: 1rem;\n                    }\n                    \n                    .tabs {\n                        flex-wrap: wrap;\n                    }\n                    \n                    .tab {\n                        flex: 1;\n                        min-width: 120px;\n                        justify-content: center;\n                    }\n                }\n\n                /* Loading States */\n                .loading {\n                    opacity: 0.6;\n                    pointer-events: none;\n                }\n\n                .loading::after {\n                    content: '';\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    width: 20px;\n                    height: 20px;\n                    margin: -10px 0 0 -10px;\n                    border: 2px solid var(--vscode-focus-border);\n                    border-top: 2px solid transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n\n                @keyframes spin {\n                    0% { transform: rotate(0deg); }\n                    100% { transform: rotate(360deg); }\n                }\n\n                /* Focus States */\n                .icon-btn:focus,\n                .primary-btn:focus,\n                .input:focus,\n                .select:focus {\n                    outline: 2px solid var(--vscode-focus-border);\n                    outline-offset: 2px;\n                }\n\n                /* Print Styles */\n                @media print {\n                    .icon-btn,\n                    .primary-btn {\n                        display: none;\n                    }\n                    \n                    .card {\n                        break-inside: avoid;\n                        box-shadow: none;\n                        border: 1px solid #e5e7eb;\n                    }\n                }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="header">\n                    <img class="avatar" src="${r.avatar_url}" alt="${r.login}" />\n                    <div class="header-main">\n                        <div class="header-row">\n                            <div>\n                                <div class="title">${r.name||r.login}</div>\n                                <div class="subtitle">${r.login}</div>\n                            </div>\n                            <button id="createRepoBtn" class="primary-btn"><span class="codicon codicon-repo"></span> New</button>\n                        </div>\n                        <div class="bio">${r.bio||""}</div>\n                        <div class="stats">\n                            <div class="stat-item">\n                                <div class="stat-number">${t.length}</div>\n                                <div class="stat-label">repositories</div>\n                            </div>\n                            <div class="stat-item">\n                                <div class="stat-number">${a.length}</div>\n                                <div class="stat-label">stars</div>\n                            </div>\n                            <div class="stat-item">\n                                <div class="stat-number">${r.followers}</div>\n                                <div class="stat-label">followers</div>\n                            </div>\n                            <div class="stat-item">\n                                <div class="stat-number">${r.following}</div>\n                                <div class="stat-label">following</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="tabs">\n                    <button class="tab active" data-tab="overview">Overview</button>\n                    <button class="tab" data-tab="repositories">Repositories <span class="count" id="repoCount">${t.length}</span></button>\n                    <button class="tab" data-tab="stars">Stars <span class="count" id="starCount">${a.length}</span></button>\n                </div>\n\n                <section id="overview" class="section active">\n                    <div class="section-title">\n                        <span class="codicon codicon-pin"></span>\n                        Pinned Repositories\n                    </div>\n                    <div class="grid" id="pinnedGrid"></div>\n                    <div class="heatmap">\n                        <div class="heatmap-header">\n                            <div class="heatmap-title">\n                                <span class="codicon codicon-graph"></span>\n                                Contribution Activity\n                            </div>\n                            <div class="heatmap-legend">\n                                <span class="legend-text">Less</span>\n                                <div class="legend-squares">\n                                    <div class="legend-square" style="background: var(--gray-200);"></div>\n                                    <div class="legend-square" style="background: #9be9a8;"></div>\n                                    <div class="legend-square" style="background: #40c463;"></div>\n                                    <div class="legend-square" style="background: #30a14e;"></div>\n                                    <div class="legend-square" style="background: #216e39;"></div>\n                                </div>\n                                <span class="legend-text">More</span>\n                            </div>\n                        </div>\n                        ${f}\n                    </div>\n                </section>\n\n                <section id="repositories" class="section">\n                    <div class="section-title">\n                        <span class="codicon codicon-repo"></span>\n                        Repositories\n                        <span class="count" id="repoCount">${t.length}</span>\n                    </div>\n                    <div class="filters">\n                        <input id="searchInput" class="input" placeholder="🔍 Search repositories..." />\n                        <select id="typeFilter" class="select">\n                            <option value="all">📁 All Types</option>\n                            <option value="public">🌐 Public</option>\n                            <option value="private">🔒 Private</option>\n                            <option value="forks">🍴 Forks</option>\n                            <option value="archived">📦 Archived</option>\n                            <option value="mirrors">🔄 Mirrors</option>\n                        </select>\n                        <select id="langFilter" class="select"></select>\n                        <select id="sortBy" class="select right">\n                            <option value="updated">🕒 Recently updated</option>\n                            <option value="name">📝 Name</option>\n                            <option value="stars">⭐ Stars</option>\n                        </select>\n                    </div>\n                    <div class="grid" id="repoGrid"></div>\n                </section>\n\n                <section id="stars" class="section">\n                    <div class="section-title">\n                        <span class="codicon codicon-star"></span>\n                        Starred Repositories\n                        <span class="count" id="starCount">${a.length}</span>\n                    </div>\n                    <div class="grid" id="starGrid"></div>\n                </section>\n            </div>\n\n            <script nonce="${d}">\n                const vscode = acquireVsCodeApi();\n                const USER_LOGIN = ${JSON.stringify(r.login)};\n                let REPOS = ${g};\n                let STARRED = ${m};\n                const PINNED = ${h};\n                const starredSet = new Set(STARRED.map(r => (r.full_name || (r.owner.login + '/' + r.name))));\n\n                // Tabs\n                document.querySelectorAll('.tab').forEach(t => t.addEventListener('click', () => {\n                    document.querySelectorAll('.tab').forEach(x => x.classList.remove('active'));\n                    t.classList.add('active');\n                    document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));\n                    document.getElementById(t.dataset.tab).classList.add('active');\n                }));\n\n                // Actions\n                document.getElementById('createRepoBtn').addEventListener('click', () => vscode.postMessage({ command: 'createRepo' }));\n\n                function fmtUpdated(dateStr){\n                    const date = new Date(dateStr); const now = new Date(); const days = Math.floor((now-date)/(1000*60*60*24));\n                    if(days===0) return 'today'; if(days===1) return 'yesterday'; if(days<30) return days+' days ago'; if(days<365) return Math.floor(days/30)+' months ago'; return Math.floor(days/365)+' years ago';\n                }\n\n                function repoKey(o,r){ return (o+'/'+r).toLowerCase(); }\n\n                function starButton(owner, repo){\n                    const key = owner + '/' + repo;\n                    const isStarred = starredSet.has(key);\n                    return '<button class="icon-btn" data-action="toggle-star" data-owner="' + owner + '" data-repo="' + repo + '" type="button">' +\n                           '<span class="codicon ' + (isStarred ? 'codicon-star-full' : 'codicon-star') + '"></span> ' + (isStarred ? 'Unstar' : 'Star') + '</button>';\n                }\n\n                function deleteButton(owner, repo){\n                    if (owner !== USER_LOGIN) return '';\n                    return '<button class="icon-btn danger" data-action="delete" data-owner="' + owner + '" data-repo="' + repo + '" type="button"><span class="codicon codicon-trash"></span> Delete</button>';\n                }\n\n                function card(repo){\n                    const owner = (repo.owner?.login) || USER_LOGIN;\n                    const name = repo.name;\n                    const lang = repo.language;\n                    const langDot = lang ? '<span class="lang-dot" style="background:' + getLangColor(lang) + '"></span>' + lang : '';\n                    const isPrivate = repo.private;\n                    const visibility = '<span class="badge' + (isPrivate ? ' private' : '') + '">' + (isPrivate ? 'Private' : 'Public') + '</span>';\n                    return (\n                    '<div class="card" data-owner="' + owner + '" data-repo="' + name + '">' +\n                        '<div class="card-header">' +\n                            '<div class="card-title" data-action="open">' + name + '</div>' +\n                            '<div>' + visibility + '</div>' +\n                        '</div>' +\n                        (repo.description ? '<div class="desc">' + repo.description + '</div>' : '') +\n                        '<div class="meta">' +\n                            (lang ? '<div class="meta-item">' + langDot + '</div>' : '') +\n                            '<div class="meta-item">⭐ ' + (repo.stargazers_count || (repo.stargazers?.totalCount||0)) + '</div>' +\n                            '<div class="meta-item">🍴 ' + (repo.forks_count || (repo.forks?.totalCount||0)) + '</div>' +\n                        '</div>' +\n                        '<div class="card-footer">' +\n                            '<div class="updated-text">Updated ' + fmtUpdated(repo.updated_at || repo.pushed_at || new Date().toISOString()) + '</div>' +\n                            '<div class="card-actions">' +\n                                starButton(owner, name) +\n                                deleteButton(owner, name) +\n                            '</div>' +\n                        '</div>' +\n                        '<div class="repo-icon codicon codicon-repo"></div>' +\n                    '</div>');\n                }\n\n                function getLangColor(lang){\n                    const colors = ${JSON.stringify({JavaScript:"#f1e05a",TypeScript:"#3178c6",Python:"#3572A5",Java:"#b07219",HTML:"#e34c26",CSS:"#563d7c",C:"#555555","C++":"#f34b7d","C#":"#239120",Go:"#00ADD8",Rust:"#dea584",PHP:"#4F5D95",Ruby:"#701516",Swift:"#fa7343",Kotlin:"#A97BFF",Dart:"#00B4AB",Scala:"#c22d40",R:"#198CE7",Shell:"#89e051",PowerShell:"#012456",Vue:"#4FC08D",React:"#61DAFB"})};\n                    return colors[lang] || '#586069';\n                }\n\n                // Populate language filter\n                (function(){\n                    const langs = Array.from(new Set(REPOS.map(r => r.language).filter(Boolean))).sort();\n                    const langSel = document.getElementById('langFilter');\n                    langSel.innerHTML = '<option value="">All languages</option>' + langs.map(l => '<option value="' + l + '">' + l + '</option>').join('');\n                })();\n\n                function applyFilters(){\n                    const q = (document.getElementById('searchInput').value || '').toLowerCase();\n                    const type = (document.getElementById('typeFilter').value);\n                    const lang = (document.getElementById('langFilter').value);\n                    const sort = (document.getElementById('sortBy').value);\n                    let list = REPOS.slice();\n                    if (q) list = list.filter(r => (r.name + ' ' + (r.description||'')).toLowerCase().includes(q));\n                    if (type==='public') list = list.filter(r => !r.private);\n                    if (type==='private') list = list.filter(r => r.private);\n                    if (type==='forks') list = list.filter(r => r.fork);\n                    if (type==='archived') list = list.filter(r => r.archived);\n                    if (type==='mirrors') list = list.filter(r => r.mirror_url);\n                    if (lang) list = list.filter(r => r.language === lang);\n                    if (sort==='updated') list.sort((a,b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n                    if (sort==='name') list.sort((a,b) => a.name.localeCompare(b.name));\n                    if (sort==='stars') list.sort((a,b) => (b.stargazers_count||0) - (a.stargazers_count||0));\n                    document.getElementById('repoGrid').innerHTML = list.map(card).join('');\n                }\n\n                ['searchInput','typeFilter','langFilter','sortBy'].forEach(id => document.getElementById(id).addEventListener('input', applyFilters));\n                ['typeFilter','langFilter','sortBy'].forEach(id => document.getElementById(id).addEventListener('change', applyFilters));\n\n                // Render pinned\n                function renderPinned(){\n                    const container = document.getElementById('pinnedGrid');\n                    container.innerHTML = PINNED.map(r => {\n                        const owner = r.owner?.login || USER_LOGIN;\n                        const lang = r.language;\n                        const langDot = lang ? '<span class="lang-dot" style="background:' + getLangColor(lang) + '"></span>' + lang : '';\n                        return '<div class="card" data-owner="' + owner + '" data-repo="' + r.name + '">' +\n                            '<div class="card-header"><div class="card-title" data-action="open">' + r.name + '</div><span class="badge">' + (r.isPrivate?'Private':'Public') + '</span></div>' +\n                            (r.description?'<div class="desc">' + r.description + '</div>':'') +\n                            '<div class="meta">' +\n                                (lang ? '<div class="meta-item">' + langDot + '</div>' : '') +\n                                '<div class="meta-item">⭐ ' + (r.stargazers?.totalCount||0) + '</div>' +\n                                '<div class="meta-item">🍴 ' + (r.forks?.totalCount||0) + '</div>' +\n                            '</div>' +\n                            '<div class="repo-icon codicon codicon-repo"></div>' +\n                        '</div>';\n                    }).join('');\n                }\n\n                // Render stars\n                function renderStars(){\n                    const grid = document.getElementById('starGrid');\n                    grid.innerHTML = STARRED.map(repo => {\n                        const owner = repo.owner.login;\n                        const name = repo.name;\n                        const lang = repo.language;\n                        const langDot = lang ? '<span class="lang-dot" style="background:' + getLangColor(lang) + '"></span>' + lang : '';\n                        return '<div class="card" data-owner="' + owner + '" data-repo="' + name + '">' +\n                               '  <div class="card-header">' +\n                               '    <div class="card-title" data-action="open">' + owner + '/' + name + '</div>' +\n                               '    <div><span class="badge">' + (repo.private?'Private':'Public') + '</span></div>' +\n                               '  </div>' +\n                               (repo.description? '<div class="desc">' + repo.description + '</div>' : '') +\n                               '  <div class="meta">' +\n                               '    ' + (lang ? '<div class="meta-item">' + langDot + '</div>' : '') +\n                               '    <div class="meta-item">⭐ ' + (repo.stargazers_count||0) + '</div>' +\n                               '    <div class="meta-item">🍴 ' + (repo.forks_count||0) + '</div>' +\n                               '  </div>' +\n                               '  <div class="card-footer">' +\n                               '    <div class="updated-text">Updated ' + fmtUpdated(repo.updated_at || new Date().toISOString()) + '</div>' +\n                               '    <div class="card-actions">' +\n                               '      ' + starButton(owner,name) +\n                               '    </div>' +\n                               '  </div>' +\n                               '  <div class="repo-icon codicon codicon-repo"></div>' +\n                               '</div>';\n                    }).join('');\n                }\n\n                // Global click handler for buttons and open\n                document.addEventListener('click', (e) => {\n                    const target = e.target.closest('[data-action]');\n                    if (!target) return;\n\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    const cardEl = target.closest('.card');\n                    const owner = cardEl?.getAttribute('data-owner') || target.getAttribute('data-owner');\n                    const repo = cardEl?.getAttribute('data-repo') || target.getAttribute('data-repo');\n                    const action = target.getAttribute('data-action');\n\n                    console.log('Button clicked:', { action, owner, repo, target: target.outerHTML });\n\n                    if (action === 'open') {\n                        vscode.postMessage({ command: 'openRepo', owner, repo });\n                    } else if (action === 'toggle-star') {\n                        const key = owner + '/' + repo;\n                        if (starredSet.has(key)) {\n                            console.log('Unstarring:', key);\n                            vscode.postMessage({ command: 'unstarRepository', owner, repo });\n                        } else {\n                            console.log('Starring:', key);\n                            vscode.postMessage({ command: 'starRepository', owner, repo });\n                        }\n                    } else if (action === 'delete') {\n                        if (confirm('Delete ' + owner + '/' + repo + '? This cannot be undone.')) {\n                            console.log('Deleting:', owner + '/' + repo);\n                            vscode.postMessage({ command: 'deleteRepository', owner, repo });\n                        }\n                    }\n                });\n\n                // Messages from extension (update UI)\n                window.addEventListener('message', (event) => {\n                    const msg = event.data;\n                    if (msg.command === 'starToggled') {\n                        const key = msg.owner + '/' + msg.repo;\n                        if (msg.starred) starredSet.add(key); else starredSet.delete(key);\n                        STARRED = msg.starredRepos || STARRED;\n                        document.getElementById('starCount').textContent = String(STARRED.length);\n                        applyFilters();\n                        renderStars();\n                    }\n                    if (msg.command === 'repoDeleted') {\n                        const key = (msg.owner + '/' + msg.repo).toLowerCase();\n                        REPOS = msg.repositories || REPOS.filter(r => (r.owner.login + '/' + r.name).toLowerCase() !== key);\n                        document.getElementById('repoCount').textContent = String(REPOS.length);\n                        applyFilters();\n                        console.log('Repository deleted successfully:', key);\n                    }\n                });\n\n                // Initial renders\n                renderPinned();\n                applyFilters();\n                renderStars();\n            <\/script>\n        </body>\n        </html>\n    `}(P.webview,p,d,g,m,h,k,O,f,b,v,_),P.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){switch(console.log("Received message from webview:",e),e.command){case"createRepo":l.commands.executeCommand("github-activity-dashboard.createRepo");break;case"openRepo":try{const r=e.owner,t=e.repo;console.log(`[WebView] Clicked on repo: ${r}/${t}. Attempting to reveal in tree view.`);const o=yield T.getChildren();console.log(`[Provider] Found ${o.length} root items in the 'Profile Repos' tree.`);const s=o.find(e=>{var o,s;return(null===(o=e.repoInfo)||void 0===o?void 0:o.owner)===r&&(null===(s=e.repoInfo)||void 0===s?void 0:s.repo)===t});s?(console.log(`[Success] Found matching tree item for ${r}/${t}.`),yield l.commands.executeCommand("github-profile-repos.focus"),yield y.reveal(s,{select:!0,focus:!0,expand:!0}),console.log("[Action] reveal() command executed."),P.dispose()):(console.error(`[Error] Could not find a matching tree item for ${r}/${t}.`),l.window.showErrorMessage(`Could not find repository ${r}/${t} in the list. Please try refreshing the view.`))}catch(e){console.error('Error in "openRepo" message handler:',e),l.window.showErrorMessage(`Failed to open repository view: ${e.message}`)}break;case"openOrg":try{yield l.commands.executeCommand("github-activity-dashboard.openOrganizationProfile",e.orgName)}catch(e){l.window.showErrorMessage(`Failed to open organization: ${e.message}`)}break;case"openEvent":try{yield l.commands.executeCommand("github-activity-dashboard.openEventDetails",e.eventUrl)}catch(e){l.window.showErrorMessage(`Failed to open event: ${e.message}`)}break;case"openProfile":try{yield l.commands.executeCommand("github-activity-dashboard.openUserProfile",e.username)}catch(e){l.window.showErrorMessage(`Failed to open profile: ${e.message}`)}break;case"openStarredRepo":try{const r=e.repoUrl,t=e.repoName;console.log(`Opening starred repo: ${r}, Name: ${t}`);const o=r.match(/github\.com[\/:]([^\/]+)\/([^\/\.]+)/);if(o){const[,e,r]=o;console.log(`Extracted owner: ${e}, repo: ${r}`),yield l.commands.executeCommand("github-activity-dashboard.expandProfileRepo",e,r)}else console.log("Failed to parse starred repo URL"),l.window.showErrorMessage("Invalid starred repository URL format")}catch(e){console.error("Error in openStarredRepo handler:",e),l.window.showErrorMessage(`Failed to open starred repository: ${e.message}`)}break;case"openPullRequest":try{const r=e.prUrl;console.log(`Opening pull request: ${r}`),yield l.env.openExternal(l.Uri.parse(r))}catch(e){console.error("Error in openPullRequest handler:",e),l.window.showErrorMessage(`Failed to open pull request: ${e.message}`)}break;case"openIssue":try{const r=e.issueUrl;console.log(`Opening issue: ${r}`),yield l.env.openExternal(l.Uri.parse(r))}catch(e){console.error("Error in openIssue handler:",e),l.window.showErrorMessage(`Failed to open issue: ${e.message}`)}break;case"starRepository":try{console.log("Starring repository:",e.owner,e.repo);const r=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),t=new u.Octokit({auth:r.accessToken});yield t.activity.starRepoForAuthenticatedUser({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Starred ${e.owner}/${e.repo}`);const o=(yield t.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data;P.webview.postMessage({command:"starToggled",owner:e.owner,repo:e.repo,starred:!0,starredRepos:o})}catch(e){console.error("Error starring repository:",e),l.window.showErrorMessage(`Failed to star repository: ${e.message}`)}break;case"unstarRepository":try{console.log("Unstarring repository:",e.owner,e.repo);const r=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),t=new u.Octokit({auth:r.accessToken});yield t.activity.unstarRepoForAuthenticatedUser({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Unstarred ${e.owner}/${e.repo}`);const o=(yield t.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data;P.webview.postMessage({command:"starToggled",owner:e.owner,repo:e.repo,starred:!1,starredRepos:o})}catch(e){console.error("Error unstarring repository:",e),l.window.showErrorMessage(`Failed to unstar repository: ${e.message}`)}break;case"deleteRepository":try{console.log("Deleting repository:",e.owner,e.repo);const r=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),o=new u.Octokit({auth:r.accessToken});try{if((yield o.repos.get({owner:e.owner,repo:e.repo})).data.owner.login!==r.account.label)return void l.window.showErrorMessage(`You don't have permission to delete ${e.owner}/${e.repo}`)}catch(r){return console.error("Error checking repository ownership:",r),void l.window.showErrorMessage(`Failed to verify ownership of ${e.owner}/${e.repo}`)}yield o.repos.delete({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Deleted repository ${e.owner}/${e.repo}`),(yield o.users.getAuthenticated()).data;let s=[];try{s=(yield o.repos.listForAuthenticatedUser({sort:"updated",per_page:100})).data}catch(e){console.error("Error fetching updated repositories:",e)}P.webview.postMessage({command:"repoDeleted",owner:e.owner,repo:e.repo,repositories:s}),t.refresh(),T.refresh()}catch(e){console.error("Error deleting repository:",e),l.window.showErrorMessage(`Failed to delete repository: ${e.message}`)}}}),void 0,e.subscriptions)}catch(e){l.window.showErrorMessage(`Failed to load profile: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.openStarredFile",e=>a(this,void 0,void 0,function*(){var r,t,o;if(!(null===(r=e.repoInfo)||void 0===r?void 0:r.owner)||!(null===(t=e.repoInfo)||void 0===t?void 0:t.repo)||!(null===(o=e.repoInfo)||void 0===o?void 0:o.sha))return;const s=new u.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const r=yield s.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),t=Buffer.from(r.data.content,"base64").toString("utf8"),o=k(e.label.split(".").pop()||""),n=yield l.workspace.openTextDocument({content:t,language:o});yield l.window.showTextDocument(n,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createIssue",()=>a(this,void 0,void 0,function*(){var e;const t=yield l.window.showInputBox({prompt:"Enter issue title",placeHolder:"Bug: Something is not working..."});if(!t)return;const o=yield l.window.showInputBox({prompt:"Enter issue description (optional)",placeHolder:"Describe the issue..."}),s=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(s)try{const e=(0,p.default)(s.uri.fsPath),n=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!n)return void l.window.showErrorMessage("Not a GitHub repository");const[,i,a]=n,c=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),d=new u.Octokit({auth:c.accessToken}),g=yield d.issues.create({owner:i,repo:a,title:t,body:o||""});l.window.showInformationMessage(`Issue created: #${g.data.number}`),r.refresh()}catch(e){l.window.showErrorMessage(`Failed to create issue: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.searchRepos",()=>a(this,void 0,void 0,function*(){const e=yield l.window.showInputBox({prompt:"Search GitHub repositories",placeHolder:"Enter search terms..."});if(e)try{const r=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),t=new u.Octokit({auth:r.accessToken}),o=yield t.search.repos({q:e,sort:"stars",order:"desc"}),s=l.window.createQuickPick();s.items=o.data.items.slice(0,20).map(e=>({label:e.full_name,description:`⭐ ${e.stargazers_count} | ${e.description||"No description"}`,detail:e.html_url})),s.placeholder="Select a repository to open",s.onDidChangeSelection(e=>{e[0]&&(l.env.openExternal(l.Uri.parse(e[0].detail)),s.dispose())}),s.show()}catch(e){l.window.showErrorMessage(`Search failed: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.checkoutCommit",e=>a(this,void 0,void 0,function*(){var r;const t=null===(r=l.workspace.workspaceFolders)||void 0===r?void 0:r[0];if(t)try{const r=(0,p.default)(t.uri.fsPath);yield r.checkout(e),l.window.showInformationMessage(`Checked out commit ${e}`)}catch(e){l.window.showErrorMessage(`Failed to checkout commit: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.openOrganizationProfile",e=>a(this,void 0,void 0,function*(){const r=`https://github.com/orgs/${e}/people`;yield l.env.openExternal(l.Uri.parse(r))})),l.commands.registerCommand("github-activity-dashboard.openEventDetails",e=>a(this,void 0,void 0,function*(){yield l.env.openExternal(l.Uri.parse(e))})),l.commands.registerCommand("github-activity-dashboard.openUserProfile",e=>a(this,void 0,void 0,function*(){const r=`https://github.com/${e}`;yield l.env.openExternal(l.Uri.parse(r))})),l.commands.registerCommand("github-activity-dashboard.openProfileFile",e=>a(this,void 0,void 0,function*(){var r,t,o;if(!(null===(r=e.repoInfo)||void 0===r?void 0:r.owner)||!(null===(t=e.repoInfo)||void 0===t?void 0:t.repo)||!(null===(o=e.repoInfo)||void 0===o?void 0:o.sha))return;const s=new u.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const r=yield s.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),t=Buffer.from(r.data.content,"base64").toString("utf8"),o=k(e.label.split(".").pop()||""),n=yield l.workspace.openTextDocument({content:t,language:o});yield l.window.showTextDocument(n,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.switchBranch",(e,r,t)=>a(this,void 0,void 0,function*(){var e;const r=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(r)try{const e=(0,p.default)(r.uri.fsPath);yield e.checkout(t),l.window.showInformationMessage(`Switched to branch ${t}`)}catch(e){l.window.showErrorMessage(`Failed to switch branch: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.expandProfileRepo",(e,r)=>a(this,void 0,void 0,function*(){try{const t=yield T.getChildren();console.log(`[Provider] Found ${t.length} root items in the 'Profile Repos' tree.`);const o=t.find(t=>{var o,s;return(null===(o=t.repoInfo)||void 0===o?void 0:o.owner)===e&&(null===(s=t.repoInfo)||void 0===s?void 0:s.repo)===r});o?(console.log(`[Success] Found matching tree item for ${e}/${r}.`),yield l.commands.executeCommand("github-profile-repos.focus"),yield y.reveal(o,{select:!0,focus:!0,expand:!0}),console.log("[Action] reveal() command executed.")):(console.error(`[Error] Could not find a matching tree item for ${e}/${r}.`),l.window.showErrorMessage(`Could not find repository ${e}/${r} in the list. Please try refreshing the view.`))}catch(e){console.error("Error in expandProfileRepo handler:",e),l.window.showErrorMessage(`Failed to expand repository view: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.exploreRepo",(r,t,...o)=>a(this,[r,t,...o],void 0,function*(r,t,o=""){const s=l.window.createWebviewPanel("repoExplorer",`${t} Explorer`,l.ViewColumn.One,{enableScripts:!0,localResourceRoots:[l.Uri.joinPath(e.extensionUri,"resources")]}),n=E();s.webview.html=(0,d.getRepoExplorerWebviewContent)(s.webview,n,e.extensionUri,r,t,o);const i=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),c=new u.Octokit({auth:i.accessToken});try{const e=yield c.repos.getContent({owner:r,repo:t,path:o});let n='<ul class="repo-list">';if(Array.isArray(e.data))for(const r of e.data){const e="dir"===r.type?"codicon-folder":"codicon-file",t=r.size?` (${(r.size/1024).toFixed(1)} KB)`:"";n+=`<li class="repo-item" data-path="${r.path}" data-type="${r.type}">\n                        <span class="codicon ${e} repo-item-icon"></span>\n                        <span class="repo-item-name">${r.name}</span>\n                        <span class="repo-item-size">${t}</span>\n                    </li>`}else n+=`<li class="repo-item" data-path="${e.data.path}" data-type="file">\n                    <span class="codicon codicon-file repo-item-icon"></span>\n                    <span class="repo-item-name">${e.data.name}</span>\n                    <span class="repo-item-size"> (${(e.data.size/1024).toFixed(1)} KB)</span>\n                </li>`;n+="</ul>",s.webview.postMessage({command:"updateExplorer",html:n}),s.webview.onDidReceiveMessage(o=>a(this,void 0,void 0,function*(){var n;if("navigate"===o.command&&o.path)l.commands.executeCommand("github-activity-dashboard.exploreRepo",r,t,o.path),s.dispose();else if("openFile"===o.command&&o.path)try{const s=yield c.git.getBlob({owner:r,repo:t,file_sha:(Array.isArray(e.data)?null===(n=e.data.find(e=>e.path===o.path))||void 0===n?void 0:n.sha:e.data.sha)||""}),i=Buffer.from(s.data.content,"base64").toString("utf8"),a=k(o.path.split(".").pop()||""),u=yield l.workspace.openTextDocument({content:i,language:a});yield l.window.showTextDocument(u,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}}))}catch(e){let r="Unknown error";(e instanceof Error||"object"==typeof e&&e&&"message"in e)&&(r=e.message),s.webview.postMessage({command:"updateExplorer",html:`<div class="error">Failed to load repository: ${r}</div>`})}}))},r.deactivate=function(){};const l=i(t(398)),u=t(458),p=c(t(662)),d=t(566);class g{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.repositories=[],this.repoItems=[],this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e)return[];{const e=yield this.octokit.users.getAuthenticated().then(e=>e.data.login),[r,t]=yield Promise.all([this.octokit.search.issuesAndPullRequests({q:`is:open is:issue assignee:${e}`}),this.octokit.search.issuesAndPullRequests({q:`is:open is:pr review-requested:${e}`})]);return[new l.TreeItem(`Assigned Issues: ${r.data.total_count}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`Review Requests: ${t.data.total_count}`,l.TreeItemCollapsibleState.None)]}})}}class m{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=(yield this.octokit.users.getAuthenticated()).data,r=[new l.TreeItem(`👤 ${e.name||e.login}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📧 ${e.email||"Private"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`🏢 ${e.company||"No company"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📍 ${e.location||"No location"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📝 ${e.bio||"No bio"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📊 ${e.public_repos} public repos`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👥 ${e.followers} followers`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👤 ${e.following} following`,l.TreeItemCollapsibleState.None),new l.TreeItem(`⭐ ${e.public_gists} public gists`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📅 Joined ${new Date(e.created_at).toLocaleDateString()}`,l.TreeItemCollapsibleState.None)],t=new l.TreeItem("🔗 View Profile in VS Code",l.TreeItemCollapsibleState.None);return t.command={command:"github-activity-dashboard.openProfile",title:"Open Profile in VS Code",arguments:[]},r.push(t),r}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class h{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["notifications"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=yield this.octokit.activity.listNotificationsForAuthenticatedUser();return 0===e.data.length?[new l.TreeItem("No notifications",l.TreeItemCollapsibleState.None)]:e.data.map(e=>{const r=new l.TreeItem(e.subject.title,l.TreeItemCollapsibleState.None);return r.description=e.repository.full_name,r.tooltip=`${e.subject.type}: ${e.subject.title}\nRepository: ${e.repository.full_name}\nUpdated: ${e.updated_at}`,e.subject.url&&(r.command={command:"vscode.open",title:"Open Notification",arguments:[l.Uri.parse(e.subject.url.replace("api.github.com/repos","github.com").replace("/pulls/","/pull/").replace("/issues/","/issues/"))]}),r.iconPath=e.unread?new l.ThemeIcon("mail"):new l.ThemeIcon("mail-read"),r})}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class f{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){return this.octokit?(yield this.octokit.repos.listForAuthenticatedUser()).data.map(e=>{const r=new l.TreeItem(e.name);return r.command={command:"vscode.open",title:"Open repo",arguments:[l.Uri.parse(e.html_url)]},r}):[]})}}class b{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];const{data:e}=yield this.octokit.activity.listPublicEventsForUser({username:(yield this.octokit.users.getAuthenticated()).data.login});return e.map(e=>new l.TreeItem(`${e.type} on ${e.repo.name}`))})}}class v{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){return this.octokit?(yield this.octokit.activity.listReposStarredByAuthenticatedUser()).data.map(e=>new y(e.name,l.TreeItemCollapsibleState.None,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url})):[]})}}class w{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.repositories=[],this.repoItems=[],this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new u.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){return a(this,void 0,void 0,function*(){if(!this.octokit)return;const e=yield this.octokit.repos.listForAuthenticatedUser({per_page:100});this.repositories=e.data,this.repoItems=[],this._onDidChangeTreeData.fire()})}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e&&e.repoInfo){const{owner:r,repo:t,path:o}=e.repoInfo;if("repo"===e.repoInfo.type||"dir"===e.repoInfo.type)try{const e=yield this.octokit.repos.getContent({owner:r,repo:t,path:o||""});if(Array.isArray(e.data))return e.data.map(e=>new T(e.name,"dir"===e.type?l.TreeItemCollapsibleState.Collapsed:l.TreeItemCollapsibleState.None,{owner:r,repo:t,path:e.path,type:e.type,sha:e.sha}))}catch(e){return[new T(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}return[]}return 0===this.repoItems.length&&this.repositories.length>0&&(this.repoItems=this.repositories.map(e=>{const r=new T(e.name,l.TreeItemCollapsibleState.Collapsed,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url});return r.description=e.private?"Private":"Public",r.tooltip=`${e.full_name}\n${e.description||"No description"}\n⭐ ${e.stargazers_count} stars • 🍴 ${e.forks_count} forks`,r})),this.repoItems})}}class T extends l.TreeItem{constructor(e,r,t){super(e,r),this.label=e,this.collapsibleState=r,this.repoInfo=t,"file"===(null==t?void 0:t.type)&&(this.command={command:"github-activity-dashboard.openProfileFile",title:"Open File",arguments:[this]})}}class y extends l.TreeItem{constructor(e,r,t){super(e,r),this.label=e,this.collapsibleState=r,this.repoInfo=t,"file"===(null==t?void 0:t.type)&&(this.command={command:"github-activity-dashboard.openStarredFile",title:"Open File",arguments:[this]})}}function E(){let e="";for(let r=0;r<32;r++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}function k(e){return{ts:"typescript",js:"javascript",json:"json",md:"markdown",py:"python",java:"java",cs:"csharp",cpp:"cpp",c:"c",go:"go",html:"html",css:"css"}[e]||"plaintext"}},317:e=>{"use strict";e.exports=require("child_process")},346:e=>{e.exports=function e(r,t,o,s){if("function"!=typeof o)throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce(function(t,o){return e.bind(null,r,o,t,s)},o)():Promise.resolve().then(function(){return r.registry[t]?r.registry[t].reduce(function(e,r){return r.hook.bind(null,e,s)},o)():o(s)})}},398:e=>{"use strict";e.exports=require("vscode")},423:function(e,r,t){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const s=t(896),n=o(t(753)).default("@kwsites/file-exists");r.exists=function(e,t=r.READABLE){return function(e,r,t){n("checking %s",e);try{const o=s.statSync(e);return o.isFile()&&r?(n("[OK] path represents a file"),!0):o.isDirectory()&&t?(n("[OK] path represents a directory"),!0):(n("[FAIL] path represents something other than a file or directory"),!1)}catch(e){if("ENOENT"===e.code)return n("[FAIL] path is not accessible: %o",e),!1;throw n("[FATAL] %o",e),e}}(e,(t&r.FILE)>0,(t&r.FOLDER)>0)},r.FILE=1,r.FOLDER=2,r.READABLE=r.FILE+r.FOLDER},447:e=>{e.exports=function(e,r,t){if(e.registry[r]){var o=e.registry[r].map(function(e){return e.orig}).indexOf(t);-1!==o&&e.registry[r].splice(o,1)}}},458:(e,r,t)=>{"use strict";function o(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}t.r(r),t.d(r,{Octokit:()=>ee});var s=t(811);function n(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(o=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(r[o])?Object.assign(t,{[o]:r[o]}):o in e?t[o]=n(e[o],r[o]):Object.assign(t,{[o]:r[o]})}),t}function i(e){for(const r in e)void 0===e[r]&&delete e[r];return e}function a(e,r,t){if("string"==typeof r){let[e,o]=r.split(" ");t=Object.assign(o?{method:e,url:o}:{url:e},t)}else t=Object.assign({},r);var o;t.headers=(o=t.headers)?Object.keys(o).reduce((e,r)=>(e[r.toLowerCase()]=o[r],e),{}):{},i(t),i(t.headers);const s=n(e||{},t);return"/graphql"===t.url&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(e=>!s.mediaType.previews.includes(e)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),s}const c=/\{[^{}}]+\}/g;function l(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function u(e,r){const t={__proto__:null};for(const o of Object.keys(e))-1===r.indexOf(o)&&(t[o]=e[o]);return t}function p(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function d(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function g(e,r,t){return r="+"===e||"#"===e?p(r):d(r),t?d(t)+"="+r:r}function m(e){return null!=e}function h(e){return";"===e||"&"===e||"?"===e}function f(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,o,s){if(o){let e="";const s=[];if(-1!==t.indexOf(o.charAt(0))&&(e=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(t){var o=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);s.push(function(e,r,t,o){var s=e[t],n=[];if(m(s)&&""!==s)if("string"==typeof s||"number"==typeof s||"boolean"==typeof s)s=s.toString(),o&&"*"!==o&&(s=s.substring(0,parseInt(o,10))),n.push(g(r,s,h(r)?t:""));else if("*"===o)Array.isArray(s)?s.filter(m).forEach(function(e){n.push(g(r,e,h(r)?t:""))}):Object.keys(s).forEach(function(e){m(s[e])&&n.push(g(r,s[e],e))});else{const e=[];Array.isArray(s)?s.filter(m).forEach(function(t){e.push(g(r,t))}):Object.keys(s).forEach(function(t){m(s[t])&&(e.push(d(t)),e.push(g(r,s[t].toString())))}),h(r)?n.push(d(t)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===r?m(s)&&n.push(d(t)):""!==s||"&"!==r&&"?"!==r?""===s&&n.push(""):n.push(d(t)+"=");return n}(r,e,o[1],o[2]||o[3]))}),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==s.length?e:"")+s.join(n)}return s.join(",")}return p(s)}),"/"===e?e:e.replace(/\/$/,"")}function b(e){let r,t=e.method.toUpperCase(),o=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),n=u(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const r=e.match(c);return r?r.map(l).reduce((e,r)=>e.concat(r),[]):[]}(o);var a;o=(a=o,{expand:f.bind(null,a)}).expand(n),/^http/.test(o)||(o=e.baseUrl+o);const p=u(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),o.endsWith("/graphql")&&e.mediaType.previews?.length)){const r=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=r.concat(e.mediaType.previews).map(r=>`application/vnd.github.${r}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(t)?o=function(e,r){const t=/\?/.test(e)?"&":"?",o=Object.keys(r);return 0===o.length?e:e+t+o.map(e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`).join("&")}(o,p):"data"in p?r=p.data:Object.keys(p).length&&(r=p),s["content-type"]||void 0===r||(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&void 0===r&&(r=""),Object.assign({method:t,url:o,headers:s},void 0!==r?{body:r}:null,e.request?{request:e.request}:null)}function v(e,r,t){return b(a(e,r,t))}const w=function e(r,t){const o=a(r,t),s=v.bind(null,o);return Object.assign(s,{DEFAULTS:o,defaults:e.bind(null,o),merge:a.bind(null,o),parse:b})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/9.0.6 ${o()}`},mediaType:{format:""}});class T extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var y=t(519),E=t.n(y);const k=E()(e=>console.warn(e)),_=E()(e=>console.warn(e));class P extends Error{constructor(e,r,t){let o;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=r,"headers"in t&&void 0!==t.headers&&(o=t.headers),"response"in t&&(this.response=t.response,o=t.response.headers);const s=Object.assign({},t.request);t.request.headers.authorization&&(s.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=s,Object.defineProperty(this,"code",{get:()=>(k(new T("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),r)}),Object.defineProperty(this,"headers",{get:()=>(_(new T("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),o||{})})}}function O(e){const r=e.request&&e.request.log?e.request.log:console,t=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let o,s,n={},{fetch:i}=globalThis;if(e.request?.fetch&&(i=e.request.fetch),!i)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return i(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async i=>{s=i.url,o=i.status;for(const e of i.headers)n[e[0]]=e[1];if("deprecation"in n){const t=n.link&&n.link.match(/<([^<>]+)>; rel="deprecation"/),o=t&&t.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${n.sunset}${o?`. See ${o}`:""}`)}if(204!==o&&205!==o){if("HEAD"===e.method){if(o<400)return;throw new P(i.statusText,o,{response:{url:s,status:o,headers:n,data:void 0},request:e})}if(304===o)throw new P("Not modified",o,{response:{url:s,status:o,headers:n,data:await S(i)},request:e});if(o>=400){const r=await S(i),t=new P(function(e){if("string"==typeof e)return e;let r;return r="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${r}`:`${e.message}${r}`:`Unknown error: ${JSON.stringify(e)}`}(r),o,{response:{url:s,status:o,headers:n,data:r},request:e});throw t}return t?await S(i):i.body}}).then(e=>({status:o,url:s,headers:n,data:e})).catch(r=>{if(r instanceof P)throw r;if("AbortError"===r.name)throw r;let t=r.message;throw"TypeError"===r.name&&"cause"in r&&(r.cause instanceof Error?t=r.cause.message:"string"==typeof r.cause&&(t=r.cause)),new P(t,500,{request:e})})}async function S(e){const r=e.headers.get("content-type");return/application\/json/.test(r)?e.json().catch(()=>e.text()).catch(()=>""):!r||/^text\/|charset=utf-8$/.test(r)?e.text():function(e){return e.arrayBuffer()}(e)}const C=function e(r,t){const o=r.defaults(t);return Object.assign(function(r,t){const s=o.merge(r,t);if(!s.request||!s.request.hook)return O(o.parse(s));const n=(e,r)=>O(o.parse(o.merge(e,r)));return Object.assign(n,{endpoint:o,defaults:e.bind(null,o)}),s.request.hook(n,s)},{endpoint:o,defaults:e.bind(null,o)})}(w,{headers:{"user-agent":`octokit-request.js/8.4.1 ${o()}`}});var A=class extends Error{constructor(e,r,t){super("Request failed due to following response errors:\n"+t.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=r,this.response=t,this.name="GraphqlResponseError",this.errors=t.errors,this.data=t.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},G=["method","baseUrl","url","headers","request","query","mediaType"],F=["query","method","url"],R=/\/api\/v3\/?$/;function x(e,r){const t=e.defaults(r);return Object.assign((e,r)=>function(e,r,t){if(t){if("string"==typeof r&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in t)if(F.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const o="string"==typeof r?Object.assign({query:r},t):r,s=Object.keys(o).reduce((e,r)=>G.includes(r)?(e[r]=o[r],e):(e.variables||(e.variables={}),e.variables[r]=o[r],e),{}),n=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return R.test(n)&&(s.url=n.replace(R,"/api/graphql")),e(s).then(e=>{if(e.data.errors){const r={};for(const t of Object.keys(e.headers))r[t]=e.headers[t];throw new A(s,r,e.data)}return e.data.data})}(t,e,r),{defaults:x.bind(null,t),endpoint:t.endpoint})}x(C,{headers:{"user-agent":`octokit-graphql.js/7.1.1 ${o()}`},method:"POST",url:"/graphql"});const D=/^v1\./,U=/^ghs_/,I=/^ghu_/;async function L(e){const r=3===e.split(/\./).length,t=D.test(e)||U.test(e),o=I.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":o?"user-to-server":"oauth"}}async function j(e,r,t,o){const s=r.endpoint.merge(t,o);return s.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),r(s)}const $=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(L.bind(null,e),{hook:j.bind(null,e)})};var M="5.2.2",q=()=>{},B=console.warn.bind(console),N=console.error.bind(console),z=`octokit-core.js/${M} ${o()}`,H=class{static{this.VERSION=M}static defaults(e){return class extends(this){constructor(...r){const t=r[0]||{};super("function"!=typeof e?Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null):e(t))}}}static{this.plugins=[]}static plugin(...e){const r=this.plugins;return class extends(this){static{this.plugins=r.concat(e.filter(e=>!r.includes(e)))}}}constructor(e={}){const r=new s.Collection,t={baseUrl:C.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};var o;if(t.headers["user-agent"]=e.userAgent?`${e.userAgent} ${z}`:z,e.baseUrl&&(t.baseUrl=e.baseUrl),e.previews&&(t.mediaType.previews=e.previews),e.timeZone&&(t.headers["time-zone"]=e.timeZone),this.request=C.defaults(t),this.graphql=(o=this.request,x(o,{method:"POST",url:"/graphql"})).defaults(t),this.log=function(e={}){return"function"!=typeof e.debug&&(e.debug=q),"function"!=typeof e.info&&(e.info=q),"function"!=typeof e.warn&&(e.warn=B),"function"!=typeof e.error&&(e.error=N),e}(e.log),this.hook=r,e.authStrategy){const{authStrategy:t,...o}=e,s=t(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:o},e.auth));r.wrap("request",s.hook),this.auth=s}else if(e.auth){const t=$(e.auth);r.wrap("request",t.hook),this.auth=t}else this.auth=async()=>({type:"unauthenticated"});const n=this.constructor;for(let r=0;r<n.plugins.length;++r)Object.assign(this,n.plugins[r](this,e))}};function W(e){e.hook.wrap("request",(r,t)=>{e.log.debug("request",t);const o=Date.now(),s=e.request.endpoint.parse(t),n=s.url.replace(t.baseUrl,"");return r(t).then(r=>(e.log.info(`${s.method} ${n} - ${r.status} in ${Date.now()-o}ms`),r)).catch(r=>{throw e.log.info(`${s.method} ${n} - ${r.status} in ${Date.now()-o}ms`),r})})}function V(e,r,t){const o="function"==typeof r?r.endpoint(t):e.request.endpoint(r,t),s="function"==typeof r?r:e.request,n=o.method,i=o.headers;let a=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const r=e.data.incomplete_results,t=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const s=Object.keys(e.data)[0],n=e.data[s];return e.data=n,void 0!==r&&(e.data.incomplete_results=r),void 0!==t&&(e.data.repository_selection=t),e.data.total_count=o,e}(await s({method:n,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function K(e,r,t,o){return"function"==typeof t&&(o=t,t=void 0),J(e,[],V(e,r,t)[Symbol.asyncIterator](),o)}function J(e,r,t,o){return t.next().then(s=>{if(s.done)return r;let n=!1;return r=r.concat(o?o(s.value,function(){n=!0}):s.value.data),n?r:J(e,r,t,o)})}function Y(e){return{paginate:Object.assign(K.bind(null,e),{iterator:V.bind(null,e)})}}W.VERSION="4.0.1",Object.assign(K,{iterator:V}),Y.VERSION="11.4.4-cjs.2";const Q=new Map;for(const[e,r]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(const[t,o]of Object.entries(r)){const[r,s,n]=o,[i,a]=r.split(/ /),c=Object.assign({method:i,url:a},s);Q.has(e)||Q.set(e,new Map),Q.get(e).set(t,{scope:e,methodName:t,endpointDefaults:c,decorations:n})}const X={has:({scope:e},r)=>Q.get(e).has(r),getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,r,t)=>(Object.defineProperty(e.cache,r,t),!0),deleteProperty:(e,r)=>(delete e.cache[r],!0),ownKeys:({scope:e})=>[...Q.get(e).keys()],set:(e,r,t)=>e.cache[r]=t,get({octokit:e,scope:r,cache:t},o){if(t[o])return t[o];const s=Q.get(r).get(o);if(!s)return;const{endpointDefaults:n,decorations:i}=s;return t[o]=i?function(e,r,t,o,s){const n=e.request.defaults(o);return Object.assign(function(...o){let i=n.endpoint.merge(...o);if(s.mapToData)return i=Object.assign({},i,{data:i[s.mapToData],[s.mapToData]:void 0}),n(i);if(s.renamed){const[o,n]=s.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${o}.${n}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const i=n.endpoint.merge(...o);for(const[o,n]of Object.entries(s.renamedParameters))o in i&&(e.log.warn(`"${o}" parameter is deprecated for "octokit.${r}.${t}()". Use "${n}" instead`),n in i||(i[n]=i[o]),delete i[o]);return n(i)}return n(...o)},n)}(e,r,o,n,i):e.request.defaults(n),t[o]}};function Z(e){const r=function(e){const r={};for(const t of Q.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},X);return r}(e);return{...r,rest:r}}Z.VERSION="13.3.2-cjs.1";var ee=H.plugin(W,Z,Y).defaults({userAgent:"octokit-rest.js/20.1.2"})},474:e=>{"use strict";e.exports=require("node:events")},519:(e,r,t)=>{var o=t(587);function s(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function n(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=!1,r}e.exports=o(s),e.exports.strict=o(n),s.proto=s(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return s(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return n(this)},configurable:!0})})},566:function(e,r,t){"use strict";var o,s=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var s=Object.getOwnPropertyDescriptor(r,t);s&&!("get"in s?!r.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,s)}:function(e,r,t,o){void 0===o&&(o=t),e[o]=r[t]}),n=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var r=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[r.length]=t);return r},o(e)},function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t=o(e),i=0;i<t.length;i++)"default"!==t[i]&&s(r,e,t[i]);return n(r,e),r});Object.defineProperty(r,"__esModule",{value:!0}),r.getCreateRepoWebviewContent=function(e,r,t){const o=e.asWebviewUri(a.Uri.joinPath(t,"resources","createRepo.css")),s=e.asWebviewUri(a.Uri.joinPath(t,"node_modules","@vscode/codicons","dist","codicon.css"));return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; font-src ${e.cspSource}; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${r}';">\n            <link href="${o}" rel="stylesheet">\n            <link href="${s}" rel="stylesheet" />\n            <title>Create a New Repository</title>\n        </head>\n        <body class="vscode-dark">\n            <div class="github-create-repo-bg">\n                <div class="container github-create-repo">\n                    <div class="header">\n                        <i class="codicon codicon-github-inverted"></i>\n                        <h1>Create a new repository</h1>\n                    </div>\n                    <p class="github-create-repo-desc">A repository contains all project files, including the revision history.</p>\n                    <form class="github-create-repo-form">\n                        <div class="form-group">\n                            <label for="repoName">Repository name <span class="required">*</span></label>\n                            <div class="input-with-icon">\n                                <i class="codicon codicon-repo"></i>\n                                <input type="text" id="repoName" name="repoName" required placeholder="e.g. my-awesome-project">\n                            </div>\n                            <p class="description">Great repository names are short and memorable.</p>\n                        </div>\n                        <div class="form-group">\n                            <label for="description">Description <span class="description">(optional)</span></label>\n                            <input type="text" id="description" name="description" placeholder="Describe your repository">\n                        </div>\n                        <div class="form-group visibility-group">\n                            <div class="radio-option">\n                                <input type="radio" id="public" name="visibility" value="public" checked>\n                                <label for="public">\n                                    <i class="codicon codicon-globe"></i>\n                                    <strong>Public</strong>\n                                    <span class="description">Anyone on the internet can see this repository. You choose who can commit.</span>\n                                </label>\n                            </div>\n                            <div class="radio-option">\n                                <input type="radio" id="private" name="visibility" value="private">\n                                <label for="private">\n                                    <i class="codicon codicon-lock"></i>\n                                    <strong>Private</strong>\n                                    <span class="description">You choose who can see and commit to this repository.</span>\n                                </label>\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <label>Initialize this repository with:</label>\n                            <div class="checkbox-option">\n                                <input type="checkbox" id="addReadme" name="addReadme">\n                                <label for="addReadme">Add a README file</label>\n                                <p class="description">This is where you can write a long description for your project.</p>\n                            </div>\n                        </div>\n                        <button id="createRepoBtn" class="github-create-repo-btn"><i class="codicon codicon-add"></i>Create repository</button>\n                        <div id="error-message" class="error-message"></div>\n                    </form>\n                </div>\n            </div>\n            <script nonce="${r}">\n                const vscode = acquireVsCodeApi();\n                const createRepoBtn = document.getElementById('createRepoBtn');\n                const repoNameInput = document.getElementById('repoName');\n                const descriptionInput = document.getElementById('description');\n                const publicRadio = document.getElementById('public');\n                const addReadmeCheckbox = document.getElementById('addReadme');\n                const errorMessage = document.getElementById('error-message');\n                document.body.classList.add(document.body.dataset.vscodeThemeKind || 'vscode-dark');\n                createRepoBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const repoName = repoNameInput.value;\n                    if (!repoName) {\n                        errorMessage.textContent = 'Repository name is required.';\n                        repoNameInput.focus();\n                        return;\n                    }\n                    errorMessage.textContent = '';\n                    createRepoBtn.disabled = true;\n                    createRepoBtn.innerHTML = '<i class="codicon codicon-sync codicon-spin"></i> Creating...';\n                    vscode.postMessage({\n                        command: 'createRepository',\n                        repoName: repoName,\n                        description: descriptionInput.value,\n                        isPrivate: !publicRadio.checked,\n                        initReadme: addReadmeCheckbox.checked\n                    });\n                });\n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    if (message.command === 'creationFailed') {\n                        createRepoBtn.disabled = false;\n                        createRepoBtn.innerHTML = '<i class="codicon codicon-add"></i>Create repository';\n                    }\n                });\n            <\/script>\n        </body>\n        </html>\n    `},r.getRepoExplorerWebviewContent=function(e,r,t,o,s,n=""){const i=e.asWebviewUri(a.Uri.joinPath(t,"resources","createRepo.css"));return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${r}';">\n            <link href="${i}" rel="stylesheet">\n            <title>${s} Explorer</title>\n            <style>\n                body { font-family: var(--vscode-font-family); background: var(--vscode-editor-background); color: var(--vscode-editor-foreground); }\n                .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n                .header { display: flex; align-items: center; gap: 12px; margin-bottom: 20px; padding-bottom: 12px; border-bottom: 1px solid var(--vscode-panel-border); }\n                .header h1 { margin: 0; font-size: 24px; }\n                .breadcrumb { display: flex; gap: 8px; margin-bottom: 20px; }\n                .breadcrumb-item { color: var(--vscode-textLink-foreground); cursor: pointer; }\n                .breadcrumb-item:hover { text-decoration: underline; }\n                .breadcrumb-separator { color: var(--vscode-description-foreground); }\n                .repo-list { list-style: none; padding: 0; }\n                .repo-item { display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid var(--vscode-panel-border); border-radius: 6px; margin-bottom: 8px; background: var(--vscode-panel-background); cursor: pointer; transition: all 0.2s; }\n                .repo-item:hover { border-color: var(--vscode-focusBorder); background: var(--vscode-toolbar-hoverBackground); }\n                .repo-item-icon { font-size: 16px; width: 20px; text-align: center; }\n                .repo-item-name { flex: 1; font-weight: 500; }\n                .repo-item-size { color: var(--vscode-description-foreground); font-size: 12px; }\n                .loading { text-align: center; padding: 40px; color: var(--vscode-description-foreground); }\n                .error { color: var(--vscode-errorForeground); padding: 20px; background: var(--vscode-inputValidation-errorBackground); border: 1px solid var(--vscode-inputValidation-errorBorder); border-radius: 6px; }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="header">\n                    <span class="codicon codicon-repo"></span>\n                    <h1>${o}/${s}</h1>\n                </div>\n                ${n?`<div class="breadcrumb">${n.split("/").map((e,r)=>`<span class="breadcrumb-item" data-path="${n.split("/").slice(0,r+1).join("/")}">${e}</span>${r<n.split("/").length-1?'<span class="breadcrumb-separator">/</span>':""}`).join("")}</div>`:""}\n                <div id="repo-explorer">\n                    <div class="loading">Loading repository contents...</div>\n                </div>\n            </div>\n            <script nonce="${r}">\n                const vscode = acquireVsCodeApi();\n                \n                // Handle breadcrumb navigation\n                document.addEventListener('click', function(e) {\n                    const breadcrumbItem = e.target.closest('.breadcrumb-item');\n                    if (breadcrumbItem) {\n                        const path = breadcrumbItem.getAttribute('data-path');\n                        vscode.postMessage({ command: 'navigate', path: path });\n                        e.preventDefault();\n                    }\n                });\n                \n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    if (message.command === 'updateExplorer') {\n                        document.getElementById('repo-explorer').innerHTML = message.html;\n                        \n                        // Add click handlers for items\n                        document.querySelectorAll('.repo-item[data-path]').forEach(item => {\n                            item.addEventListener('click', function() {\n                                const path = this.getAttribute('data-path');\n                                const type = this.getAttribute('data-type');\n                                if (type === 'dir') {\n                                    vscode.postMessage({ command: 'navigate', path: path });\n                                } else {\n                                    vscode.postMessage({ command: 'openFile', path: path });\n                                }\n                            });\n                        });\n                    }\n                });\n            <\/script>\n        </body>\n        </html>\n    `};const a=i(t(398))},573:e=>{"use strict";e.exports=require("node:buffer")},585:e=>{var r=1e3,t=60*r,o=60*t,s=24*o,n=7*s;function i(e,r,t,o){var s=r>=1.5*t;return Math.round(e/t)+" "+o+(s?"s":"")}e.exports=function(e,a){a=a||{};var c,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*n;case"days":case"day":case"d":return a*s;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*t;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===u&&isFinite(e))return a.long?(c=e,(l=Math.abs(c))>=s?i(c,l,s,"day"):l>=o?i(c,l,o,"hour"):l>=t?i(c,l,t,"minute"):l>=r?i(c,l,r,"second"):c+" ms"):function(e){var n=Math.abs(e);return n>=s?Math.round(e/s)+"d":n>=o?Math.round(e/o)+"h":n>=t?Math.round(e/t)+"m":n>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},587:e=>{e.exports=function e(r,t){if(r&&t)return e(r)(t);if("function"!=typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach(function(e){o[e]=r[e]}),o;function o(){for(var e=new Array(arguments.length),t=0;t<e.length;t++)e[t]=arguments[t];var o=r.apply(this,e),s=e[e.length-1];return"function"==typeof o&&o!==s&&Object.keys(s).forEach(function(e){o[e]=s[e]}),o}}},640:e=>{e.exports=function(e,r,t,o){var s=o;e.registry[t]||(e.registry[t]=[]),"before"===r&&(o=function(e,r){return Promise.resolve().then(s.bind(null,r)).then(e.bind(null,r))}),"after"===r&&(o=function(e,r){var t;return Promise.resolve().then(e.bind(null,r)).then(function(e){return s(t=e,r)}).then(function(){return t})}),"error"===r&&(o=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch(function(e){return s(e,r)})}),e.registry[t].push({hook:o,orig:s})}},662:(e,r,t)=>{"use strict";var o,s,n,i=Object.create,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,u=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty,d=(e,r)=>function(){return e&&(r=(0,e[l(e)[0]])(e=0)),r},g=(e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})},m=(e,r,t,o)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let s of l(r))p.call(e,s)||s===t||a(e,s,{get:()=>r[s],enumerable:!(o=c(r,s))||o.enumerable});return e},h=e=>m(a({},"__esModule",{value:!0}),e),f=d({"src/lib/errors/git-error.ts"(){o=class extends Error{constructor(e,r){super(r),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),b=d({"src/lib/errors/git-response-error.ts"(){f(),s=class extends o{constructor(e,r){super(void 0,r||String(e)),this.git=e}}}});function v(...e){const r=new String(e);return n.set(r,e),r}function w(e){return e instanceof String&&n.has(e)}function T(e){return n.get(e)||[]}var y,E,k,_,P,O,S,C,A=d({"src/lib/args/pathspec.ts"(){n=new WeakMap}}),G=d({"src/lib/errors/git-construct-error.ts"(){f(),y=class extends o{constructor(e,r){super(void 0,r),this.config=e}}}}),F=d({"src/lib/errors/git-plugin-error.ts"(){f(),E=class extends o{constructor(e,r,t){super(e,t),this.task=e,this.plugin=r,Object.setPrototypeOf(this,new.target.prototype)}}}}),R=d({"src/lib/errors/task-configuration-error.ts"(){f(),k=class extends o{constructor(e){super(void 0,e)}}}});function x(e){return"function"!=typeof e?S:e}function D(e){return"function"==typeof e&&e!==S}function U(e,r){const t=e.indexOf(r);return t<=0?[e,""]:[e.substr(0,t),e.substr(t+1)]}function I(e,r=0){return j(e)&&e.length>r?e[r]:void 0}function L(e,r=0){if(j(e)&&e.length>r)return e[e.length-1-r]}function j(e){return!(!e||"number"!=typeof e.length)}function $(e="",r=!0,t="\n"){return e.split(t).reduce((e,t)=>{const o=r?t.trim():t;return o&&e.push(o),e},[])}function M(e,r){return $(e,!0).map(e=>r(e))}function q(e){return(0,P.exists)(e,P.FOLDER)}function B(e,r){return Array.isArray(e)?e.includes(r)||e.push(r):e.add(r),r}function N(e,r){return Array.isArray(e)&&!e.includes(r)&&e.push(r),e}function z(e,r){if(Array.isArray(e)){const t=e.indexOf(r);t>=0&&e.splice(t,1)}else e.delete(r);return r}function H(e){return Array.isArray(e)?e:[e]}function W(e){return e.replace(/[\s-]+(.)/g,(e,r)=>r.toUpperCase())}function V(e){return H(e).map(String)}function K(e,r=0){if(null==e)return r;const t=parseInt(e,10);return isNaN(t)?r:t}function J(e,r){const t=[];for(let o=0,s=e.length;o<s;o++)t.push(r,e[o]);return t}function Y(e){return(Array.isArray(e)?_.Buffer.concat(e):e).toString("utf-8")}function Q(e,r){return Object.assign({},...r.map(r=>r in e?{[r]:e[r]}:{}))}function X(e=0){return new Promise(r=>setTimeout(r,e))}function Z(e){if(!1!==e)return e}var ee,re,te,oe,se,ne=d({"src/lib/utils/util.ts"(){_=t(573),P=t(926),O="\0",S=()=>{},C=Object.prototype.toString.call.bind(Object.prototype.toString)}});function ie(e,r,t){return r(e)?e:arguments.length>2?t:void 0}function ae(e,r){const t=w(e)?"string":typeof e;return/number|string|boolean/.test(t)&&(!r||!r.includes(t))}function ce(e){return!!e&&"[object Object]"===C(e)}function le(e){return"function"==typeof e}var ue,pe,de,ge,me,he=d({"src/lib/utils/argument-filters.ts"(){ne(),A(),ee=e=>Array.isArray(e),re=e=>"string"==typeof e,te=e=>Array.isArray(e)&&e.every(re),oe=e=>re(e)||Array.isArray(e)&&e.every(re),se=e=>null!=e&&!"number|boolean|function".includes(typeof e)&&(Array.isArray(e)||"string"==typeof e||"number"==typeof e.length)}}),fe=d({"src/lib/utils/exit-codes.ts"(){ue=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(ue||{})}}),be=d({"src/lib/utils/git-output-streams.ts"(){pe=class e{constructor(e,r){this.stdOut=e,this.stdErr=r}asStrings(){return new e(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),ve=d({"src/lib/utils/line-parser.ts"(){de=class{constructor(e,r){this.matches=[],this.parse=(e,r)=>(this.resetMatches(),!!this._regExp.every((r,t)=>this.addMatch(r,t,e(t)))&&!1!==this.useMatches(r,this.prepareMatches())),this._regExp=Array.isArray(e)?e:[e],r&&(this.useMatches=r)}useMatches(e,r){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,r,t){const o=t&&e.exec(t);return o&&this.pushMatch(r,o),!!o}pushMatch(e,r){this.matches.push(...r.slice(1))}},ge=class extends de{addMatch(e,r,t){return/^remote:\s/.test(String(t))&&super.addMatch(e,r,t)}pushMatch(e,r){(e>0||r.length>1)&&super.pushMatch(e,r)}}}});function we(...e){const r=process.cwd(),t=Object.assign({baseDir:r,...me},...e.filter(e=>"object"==typeof e&&e));return t.baseDir=t.baseDir||r,t.trimmed=!0===t.trimmed,t}var Te=d({"src/lib/utils/simple-git-options.ts"(){me={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function ye(e,r=[]){return ce(e)?Object.keys(e).reduce((r,t)=>{const o=e[t];if(w(o))r.push(o);else if(ae(o,["boolean"]))r.push(t+"="+o);else if(Array.isArray(o))for(const e of o)ae(e,["string","number"])||r.push(t+"="+e);else r.push(t);return r},r):r}function Ee(e,r=0,t=!1){const o=[];for(let t=0,s=r<0?e.length:r;t<s;t++)"string|number".includes(typeof e[t])&&o.push(String(e[t]));return ye(ke(e),o),t||o.push(...function(e){const r="function"==typeof L(e);return ie(L(e,r?1:0),ee,[])}(e)),o}function ke(e){const r=le(L(e));return ie(L(e,r?1:0),ce)}function _e(e,r=!0){const t=x(L(e));return r||D(t)?t:void 0}var Pe=d({"src/lib/utils/task-options.ts"(){he(),ne(),A()}});function Oe(e,r){return e(r.stdOut,r.stdErr)}function Se(e,r,t,o=!0){return H(t).forEach(t=>{for(let s=$(t,o),n=0,i=s.length;n<i;n++){const t=(e=0)=>{if(!(n+e>=i))return s[n+e]};r.some(({parse:r})=>r(t,e))}}),e}var Ce=d({"src/lib/utils/task-parser.ts"(){ne()}}),Ae={};g(Ae,{ExitCodes:()=>ue,GitOutputStreams:()=>pe,LineParser:()=>de,NOOP:()=>S,NULL:()=>O,RemoteLineParser:()=>ge,append:()=>B,appendTaskOptions:()=>ye,asArray:()=>H,asCamelCase:()=>W,asFunction:()=>x,asNumber:()=>K,asStringArray:()=>V,bufferToString:()=>Y,callTaskParser:()=>Oe,createInstanceConfig:()=>we,delay:()=>X,filterArray:()=>ee,filterFunction:()=>le,filterHasLength:()=>se,filterPlainObject:()=>ce,filterPrimitives:()=>ae,filterString:()=>re,filterStringArray:()=>te,filterStringOrStringArray:()=>oe,filterType:()=>ie,first:()=>I,folderExists:()=>q,forEachLineWithContent:()=>M,getTrailingOptions:()=>Ee,including:()=>N,isUserFunction:()=>D,last:()=>L,objectToString:()=>C,orVoid:()=>Z,parseStringResponse:()=>Se,pick:()=>Q,prefixedArray:()=>J,remove:()=>z,splitOn:()=>U,toLinesWithContent:()=>$,trailingFunctionArgument:()=>_e,trailingOptionsArgument:()=>ke});var Ge,Fe,Re,xe=d({"src/lib/utils/index.ts"(){he(),fe(),be(),ve(),Te(),Pe(),Ce(),ne()}}),De={};function Ue(e){switch(e){case"bare":return Le();case"root":return Ie()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:Fe,parser:Re}}function Ie(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:Fe,parser:e=>/^\.(git)?$/.test(e.trim())}}function Le(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:Fe,parser:Re}}g(De,{CheckRepoActions:()=>Ge,checkIsBareRepoTask:()=>Le,checkIsRepoRootTask:()=>Ie,checkIsRepoTask:()=>Ue});var je,$e,Me,qe,Be,Ne=d({"src/lib/tasks/check-is-repo.ts"(){xe(),Ge=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Ge||{}),Fe=({exitCode:e},r,t,o)=>{if(128===e&&function(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}(r))return t(Buffer.from("false"));o(r)},Re=e=>"true"===e.trim()}}),ze=d({"src/lib/responses/CleanSummary.ts"(){xe(),je=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},$e=/^[a-z]+\s*/i,Me=/^[a-z]+\s+[a-z]+\s*/i,qe=/\/$/}}),He={};function We(e){return{commands:Be,format:"empty",parser:e}}function Ve(e){return{commands:Be,format:"empty",parser(){throw"string"==typeof e?new k(e):e}}}function Ke(e,r=!1){return{commands:e,format:"utf-8",parser:e=>r?String(e).trim():e}}function Je(e){return{commands:e,format:"buffer",parser:e=>e}}function Ye(e){return"buffer"===e.format}function Qe(e){return"empty"===e.format||!e.commands.length}g(He,{EMPTY_COMMANDS:()=>Be,adhocExecTask:()=>We,configurationErrorTask:()=>Ve,isBufferTask:()=>Ye,isEmptyTask:()=>Qe,straightThroughBufferTask:()=>Je,straightThroughStringTask:()=>Ke});var Xe,Ze,er,rr,tr,or=d({"src/lib/tasks/task.ts"(){R(),Be=[]}}),sr={};function nr(e,r){const{cleanMode:t,options:o,valid:s}=function(e){let r,t=[],o={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(e=>{var s;!function(e){return"f"===e||"n"===e}(e)?o.options=o.options&&(s=t[t.length]=`-${e}`,/^-[a-z]$/i.test(s)&&tr.has(s.charAt(1))):(r=e,o.cleanMode=!0)}),{cleanMode:r,options:t,valid:o}}(e);return t?s.options?(o.push(...r),o.some(cr)?Ve(Xe):ir(t,o)):Ve(er+JSON.stringify(e)):Ve(Ze)}function ir(e,r){return{commands:["clean",`-${e}`,...r],format:"utf-8",parser:r=>function(e,r){const t=new je(e),o=e?Me:$e;return $(r).forEach(e=>{const r=e.replace(o,"");t.paths.push(r),(qe.test(r)?t.folders:t.files).push(r)}),t}("n"===e,r)}}function ar(e){return Array.isArray(e)&&e.every(e=>tr.has(e))}function cr(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:"--interactive"===e}g(sr,{CONFIG_ERROR_INTERACTIVE_MODE:()=>Xe,CONFIG_ERROR_MODE_REQUIRED:()=>Ze,CONFIG_ERROR_UNKNOWN_OPTION:()=>er,CleanOptions:()=>rr,cleanTask:()=>ir,cleanWithOptionsTask:()=>nr,isCleanOptionsArray:()=>ar});var lr,ur=d({"src/lib/tasks/clean.ts"(){ze(),xe(),or(),Xe="Git clean interactive mode is not supported",Ze='Git clean mode parameter ("n" or "f") is required',er="Git clean unknown option found in: ",rr=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(rr||{}),tr=new Set(["i",...V(Object.values(rr))])}});function pr(e){return e.replace(/^(file):/,"")}function*dr(e,r=null){const t=e.split("\0");for(let e=0,o=t.length-1;e<o;){const o=pr(t[e++]);let s=t[e++],n=r;if(s.includes("\n")){const e=U(s,"\n");n=e[0],s=e[1]}yield{file:o,key:n,value:s}}}var gr,mr=d({"src/lib/responses/ConfigList.ts"(){xe(),lr=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,r)=>Object.assign(e,this.values[r]),{})),this._all}addFile(e){if(!(e in this.values)){const r=L(this.files);this.values[e]=r?Object.create(this.values[r]):{},this.files.push(e)}return this.values[e]}addValue(e,r,t){const o=this.addFile(e);o.hasOwnProperty(r)?Array.isArray(o[r])?o[r].push(t):o[r]=[o[r],t]:o[r]=t,this._all=void 0}}}});function hr(e,r){return"string"==typeof e&&gr.hasOwnProperty(e)?e:r}var fr,br,vr,wr,Tr,yr,Er=d({"src/lib/tasks/config.ts"(){mr(),xe(),gr=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(gr||{})}}),kr=d({"src/lib/tasks/diff-name-status.ts"(){fr=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(fr||{}),br=new Set(Object.values(fr))}});function _r(...e){return(new yr).param(...e)}var Pr,Or,Sr=d({"src/lib/tasks/grep.ts"(){xe(),or(),vr=["-h"],wr=Symbol("grepQuery"),yr=class{constructor(){this[Tr]=[]}*[(Tr=wr,Symbol.iterator)](){for(const e of this[wr])yield e}and(...e){return e.length&&this[wr].push("--and","(",...J(e,"-e"),")"),this}param(...e){return this[wr].push(...J(e,"-e")),this}}}}),Cr={};function Ar(e,r){const t=["reset"];return Fr(e)&&t.push(`--${e}`),t.push(...r),Ke(t)}function Gr(e){if(Fr(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Fr(e){return Or.includes(e)}g(Cr,{ResetMode:()=>Pr,getResetMode:()=>Gr,resetTask:()=>Ar});var Rr=d({"src/lib/tasks/reset.ts"(){or(),Pr=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(Pr||{}),Or=Array.from(Object.values(Pr))}}),xr={};g(xr,{CheckRepoActions:()=>Ge,CleanOptions:()=>rr,DiffNameStatus:()=>fr,GitConfigScope:()=>gr,GitConstructError:()=>y,GitError:()=>o,GitPluginError:()=>E,GitResponseError:()=>s,ResetMode:()=>Pr,TaskConfigurationError:()=>k,grepQueryBuilder:()=>_r,pathspec:()=>v});var Dr=d({"src/lib/api.ts"(){A(),G(),f(),F(),b(),R(),Ne(),ur(),Er(),kr(),Sr(),Rr()}}),Ur=d({"src/lib/plugins/abort-plugin.ts"(){F()}});var Ir,Lr,jr=d({"src/lib/plugins/block-unsafe-operations-plugin.ts"(){F()}}),$r=d({"src/lib/plugins/command-config-prefixing-plugin.ts"(){xe()}});var Mr,qr,Br=d({"src/lib/plugins/completion-detection.plugin.ts"(){Ir=t(100),xe(),Lr=(0,Ir.deferred)().promise}});function Nr(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function zr(e,r){if(e.length<1||e.length>2)throw new E(void 0,"binary",Mr);if(e.some(Nr)){if(!r)throw new E(void 0,"binary",qr);console.warn(qr)}const[t,o]=e;return{binary:t,prefix:o}}var Hr=d({"src/lib/plugins/custom-binary.plugin.ts"(){F(),xe(),Mr="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",qr="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option"}});function Wr(e){return!(!e.exitCode||!e.stdErr.length)}function Vr(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function Kr(e=!1,r=Wr,t=Vr){return(o,s)=>!e&&o||!r(s)?o:t(s)}function Jr(e){return{type:"task.error",action(r,t){const s=e(r.error,{stdErr:t.stdErr,stdOut:t.stdOut,exitCode:t.exitCode});return Buffer.isBuffer(s)?{error:new o(void 0,s.toString("utf-8"))}:{error:s}}}}var Yr,Qr,Xr,Zr=d({"src/lib/plugins/error-detection.plugin.ts"(){f()}}),et=d({"src/lib/plugins/plugin-store.ts"(){Yr=t(474),xe(),Qr=class{constructor(){this.plugins=new Set,this.events=new Yr.EventEmitter}on(e,r){this.events.on(e,r)}reconfigure(e,r){this.events.emit(e,r)}append(e,r){const t=B(this.plugins,{type:e,action:r});return()=>this.plugins.delete(t)}add(e){const r=[];return H(e).forEach(e=>e&&this.plugins.add(B(r,e))),()=>{r.forEach(e=>this.plugins.delete(e))}}exec(e,r,t){let o=r;const s=Object.freeze(Object.create(t));for(const r of this.plugins)r.type===e&&(o=r.action(o,s));return o}}}}),rt=d({"src/lib/plugins/progress-monitor-plugin.ts"(){xe()}}),tt=d({"src/lib/plugins/simple-git-plugin.ts"(){}}),ot=d({"src/lib/plugins/spawn-options-plugin.ts"(){xe()}}),st=d({"src/lib/plugins/timout-plugin.ts"(){F()}}),nt=d({"src/lib/plugins/index.ts"(){Ur(),jr(),$r(),Br(),Hr(),Zr(),et(),rt(),tt(),ot(),st()}}),it=d({"src/lib/plugins/suffix-paths.plugin.ts"(){A()}});function at(e,r,t){return r&&String(r).replace(/\s*/,"")?(o,...s)=>{e(`%s ${o}`,r,...s),t&&t(o,...s)}:t?(r,...o)=>{e(r,...o),t(r,...o)}:e}function ct(e,r,t,o=function(){return(0,Xr.default)("simple-git")}()){const s=e&&`[${e}]`||"",n=[],i="string"==typeof r?o.extend(r):r,a=function(e,r,{namespace:t}){if("string"==typeof e)return e;const o=r&&r.namespace||"";return o.startsWith(t)?o.substr(t.length+1):o||t}(ie(r,re),i,o);return function r(t){const n=t&&`[${t}]`||"",a=i&&at(i,n)||S,l=at(o,`${s} ${n}`,a);return Object.assign(i?a:l,{label:e,sibling:c,info:l,step:r})}(t);function c(r,t){return B(n,ct(e,a.replace(/^[^:]+/,r),t,o))}}var lt,ut,pt,dt=d({"src/lib/git-logger.ts"(){var e,r;r=null!=(e=t(753))?i(u(e)):{},Xr=m(e&&e.__esModule?r:a(r,"default",{value:e,enumerable:!0}),e),xe(),Xr.default.formatters.L=e=>String(se(e)?e.length:"-"),Xr.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):C(e)}}),gt=d({"src/lib/runners/tasks-pending-queue.ts"(){f(),dt(),lt=class e{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(r){const t=e.getName(r.commands[0]);return{task:r,logger:ct(this.logLabel,t),name:t}}push(e){const r=this.createProgress(e);return r.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,r),r}fatal(e){for(const[r,{logger:t}]of Array.from(this._queue.entries()))r===e.task?(t.info("Failed %o",e),t("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):t.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(r);if(0!==this._queue.size)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){const r=this.withProgress(e);if(!r)throw new o(void 0,"TasksPendingQueue: attempt called for an unknown task");return r.logger("Starting task"),r}static getName(r="empty"){return`task:${r}:${++e.counter}`}static{this.counter=0}}}});function mt(e,r){return{method:I(e.commands)||"",commands:r}}function ht(e,r,t,o){return s=>{t("%s received %L bytes",r,s),o("%B",s),e.push(s)}}var ft,bt=d({"src/lib/runners/git-executor-chain.ts"(){ut=t(317),f(),or(),xe(),gt(),pt=class{constructor(e,r,t){this._executor=e,this._scheduler=r,this._plugins=t,this._chain=Promise.resolve(),this._queue=new lt}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}async attemptTask(e){const r=await this._scheduler.next(),t=()=>this._queue.complete(e);try{const{logger:r}=this._queue.attempt(e);return await(Qe(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r))}catch(r){throw this.onFatalException(e,r)}finally{t(),r()}}onFatalException(e,r){const t=r instanceof o?Object.assign(r,{task:e}):new o(e,r&&String(r));return this._chain=Promise.resolve(),this._queue.fatal(t),t}async attemptRemoteTask(e,r){const t=this._plugins.exec("spawn.binary","",mt(e,e.commands)),o=this._plugins.exec("spawn.args",[...e.commands],mt(e,e.commands)),s=await this.gitResponse(e,t,o,this.outputHandler,r.step("SPAWN")),n=await this.handleTaskData(e,o,s,r.step("HANDLE"));return r("passing response to task's parser as a %s",e.format),Ye(e)?Oe(e.parser,n):Oe(e.parser,n.asStrings())}async attemptEmptyTask(e,r){return r("empty task bypassing child process to call to task's parser"),e.parser(this)}handleTaskData(e,r,t,o){const{exitCode:s,rejection:n,stdOut:i,stdErr:a}=t;return new Promise((c,l)=>{o("Preparing to handle process response exitCode=%d stdOut=",s);const{error:u}=this._plugins.exec("task.error",{error:n},{...mt(e,r),...t});return u&&e.onError?(o.info("exitCode=%s handling with custom error handler"),e.onError(t,u,e=>{o.info("custom error handler treated as success"),o("custom error returned a %s",C(e)),c(new pe(Array.isArray(e)?Buffer.concat(e):e,Buffer.concat(a)))},l)):u?(o.info("handling as error: exitCode=%s stdErr=%s rejection=%o",s,a.length,n),l(u)):(o.info("retrieving task output complete"),void c(new pe(Buffer.concat(i),Buffer.concat(a))))})}async gitResponse(e,r,t,o,s){const n=s.sibling("output"),i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},mt(e,e.commands));return new Promise(a=>{const c=[],l=[];s.info("%s %o",r,t),s("%O",i);let u=this._beforeSpawn(e,t);if(u)return a({stdOut:c,stdErr:l,exitCode:9901,rejection:u});this._plugins.exec("spawn.before",void 0,{...mt(e,t),kill(e){u=e||u}});const p=(0,ut.spawn)(r,t,i);p.stdout.on("data",ht(c,"stdOut",s,n.step("stdOut"))),p.stderr.on("data",ht(l,"stdErr",s,n.step("stdErr"))),p.on("error",function(e,r){return t=>{r("[ERROR] child process exception %o",t),e.push(Buffer.from(String(t.stack),"ascii"))}}(l,s)),o&&(s("Passing child process stdOut/stdErr to custom outputHandler"),o(r,p.stdout,p.stderr,[...t])),this._plugins.exec("spawn.after",void 0,{...mt(e,t),spawned:p,close(e,r){a({stdOut:c,stdErr:l,exitCode:e,rejection:u||r})},kill(e){p.killed||(u=e,p.kill("SIGINT"))}})})}_beforeSpawn(e,r){let t;return this._plugins.exec("spawn.before",void 0,{...mt(e,r),kill(e){t=e||t}}),t}}}}),vt={};g(vt,{GitExecutor:()=>ft});var wt=d({"src/lib/runners/git-executor.ts"(){bt(),ft=class{constructor(e,r,t){this.cwd=e,this._scheduler=r,this._plugins=t,this._chain=new pt(this,this._scheduler,this._plugins)}chain(){return new pt(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});var Tt=d({"src/lib/task-callback.ts"(){b(),xe()}});function yt(e,r){return We(t=>{if(!q(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(r||t).cwd=e})}var Et=d({"src/lib/tasks/change-working-directory.ts"(){xe(),or()}});function kt(e){const r=["checkout",...e];return"-b"===r[1]&&r.includes("-B")&&(r[1]=z(r,"-B")),Ke(r)}var _t,Pt,Ot=d({"src/lib/tasks/checkout.ts"(){xe(),or()}}),St=d({"src/lib/tasks/count-objects.ts"(){xe(),_t=new de(/([a-z-]+): (\d+)$/,(e,[r,t])=>{const o=W(r);e.hasOwnProperty(o)&&(e[o]=K(t))})}});function Ct(e){return Se({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},Pt,e)}var At=d({"src/lib/parsers/parse-commit.ts"(){xe(),Pt=[new de(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[r,t,o])=>{e.branch=r,e.commit=o,e.root=!!t}),new de(/\s*Author:\s(.+)/i,(e,[r])=>{const t=r.split("<"),o=t.pop();o&&o.includes("@")&&(e.author={email:o.substr(0,o.length-1),name:t.join("<").trim()})}),new de(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[r,t,o])=>{e.summary.changes=parseInt(r,10)||0,e.summary.insertions=parseInt(t,10)||0,e.summary.deletions=parseInt(o,10)||0}),new de(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[r,t,o])=>{e.summary.changes=parseInt(r,10)||0;const s=parseInt(t,10)||0;"-"===o?e.summary.deletions=s:"+"===o&&(e.summary.insertions=s)})]}});var Gt,Ft,Rt,xt,Dt=d({"src/lib/tasks/commit.ts"(){At(),xe(),or()}}),Ut=d({"src/lib/tasks/first-commit.ts"(){xe(),or()}}),It=d({"src/lib/tasks/hash-object.ts"(){or()}}),Lt=d({"src/lib/responses/InitSummary.ts"(){Gt=class{constructor(e,r,t,o){this.bare=e,this.path=r,this.existing=t,this.gitDir=o}},Ft=/^Init.+ repository in (.+)$/,Rt=/^Rein.+ in (.+)$/}});var jt,$t=d({"src/lib/tasks/init.ts"(){Lt(),xt="--bare"}});function Mt(e){for(let r=0;r<e.length;r++){const t=jt.exec(e[r]);if(t)return`--${t[1]}`}return""}function qt(e){return jt.test(e)}var Bt,Nt,zt,Ht,Wt,Vt,Kt=d({"src/lib/args/log-format.ts"(){jt=/^--(stat|numstat|name-only|name-status)(=|$)/}}),Jt=d({"src/lib/responses/DiffSummary.ts"(){Bt=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function Yt(e=""){const r=Vt[e];return e=>Se(new Bt,r,e,!1)}var Qt,Xt,Zt,eo,ro=d({"src/lib/parsers/parse-diff-summary.ts"(){Kt(),Jt(),kr(),xe(),Nt=[new de(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[r,t,o=""])=>{e.files.push({file:r.trim(),changes:K(t),insertions:o.replace(/[^+]/g,"").length,deletions:o.replace(/[^-]/g,"").length,binary:!1})}),new de(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[r,t,o])=>{e.files.push({file:r.trim(),before:K(t),after:K(o),binary:!0})}),new de(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[r,t])=>{const o=/(\d+) i/.exec(t),s=/(\d+) d/.exec(t);e.changed=K(r),e.insertions=K(o?.[1]),e.deletions=K(s?.[1])})],zt=[new de(/(\d+)\t(\d+)\t(.+)$/,(e,[r,t,o])=>{const s=K(r),n=K(t);e.changed++,e.insertions+=s,e.deletions+=n,e.files.push({file:o,changes:s+n,insertions:s,deletions:n,binary:!1})}),new de(/-\t-\t(.+)$/,(e,[r])=>{e.changed++,e.files.push({file:r,after:0,before:0,binary:!0})})],Ht=[new de(/(.+)$/,(e,[r])=>{e.changed++,e.files.push({file:r,changes:0,insertions:0,deletions:0,binary:!1})})],Wt=[new de(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[r,t,o,s,n])=>{var i;e.changed++,e.files.push({file:n??o,changes:0,insertions:0,deletions:0,binary:!1,status:Z((i=r,br.has(i)&&r)),from:Z(!!n&&o!==n&&o),similarity:K(t)})})],Vt={"":Nt,"--stat":Nt,"--numstat":zt,"--name-status":Wt,"--name-only":Ht}}});function to(e=Zt,r=eo,t=""){const o=Yt(t);return function(t){const s=$(t.trim(),!1,Qt).map(function(t){const s=t.split(Xt),n=function(e,r){return r.reduce((r,t,o)=>(r[t]=e[o]||"",r),Object.create({diff:null}))}(s[0].split(e),r);return s.length>1&&s[1].trim()&&(n.diff=o(s[1])),n});return{all:s,latest:s.length&&s[0]||null,total:s.length}}}var oo=d({"src/lib/parsers/parse-list-log-summary.ts"(){xe(),ro(),Kt(),Qt="òòòòòò ",Xt=" òò",Zt=" ò ",eo=["hash","date","message","refs","author_name","author_email"]}}),so={};function no(e){let r=Mt(e);const t=["diff"];return""===r&&(r="--stat",t.push("--stat=4096")),t.push(...e),io(t)||{commands:t,format:"utf-8",parser:Yt(r)}}function io(e){const r=e.filter(qt);return r.length>1?Ve(`Summary flags are mutually exclusive - pick one of ${r.join(",")}`):r.length&&e.includes("-z")?Ve(`Summary flag ${r} parsing is not compatible with null termination option '-z'`):void 0}g(so,{diffSummaryTask:()=>no,validateLogFormatConfig:()=>io});var ao,co=d({"src/lib/tasks/diff.ts"(){Kt(),ro(),or()}});function lo(e={},r=[]){const t=ie(e.splitter,re,Zt),o=ce(e.format)?e.format:{hash:"%H",date:!1===e.strictDate?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:!1!==e.mailMap?"%aN":"%an",author_email:!1!==e.mailMap?"%aE":"%ae"},[s,n]=function(e,r){const t=[],o=[];return Object.keys(e).forEach(r=>{t.push(r),o.push(String(e[r]))}),[t,o.join(r)]}(o,t),i=[],a=[`--pretty=format:${Qt}${n}${Xt}`,...r],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){const r=!1!==e.symmetric?"...":"..";i.push(`${e.from||""}${r}${e.to||""}`)}var l;return re(e.file)&&a.push("--follow",v(e.file)),ye((l=e,Object.keys(l).reduce((e,r)=>(r in ao||(e[r]=l[r]),e),{})),a),{fields:s,splitter:t,commands:[...a,...i]}}var uo,po,go,mo,ho,fo=d({"src/lib/tasks/log.ts"(){Kt(),A(),oo(),xe(),or(),co(),ao=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(ao||{})}}),bo=d({"src/lib/responses/MergeSummary.ts"(){uo=class{constructor(e,r=null,t){this.reason=e,this.file=r,this.meta=t}toString(){return`${this.file}:${this.reason}`}},po=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),vo=d({"src/lib/responses/PullSummary.ts"(){go=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},mo=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function wo(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function To(e){const r=/^\s*(\d+)/.exec(e),t=/delta (\d+)/i.exec(e);return{count:K(r&&r[1]||"0"),delta:K(t&&t[1]||"0")}}var yo,Eo,ko=d({"src/lib/parsers/parse-remote-objects.ts"(){xe(),ho=[new ge(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[r,t])=>{const o=r.toLowerCase(),s=wo(e.remoteMessages);Object.assign(s,{[o]:K(t)})}),new ge(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[r,t])=>{const o=r.toLowerCase(),s=wo(e.remoteMessages);Object.assign(s,{[o]:K(t)})}),new ge(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[r,t,o])=>{const s=wo(e.remoteMessages);s.total=To(r),s.reused=To(t),s.packReused=K(o)})]}});function _o(e,r){return Se({remoteMessages:new Eo},yo,r)}var Po,Oo,So,Co,Ao,Go,Fo,Ro,xo,Do=d({"src/lib/parsers/parse-remote-messages.ts"(){xe(),ko(),yo=[new ge(/^remote:\s*(.+)$/,(e,[r])=>(e.remoteMessages.all.push(r.trim()),!1)),...ho,new ge([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[r])=>{e.remoteMessages.pullRequestUrl=r}),new ge([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[r,t,o])=>{e.remoteMessages.vulnerabilities={count:K(r),summary:t,url:o}})],Eo=class{constructor(){this.all=[]}}}}),Uo=d({"src/lib/parsers/parse-pull.ts"(){vo(),xe(),Do(),Po=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Oo=/^(create|delete) mode \d+ (.+)/,So=[new de(/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,(e,[r,t,o])=>{e.files.push(r),t&&(e.insertions[r]=t.length),o&&(e.deletions[r]=o.length)}),new de(Po,(e,[r,,t,,o])=>(void 0!==t||void 0!==o)&&(e.summary.changes=+r||0,e.summary.insertions=+t||0,e.summary.deletions=+o||0,!0)),new de(Oo,(e,[r,t])=>{B(e.files,t),B("create"===r?e.created:e.deleted,t)})],Co=[new de(/^from\s(.+)$/i,(e,[r])=>{e.remote=r}),new de(/^fatal:\s(.+)$/,(e,[r])=>{e.message=r}),new de(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[r,t,o,s])=>{e.branch.local=o,e.hash.local=r,e.branch.remote=s,e.hash.remote=t})],Ao=(e,r)=>Se(new go,So,[e,r]),Go=(e,r)=>Object.assign(new go,Ao(e,r),_o(0,r))}}),Io=d({"src/lib/parsers/parse-merge.ts"(){bo(),xe(),Uo(),Fo=[new de(/^Auto-merging\s+(.+)$/,(e,[r])=>{e.merges.push(r)}),new de(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[r,t])=>{e.conflicts.push(new uo(r,t))}),new de(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[r,t,o])=>{e.conflicts.push(new uo(r,t,{deleteRef:o}))}),new de(/^CONFLICT\s+\((.+)\):/,(e,[r])=>{e.conflicts.push(new uo(r,null))}),new de(/^Automatic merge failed;\s+(.+)$/,(e,[r])=>{e.result=r})],Ro=(e,r)=>Object.assign(xo(e,r),Go(e,r)),xo=e=>Se(new po,Fo,e)}});function Lo(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(e,r){const t=Ro(e,r);if(t.failed)throw new s(t);return t}}:Ve("Git.merge requires at least one option")}var jo,$o,Mo,qo=d({"src/lib/tasks/merge.ts"(){b(),Io(),or()}}),Bo=d({"src/lib/parsers/parse-push.ts"(){xe(),Do(),jo=[new de(/^Pushing to (.+)$/,(e,[r])=>{e.repo=r}),new de(/^updating local tracking ref '(.+)'/,(e,[r])=>{e.ref={...e.ref||{},local:r}}),new de(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[r,t,o])=>{e.pushed.push(function(e,r,t){const o=t.includes("deleted"),s=t.includes("tag")||/^refs\/tags/.test(e),n=!t.includes("new");return{deleted:o,tag:s,branch:!s,new:!n,alreadyUpdated:n,local:e,remote:r}}(r,t,o))}),new de(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[r,t,o])=>{e.branch={...e.branch||{},local:r,remote:t,remoteName:o}}),new de(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[r,t,o,s])=>{e.update={head:{local:r,remote:t},hash:{from:o,to:s}}})],$o=(e,r)=>({...Mo(e,r),..._o(0,r)}),Mo=(e,r)=>Se({pushed:[]},jo,[e,r])}}),No={};function zo(e={},r){return B(r,"--tags"),Ho(e,r)}function Ho(e={},r){const t=["push",...r];return e.branch&&t.splice(1,0,e.branch),e.remote&&t.splice(1,0,e.remote),z(t,"-v"),B(t,"--verbose"),B(t,"--porcelain"),{commands:t,format:"utf-8",parser:$o}}g(No,{pushTagsTask:()=>zo,pushTask:()=>Ho});var Wo,Vo,Ko,Jo,Yo,Qo=d({"src/lib/tasks/push.ts"(){Bo(),xe()}}),Xo=d({"src/lib/tasks/show.ts"(){xe(),or()}}),Zo=d({"src/lib/responses/FileStatusSummary.ts"(){Wo=/^(.+)\0(.+)$/,Vo=class{constructor(e,r,t){if(this.path=e,this.index=r,this.working_dir=t,"R"===r||"R"===t){const r=Wo.exec(e)||[null,e,e];this.from=r[2]||"",this.path=r[1]||""}}}}});function es(e){const[r,t]=e.split(O);return{from:t||r,to:r}}function rs(e,r,t){return[`${e}${r}`,t]}function ts(e,...r){return r.map(r=>rs(e,r,(e,r)=>B(e.conflicted,r)))}function os(e,r){const t=r.trim();switch(" "){case t.charAt(2):return o(t.charAt(0),t.charAt(1),t.substr(3));case t.charAt(1):return o(" ",t.charAt(0),t.substr(2));default:return}function o(r,t,o){const s=`${r}${t}`,n=Jo.get(s);n&&n(e,o),"##"!==s&&"!!"!==s&&e.files.push(new Vo(o,r,t))}}var ss,ns,is,as=d({"src/lib/responses/StatusSummary.ts"(){xe(),Zo(),Ko=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Jo=new Map([rs(" ","A",(e,r)=>B(e.created,r)),rs(" ","D",(e,r)=>B(e.deleted,r)),rs(" ","M",(e,r)=>B(e.modified,r)),rs("A"," ",(e,r)=>B(e.created,r)&&B(e.staged,r)),rs("A","M",(e,r)=>B(e.created,r)&&B(e.staged,r)&&B(e.modified,r)),rs("D"," ",(e,r)=>B(e.deleted,r)&&B(e.staged,r)),rs("M"," ",(e,r)=>B(e.modified,r)&&B(e.staged,r)),rs("M","M",(e,r)=>B(e.modified,r)&&B(e.staged,r)),rs("R"," ",(e,r)=>{B(e.renamed,es(r))}),rs("R","M",(e,r)=>{const t=es(r);B(e.renamed,t),B(e.modified,t.to)}),rs("!","!",(e,r)=>{B(e.ignored=e.ignored||[],r)}),rs("?","?",(e,r)=>B(e.not_added,r)),...ts("A","A","U"),...ts("D","D","U"),...ts("U","A","D","U"),["##",(e,r)=>{let t;t=/ahead (\d+)/.exec(r),e.ahead=t&&+t[1]||0,t=/behind (\d+)/.exec(r),e.behind=t&&+t[1]||0,t=/^(.+?(?=(?:\.{3}|\s|$)))/.exec(r),e.current=t&&t[1],t=/\.{3}(\S*)/.exec(r),e.tracking=t&&t[1],t=/\son\s([\S]+)$/.exec(r),e.current=t&&t[1]||e.current,e.detached=/\(no branch\)/.test(r)}]]),Yo=function(e){const r=e.split(O),t=new Ko;for(let e=0,o=r.length;e<o;){let o=r[e++].trim();o&&("R"===o.charAt(0)&&(o+=O+(r[e++]||"")),os(t,o))}return t}}}),cs=d({"src/lib/tasks/status.ts"(){as(),ss=["--null","-z"]}});function ls(e=0,r=0,t=0,o="",s=!0){return Object.defineProperty({major:e,minor:r,patch:t,agent:o,installed:s},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function us(e){return e===ns?ls(0,0,0,"",!1):Se(ls(0,0,0,e),is,e)}var ps,ds=d({"src/lib/tasks/version.ts"(){xe(),ns="installed=false",is=[new de(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[r,t,o,s=""])=>{Object.assign(e,ls(K(r),K(t),K(o),s))}),new de(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[r,t,o,s=""])=>{Object.assign(e,ls(K(r),K(t),o,s))})]}}),gs={};g(gs,{SimpleGitApi:()=>ps});var ms,hs,fs,bs=d({"src/lib/simple-git-api.ts"(){Tt(),Et(),Ot(),St(),Dt(),Er(),Ut(),Sr(),It(),$t(),fo(),qo(),Qo(),Xo(),cs(),or(),ds(),xe(),ps=class{constructor(e){this._executor=e}_runTask(e,r){const t=this._executor.chain(),o=t.push(e);return r&&function(e,r,t=S){r.then(e=>{t(null,e)},r=>{r?.task===e&&t(r instanceof s?function(e){let r=e=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${e} should be GitResponseError.git.${e}, this will no longer be available in version 3`),r=S};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(function(t,o){return o in e||(t[o]={enumerable:!1,configurable:!1,get:()=>(r(o),e.git[o])}),t},{}))}(r):r,void 0)})}(e,o,r),Object.create(this,{then:{value:o.then.bind(o)},catch:{value:o.catch.bind(o)},_executor:{value:t}})}add(e){return this._runTask(Ke(["add",...H(e)]),_e(arguments))}cwd(e){const r=_e(arguments);return"string"==typeof e?this._runTask(yt(e,this._executor),r):"string"==typeof e?.path?this._runTask(yt(e.path,e.root&&this._executor||void 0),r):this._runTask(Ve("Git.cwd: workingDirectory must be supplied as a string"),r)}hashObject(e,r){return this._runTask(function(e,r){const t=["hash-object",e];return r&&t.push("-w"),Ke(t,!0)}(e,!0===r),_e(arguments))}init(e){return this._runTask(function(e=!1,r,t){const o=["init",...t];return e&&!o.includes(xt)&&o.splice(1,0,xt),{commands:o,format:"utf-8",parser:e=>function(e,r,t){const o=String(t).trim();let s;if(s=Ft.exec(o))return new Gt(e,r,!1,s[1]);if(s=Rt.exec(o))return new Gt(e,r,!0,s[1]);let n="";const i=o.split(" ");for(;i.length;)if("in"===i.shift()){n=i.join(" ");break}return new Gt(e,r,/^re/i.test(o),n)}(o.includes("--bare"),r,e)}}(!0===e,this._executor.cwd,Ee(arguments)),_e(arguments))}merge(){return this._runTask(Lo(Ee(arguments)),_e(arguments))}mergeFromTo(e,r){return re(e)&&re(r)?this._runTask(Lo([e,r,...Ee(arguments)]),_e(arguments,!1)):this._runTask(Ve("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){const e=Ho({remote:ie(arguments[0],re),branch:ie(arguments[1],re)},Ee(arguments));return this._runTask(e,_e(arguments))}stash(){return this._runTask(Ke(["stash",...Ee(arguments)]),_e(arguments))}status(){return this._runTask({format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...Ee(arguments).filter(e=>!ss.includes(e))],parser:e=>Yo(e)},_e(arguments))}},Object.assign(ps.prototype,{checkout(){return this._runTask(kt(Ee(arguments,1)),_e(arguments))},checkoutBranch(e,r){return this._runTask(kt(["-b",e,r,...Ee(arguments)]),_e(arguments))},checkoutLocalBranch(e){return this._runTask(kt(["-b",e,...Ee(arguments)]),_e(arguments))}},{commit(e,...r){const t=_e(arguments),o=function(e){return!oe(e)&&Ve("git.commit: requires the commit message to be supplied as a string/string[]")}(e)||function(e,r,t){return{commands:["-c","core.abbrev=40","commit",...J(e,"-m"),...r,...t],format:"utf-8",parser:Ct}}(H(e),H(ie(r[0],oe,[])),[...ie(r[1],ee,[]),...Ee(arguments,0,!0)]);return this._runTask(o,t)}},{addConfig(e,r,...t){return this._runTask(function(e,r,t,o){const s=["config",`--${o}`];return t&&s.push("--add"),s.push(e,r),{commands:s,format:"utf-8",parser:e=>e}}(e,r,!0===t[0],hr(t[1],"local")),_e(arguments))},getConfig(e,r){return this._runTask(function(e,r){const t=["config","--null","--show-origin","--get-all",e];return r&&t.splice(1,0,`--${r}`),{commands:t,format:"utf-8",parser:r=>function(e,r){let t=null;const o=[],s=new Map;for(const n of dr(e,r))n.key===r&&(o.push(t=n.value),s.has(n.file)||s.set(n.file,[]),s.get(n.file).push(t));return{key:r,paths:Array.from(s.keys()),scopes:s,value:t,values:o}}(r,e)}}(e,hr(r,void 0)),_e(arguments))},listConfig(...e){return this._runTask(function(e){const r=["config","--list","--show-origin","--null"];return e&&r.push(`--${e}`),{commands:r,format:"utf-8",parser:e=>function(e){const r=new lr;for(const t of dr(e))r.addValue(t.file,String(t.key),t.value);return r}(e)}}(hr(e[0],void 0)),_e(arguments))}},{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser:e=>Se({count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0},[_t],e)})}},{firstCommit(){return this._runTask(Ke(["rev-list","--max-parents=0","HEAD"],!0),_e(arguments))}},{grep(e){const r=_e(arguments),t=Ee(arguments);for(const e of vr)if(t.includes(e))return this._runTask(Ve(`git.grep: use of "${e}" is not supported.`),r);"string"==typeof e&&(e=_r().param(e));const o=["grep","--null","-n","--full-name",...t,...e];return this._runTask({commands:o,format:"utf-8",parser:e=>function(e){const r=new Set,t={};return M(e,e=>{const[o,s,n]=e.split(O);r.add(o),(t[o]=t[o]||[]).push({line:K(s),path:o,preview:n})}),{paths:r,results:t}}(e)},r)}},{log(...e){const r=_e(arguments),t=lo(ke(arguments),ie(arguments[0],ee)),o=function(e,r){return re(e)&&re(r)&&Ve("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}(...e)||io(t.commands)||function(e){return function(e,r,t){const o=to(e,r,Mt(t));return{commands:["log",...t],format:"utf-8",parser:o}}(e.splitter,e.fields,e.commands)}(t);return this._runTask(o,r)}},{showBuffer(){const e=["show",...Ee(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Je(e),_e(arguments))},show(){const e=["show",...Ee(arguments,1)];return this._runTask(Ke(e),_e(arguments))}},{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:us,onError(e,r,t,o){if(-2===e.exitCode)return t(Buffer.from(ns));o(r)}})}})}}),vs={};g(vs,{Scheduler:()=>fs});var ws=d({"src/lib/runners/scheduler.ts"(){xe(),ms=t(100),dt(),hs=(()=>{let e=0;return()=>{e++;const{promise:r,done:t}=(0,ms.createDeferred)();return{promise:r,done:t,id:e}}})(),fs=class{constructor(e=2){this.concurrency=e,this.logger=ct("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency)return void this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);const e=B(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),z(this.running,e),this.schedule()})}next(){const{promise:e,id:r}=B(this.pending,hs());return this.logger("Scheduling id=%s",r),this.schedule(),e}}}}),Ts={};function ys(e,r){return Ke(["apply",...r,...e])}g(Ts,{applyPatchTask:()=>ys});var Es,ks,_s,Ps,Os=d({"src/lib/tasks/apply-patch.ts"(){or()}}),Ss=d({"src/lib/responses/BranchDeleteSummary.ts"(){Es=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Cs(e,r){return 1===r&&ks.test(e)}var As,Gs,Fs=d({"src/lib/parsers/parse-branch-delete.ts"(){Ss(),xe(),ks=/^error[^']+'([^']+)'/m,_s=[new de(/(\S+)\s+\(\S+\s([^)]+)\)/,(e,[r,t])=>{const o=function(e,r){return{branch:e,hash:r,success:!0}}(r,t);e.all.push(o),e.branches[r]=o}),new de(ks,(e,[r])=>{const t=function(e){return{branch:e,hash:null,success:!1}}(r);e.errors.push(t),e.all.push(t),e.branches[r]=t})],Ps=(e,r)=>Se(new Es,_s,[e,r])}}),Rs=d({"src/lib/responses/BranchSummary.ts"(){As=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,r,t,o,s){"*"===e&&(this.detached=r,this.current=t),this.all.push(t),this.branches[t]={current:"*"===e,linkedWorkTree:"+"===e,name:t,commit:o,label:s}}}}});function xs(e){return e?e.charAt(0):""}function Ds(e){return Se(new As,Gs,e)}var Us=d({"src/lib/parsers/parse-branch.ts"(){Rs(),xe(),Gs=[new de(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[r,t,o,s])=>{e.push(xs(r),!0,t,o,s)}),new de(/^([*+]\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s,(e,[r,t,o,s])=>{e.push(xs(r),!1,t,o,s)})]}}),Is={};function Ls(e){const r=["-d","-D","--delete"];return e.some(e=>r.includes(e))}function js(e){const r=Ls(e),t=["branch",...e];return 1===t.length&&t.push("-a"),t.includes("-v")||t.splice(1,0,"-v"),{format:"utf-8",commands:t,parser:(e,t)=>r?Ps(e,t).all[0]:Ds(e)}}function $s(){return{format:"utf-8",commands:["branch","-v"],parser:Ds}}function Ms(e,r=!1){return{format:"utf-8",commands:["branch","-v",r?"-D":"-d",...e],parser:(e,r)=>Ps(e,r),onError({exitCode:e,stdOut:r},t,o,s){if(!Cs(String(t),e))return s(t);o(r)}}}function qs(e,r=!1){const t={format:"utf-8",commands:["branch","-v",r?"-D":"-d",e],parser:(r,t)=>Ps(r,t).branches[e],onError({exitCode:e,stdErr:r,stdOut:o},n,i,a){if(!Cs(String(n),e))return a(n);throw new s(t.parser(Y(o),Y(r)),String(n))}};return t}g(Is,{branchLocalTask:()=>$s,branchTask:()=>js,containsDeleteBranchCommand:()=>Ls,deleteBranchTask:()=>qs,deleteBranchesTask:()=>Ms});var Bs,Ns=d({"src/lib/tasks/branch.ts"(){b(),Fs(),Us(),xe()}}),zs=d({"src/lib/responses/CheckIgnore.ts"(){Bs=e=>e.split(/\n/g).map(e=>e.trim()).filter(e=>!!e)}}),Hs={};function Ws(e){return{commands:["check-ignore",...e],format:"utf-8",parser:Bs}}g(Hs,{checkIgnoreTask:()=>Ws});var Vs=d({"src/lib/tasks/check-ignore.ts"(){zs()}}),Ks={};function Js(e){return/^--upload-pack(=|$)/.test(e)}function Ys(e,r,t){const o=["clone",...t];return re(e)&&o.push(e),re(r)&&o.push(r),o.find(Js)?Ve("git.fetch: potential exploit argument blocked."):Ke(o)}function Qs(e,r,t){return B(t,"--mirror"),Ys(e,r,t)}g(Ks,{cloneMirrorTask:()=>Qs,cloneTask:()=>Ys});var Xs,Zs=d({"src/lib/tasks/clone.ts"(){or(),xe()}});function en(e,r){return Se({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},Xs,[e,r])}var rn=d({"src/lib/parsers/parse-fetch.ts"(){xe(),Xs=[new de(/From (.+)$/,(e,[r])=>{e.remote=r}),new de(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[r,t])=>{e.branches.push({name:r,tracking:t})}),new de(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[r,t])=>{e.tags.push({name:r,tracking:t})}),new de(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[r])=>{e.deleted.push({tracking:r})}),new de(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[r,t,o,s])=>{e.updated.push({name:o,tracking:s,to:t,from:r})})]}}),tn={};function on(e){return/^--upload-pack(=|$)/.test(e)}function sn(e,r,t){const o=["fetch",...t];return e&&r&&o.push(e,r),o.find(on)?Ve("git.fetch: potential exploit argument blocked."):{commands:o,format:"utf-8",parser:en}}g(tn,{fetchTask:()=>sn});var nn,an=d({"src/lib/tasks/fetch.ts"(){rn(),or()}});function cn(e){return Se({moves:[]},nn,e)}var ln=d({"src/lib/parsers/parse-move.ts"(){xe(),nn=[new de(/^Renaming (.+) to (.+)$/,(e,[r,t])=>{e.moves.push({from:r,to:t})})]}}),un={};function pn(e,r){return{commands:["mv","-v",...H(e),r],format:"utf-8",parser:cn}}g(un,{moveTask:()=>pn});var dn=d({"src/lib/tasks/move.ts"(){ln(),xe()}}),gn={};function mn(e,r,t){const o=["pull",...t];return e&&r&&o.splice(1,0,e,r),{commands:o,format:"utf-8",parser:(e,r)=>Go(e,r),onError(e,r,t,o){const n=function(e,r){const t=Se(new mo,Co,[e,r]);return t.message&&t}(Y(e.stdOut),Y(e.stdErr));if(n)return o(new s(n));o(r)}}}g(gn,{pullTask:()=>mn});var hn=d({"src/lib/tasks/pull.ts"(){b(),Uo(),xe()}});function fn(e){const r={};return vn(e,([e])=>r[e]={name:e}),Object.values(r)}function bn(e){const r={};return vn(e,([e,t,o])=>{r.hasOwnProperty(e)||(r[e]={name:e,refs:{fetch:"",push:""}}),o&&t&&(r[e].refs[o.replace(/[^a-z]/g,"")]=t)}),Object.values(r)}function vn(e,r){M(e,e=>r(e.split(/\s+/)))}var wn=d({"src/lib/responses/GetRemoteSummary.ts"(){xe()}}),Tn={};function yn(e,r,t){return Ke(["remote","add",...t,e,r])}function En(e){const r=["remote"];return e&&r.push("-v"),{commands:r,format:"utf-8",parser:e?bn:fn}}function kn(e){const r=[...e];return"ls-remote"!==r[0]&&r.unshift("ls-remote"),Ke(r)}function _n(e){const r=[...e];return"remote"!==r[0]&&r.unshift("remote"),Ke(r)}function Pn(e){return Ke(["remote","remove",e])}g(Tn,{addRemoteTask:()=>yn,getRemotesTask:()=>En,listRemotesTask:()=>kn,remoteTask:()=>_n,removeRemoteTask:()=>Pn});var On=d({"src/lib/tasks/remote.ts"(){wn(),or()}}),Sn={};function Cn(e={},r){const t=lo(e),o=["stash","list",...t.commands,...r],s=to(t.splitter,t.fields,Mt(o));return io(o)||{commands:o,format:"utf-8",parser:s}}g(Sn,{stashListTask:()=>Cn});var An=d({"src/lib/tasks/stash-list.ts"(){Kt(),oo(),co(),fo()}}),Gn={};function Fn(e,r){return xn(["add",e,r])}function Rn(e){return xn(["init",...e])}function xn(e){const r=[...e];return"submodule"!==r[0]&&r.unshift("submodule"),Ke(r)}function Dn(e){return xn(["update",...e])}g(Gn,{addSubModuleTask:()=>Fn,initSubModuleTask:()=>Rn,subModuleTask:()=>xn,updateSubModuleTask:()=>Dn});var Un,In,Ln=d({"src/lib/tasks/sub-module.ts"(){or()}});function jn(e,r){return e===r?0:e>r?1:-1}function $n(e){return e.trim()}function Mn(e){return"string"==typeof e&&parseInt(e.replace(/^\D+/g,""),10)||0}var qn=d({"src/lib/responses/TagList.ts"(){Un=class{constructor(e,r){this.all=e,this.latest=r}},In=function(e,r=!1){const t=e.split("\n").map($n).filter(Boolean);r||t.sort(function(e,r){const t=e.split("."),o=r.split(".");if(1===t.length||1===o.length)return function(e,r){const t=isNaN(e);return t!==isNaN(r)?t?1:-1:t?jn(e,r):0}(Mn(t[0]),Mn(o[0]));for(let e=0,r=Math.max(t.length,o.length);e<r;e++){const r=jn(Mn(t[e]),Mn(o[e]));if(r)return r}return 0});const o=r?t[0]:[...t].reverse().find(e=>e.indexOf(".")>=0);return new Un(t,o)}}}),Bn={};function Nn(e=[]){const r=e.some(e=>/^--sort=/.test(e));return{format:"utf-8",commands:["tag","-l",...e],parser:e=>In(e,r)}}function zn(e){return{format:"utf-8",commands:["tag",e],parser:()=>({name:e})}}function Hn(e,r){return{format:"utf-8",commands:["tag","-a","-m",r,e],parser:()=>({name:e})}}g(Bn,{addAnnotatedTagTask:()=>Hn,addTagTask:()=>zn,tagListTask:()=>Nn});var Wn,Vn,Kn,Jn=d({"src/lib/tasks/tag.ts"(){qn()}}),Yn=(Wn={"src/git.js"(e,r){var{GitExecutor:t}=(wt(),h(vt)),{SimpleGitApi:o}=(bs(),h(gs)),{Scheduler:s}=(ws(),h(vs)),{configurationErrorTask:n}=(or(),h(He)),{asArray:i,filterArray:a,filterPrimitives:c,filterString:l,filterStringOrStringArray:u,filterType:p,getTrailingOptions:d,trailingFunctionArgument:g,trailingOptionsArgument:m}=(xe(),h(Ae)),{applyPatchTask:f}=(Os(),h(Ts)),{branchTask:b,branchLocalTask:v,deleteBranchesTask:w,deleteBranchTask:T}=(Ns(),h(Is)),{checkIgnoreTask:y}=(Vs(),h(Hs)),{checkIsRepoTask:E}=(Ne(),h(De)),{cloneTask:k,cloneMirrorTask:_}=(Zs(),h(Ks)),{cleanWithOptionsTask:P,isCleanOptionsArray:O}=(ur(),h(sr)),{diffSummaryTask:S}=(co(),h(so)),{fetchTask:C}=(an(),h(tn)),{moveTask:A}=(dn(),h(un)),{pullTask:G}=(hn(),h(gn)),{pushTagsTask:F}=(Qo(),h(No)),{addRemoteTask:R,getRemotesTask:x,listRemotesTask:D,remoteTask:U,removeRemoteTask:I}=(On(),h(Tn)),{getResetMode:L,resetTask:j}=(Rr(),h(Cr)),{stashListTask:$}=(An(),h(Sn)),{addSubModuleTask:M,initSubModuleTask:q,subModuleTask:B,updateSubModuleTask:N}=(Ln(),h(Gn)),{addAnnotatedTagTask:z,addTagTask:H,tagListTask:W}=(Jn(),h(Bn)),{straightThroughBufferTask:V,straightThroughStringTask:K}=(or(),h(He));function J(e,r){this._plugins=r,this._executor=new t(e.baseDir,new s(e.maxConcurrentProcesses),r),this._trimmed=e.trimmed}function Y(e,r,t,o){return"string"!=typeof t?n(`git.${e}() requires a string 'repoPath'`):r(t,p(o,l),d(arguments))}(J.prototype=Object.create(o.prototype)).constructor=J,J.prototype.customBinary=function(e){return this._plugins.reconfigure("binary",e),this},J.prototype.env=function(e,r){return 1===arguments.length&&"object"==typeof e?this._executor.env=e:(this._executor.env=this._executor.env||{})[e]=r,this},J.prototype.stashList=function(e){return this._runTask($(m(arguments)||{},a(e)&&e||[]),g(arguments))},J.prototype.clone=function(){return this._runTask(Y("clone",k,...arguments),g(arguments))},J.prototype.mirror=function(){return this._runTask(Y("mirror",_,...arguments),g(arguments))},J.prototype.mv=function(e,r){return this._runTask(A(e,r),g(arguments))},J.prototype.checkoutLatestTag=function(e){var r=this;return this.pull(function(){r.tags(function(t,o){r.checkout(o.latest,e)})})},J.prototype.pull=function(e,r,t,o){return this._runTask(G(p(e,l),p(r,l),d(arguments)),g(arguments))},J.prototype.fetch=function(e,r){return this._runTask(C(p(e,l),p(r,l),d(arguments)),g(arguments))},J.prototype.silent=function(e){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},J.prototype.tags=function(e,r){return this._runTask(W(d(arguments)),g(arguments))},J.prototype.rebase=function(){return this._runTask(K(["rebase",...d(arguments)]),g(arguments))},J.prototype.reset=function(e){return this._runTask(j(L(e),d(arguments)),g(arguments))},J.prototype.revert=function(e){const r=g(arguments);return"string"!=typeof e?this._runTask(n("Commit must be a string"),r):this._runTask(K(["revert",...d(arguments,0,!0),e]),r)},J.prototype.addTag=function(e){const r="string"==typeof e?H(e):n("Git.addTag requires a tag name");return this._runTask(r,g(arguments))},J.prototype.addAnnotatedTag=function(e,r){return this._runTask(z(e,r),g(arguments))},J.prototype.deleteLocalBranch=function(e,r,t){return this._runTask(T(e,"boolean"==typeof r&&r),g(arguments))},J.prototype.deleteLocalBranches=function(e,r,t){return this._runTask(w(e,"boolean"==typeof r&&r),g(arguments))},J.prototype.branch=function(e,r){return this._runTask(b(d(arguments)),g(arguments))},J.prototype.branchLocal=function(e){return this._runTask(v(),g(arguments))},J.prototype.raw=function(e){const r=!Array.isArray(e),t=[].slice.call(r?arguments:e,0);for(let e=0;e<t.length&&r;e++)if(!c(t[e])){t.splice(e,t.length-e);break}t.push(...d(arguments,0,!0));var o=g(arguments);return t.length?this._runTask(K(t,this._trimmed),o):this._runTask(n("Raw: must supply one or more command to execute"),o)},J.prototype.submoduleAdd=function(e,r,t){return this._runTask(M(e,r),g(arguments))},J.prototype.submoduleUpdate=function(e,r){return this._runTask(N(d(arguments,!0)),g(arguments))},J.prototype.submoduleInit=function(e,r){return this._runTask(q(d(arguments,!0)),g(arguments))},J.prototype.subModule=function(e,r){return this._runTask(B(d(arguments)),g(arguments))},J.prototype.listRemote=function(){return this._runTask(D(d(arguments)),g(arguments))},J.prototype.addRemote=function(e,r,t){return this._runTask(R(e,r,d(arguments)),g(arguments))},J.prototype.removeRemote=function(e,r){return this._runTask(I(e),g(arguments))},J.prototype.getRemotes=function(e,r){return this._runTask(x(!0===e),g(arguments))},J.prototype.remote=function(e,r){return this._runTask(U(d(arguments)),g(arguments))},J.prototype.tag=function(e,r){const t=d(arguments);return"tag"!==t[0]&&t.unshift("tag"),this._runTask(K(t),g(arguments))},J.prototype.updateServerInfo=function(e){return this._runTask(K(["update-server-info"]),g(arguments))},J.prototype.pushTags=function(e,r){const t=F({remote:p(e,l)},d(arguments));return this._runTask(t,g(arguments))},J.prototype.rm=function(e){return this._runTask(K(["rm","-f",...i(e)]),g(arguments))},J.prototype.rmKeepLocal=function(e){return this._runTask(K(["rm","--cached",...i(e)]),g(arguments))},J.prototype.catFile=function(e,r){return this._catFile("utf-8",arguments)},J.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},J.prototype._catFile=function(e,r){var t=g(r),o=["cat-file"],s=r[0];if("string"==typeof s)return this._runTask(n("Git.catFile: options must be supplied as an array of strings"),t);Array.isArray(s)&&o.push.apply(o,s);const i="buffer"===e?V(o):K(o);return this._runTask(i,t)},J.prototype.diff=function(e,r){const t=l(e)?n("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):K(["diff",...d(arguments)]);return this._runTask(t,g(arguments))},J.prototype.diffSummary=function(){return this._runTask(S(d(arguments,1)),g(arguments))},J.prototype.applyPatch=function(e){const r=u(e)?f(i(e),d([].slice.call(arguments,1))):n("git.applyPatch requires one or more string patches as the first argument");return this._runTask(r,g(arguments))},J.prototype.revparse=function(){const e=["rev-parse",...d(arguments,!0)];return this._runTask(K(e,!0),g(arguments))},J.prototype.clean=function(e,r,t){const o=O(e),s=o&&e.join("")||p(e,l)||"",n=d([].slice.call(arguments,o?1:0));return this._runTask(P(s,n),g(arguments))},J.prototype.exec=function(e){const r={commands:[],format:"utf-8",parser(){"function"==typeof e&&e()}};return this._runTask(r)},J.prototype.clearQueue=function(){return this},J.prototype.checkIgnore=function(e,r){return this._runTask(y(i(p(e,u,[]))),g(arguments))},J.prototype.checkIsRepo=function(e,r){return this._runTask(E(p(e,l)),g(arguments))},r.exports=J}},function(){return Vn||(0,Wn[l(Wn)[0]])((Vn={exports:{}}).exports,Vn),Vn.exports}),Qn={};function Xn(e){return Object.defineProperties(e,{__esModule:{value:!0},default:{value:e}})}function Zn(e){return Object.assign(e.bind(null),xr)}function ei(e,r){const t=new Qr,o=we(e&&("string"==typeof e?{baseDir:e}:e)||{},r);if(!q(o.baseDir))throw new y(o,"Cannot use simple-git on a directory that does not exist");return Array.isArray(o.config)&&t.add(function(e){const r=J(e,"-c");return{type:"spawn.args",action:e=>[...r,...e]}}(o.config)),t.add(function({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:r=!1}={}){return{type:"spawn.args",action:(t,o)=>(t.forEach((s,n)=>{const i=n<t.length?t[n+1]:"";e||function(e,r){if(function(e){return"string"==typeof e&&"-c"===e.trim().toLowerCase()}(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(r))throw new E(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}(s,i),r||function(e,r){if(/^\s*--(upload|receive)-pack/.test(e))throw new E(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if("clone"===r&&/^\s*-u\b/.test(e))throw new E(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if("push"===r&&/^\s*--exec\b/.test(e))throw new E(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}(s,o.method)}),t)}}(o.unsafe)),t.add({type:"spawn.args",action(e){const r=[];let t;function o(e){(t=t||[]).push(...e)}for(let t=0;t<e.length;t++){const s=e[t];if(w(s))o(T(s));else{if("--"===s){o(e.slice(t+1).flatMap(e=>w(e)&&T(e)||e));break}r.push(s)}}return t?[...r,"--",...t.map(String)]:r}}),t.add(function({onClose:e=!0,onExit:r=50}={}){function t(e,r,t){!1!==e&&(!0===e?r.promise:r.promise.then(()=>X(e))).then(t.done)}return{type:"spawn.after",async action(o,{spawned:s,close:n}){const i=function(){let o=-1;const s={close:(0,Ir.deferred)(),closeTimeout:(0,Ir.deferred)(),exit:(0,Ir.deferred)(),exitTimeout:(0,Ir.deferred)()},n=Promise.race([!1===e?Lr:s.closeTimeout.promise,!1===r?Lr:s.exitTimeout.promise]);return t(e,s.close,s.closeTimeout),t(r,s.exit,s.exitTimeout),{close(e){o=e,s.close.done()},exit(e){o=e,s.exit.done()},get exitCode(){return o},result:n}}();let a=!0,c=()=>{a=!1};s.stdout?.on("data",c),s.stderr?.on("data",c),s.on("error",c),s.on("close",e=>i.close(e)),s.on("exit",e=>i.exit(e));try{await i.result,a&&await X(50),n(i.exitCode)}catch(e){n(i.exitCode,e)}}}}(o.completion)),o.abort&&t.add(function(e){if(!e)return;const r={type:"spawn.after",action(r,t){function o(){t.kill(new E(void 0,"abort","Abort signal received"))}e.addEventListener("abort",o),t.spawned.on("close",()=>e.removeEventListener("abort",o))}};return[{type:"spawn.before",action(r,t){e.aborted&&t.kill(new E(void 0,"abort","Abort already signaled"))}},r]}(o.abort)),o.progress&&t.add(function(e){const r="--progress",t=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action:(e,o)=>t.includes(o.method)?N(e,r):e},{type:"spawn.after",action(t,o){o.commands.includes(r)&&o.spawned.stderr?.on("data",r=>{const t=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(r.toString("utf8"));var s;t&&e({method:o.method,stage:(s=t[1],String(s.toLowerCase().split(" ",1))||"unknown"),progress:K(t[2]),processed:K(t[3]),total:K(t[4])})})}}]}(o.progress)),o.timeout&&t.add(function({block:e,stdErr:r=!0,stdOut:t=!0}){if(e>0)return{type:"spawn.after",action(o,s){let n;function i(){n&&clearTimeout(n),n=setTimeout(c,e)}function a(){s.spawned.stdout?.off("data",i),s.spawned.stderr?.off("data",i),s.spawned.off("exit",a),s.spawned.off("close",a),n&&clearTimeout(n)}function c(){a(),s.kill(new E(void 0,"timeout","block timeout reached"))}t&&s.spawned.stdout?.on("data",i),r&&s.spawned.stderr?.on("data",i),s.spawned.on("exit",a),s.spawned.on("close",a),i()}}}(o.timeout)),o.spawnOptions&&t.add(function(e){const r=Q(e,["uid","gid"]);return{type:"spawn.options",action:e=>({...r,...e})}}(o.spawnOptions)),t.add(Jr(Kr(!0))),o.errors&&t.add(Jr(o.errors)),function(e,r=["git"],t=!1){let o=zr(H(r),t);e.on("binary",e=>{o=zr(H(e),t)}),e.append("spawn.binary",()=>o.binary),e.append("spawn.args",e=>o.prefix?[o.prefix,...e]:e)}(t,o.binary,o.unsafe?.allowUnsafeCustomBinary),new Kn(o,t)}g(Qn,{esModuleFactory:()=>Xn,gitExportFactory:()=>Zn,gitInstanceFactory:()=>ei});var ri,ti,oi=d({"src/lib/git-factory.ts"(){Dr(),nt(),it(),xe(),Kn=Yn()}}),si={};function ni(...e){let r,t=Promise.resolve();try{r=ei(...e)}catch(e){t=Promise.reject(e)}function o(){return i}function n(){return t}const i=[...ri,...ti].reduce((e,i)=>{const a=ti.includes(i),c=a?(l=i,u=r,function(...e){if("function"==typeof e[e.length])throw new TypeError("Promise interface requires that handlers are not supplied inline, trailing function not allowed in call to "+l);return t.then(function(){return new Promise(function(r,t){e.push((e,o)=>{if(e)return t((n=e)instanceof Error?n:"string"==typeof n?new Error(n):new s(n));var n;r(o)}),u[l].apply(u,e)})})}):function(e,r,t){return(...o)=>(r[e](...o),t)}(i,r,e);var l,u;const p=a?n:o;return Object.defineProperty(e,i,{enumerable:!1,configurable:!1,value:r?c:p}),e},{});return i}g(si,{gitP:()=>ni});var ii=d({"src/lib/runners/promise-wrapped.ts"(){b(),oi(),ri=["customBinary","env","outputHandler","silent"],ti=["add","addAnnotatedTag","addConfig","addRemote","addTag","applyPatch","binaryCatFile","branch","branchLocal","catFile","checkIgnore","checkIsRepo","checkout","checkoutBranch","checkoutLatestTag","checkoutLocalBranch","clean","clone","commit","cwd","deleteLocalBranch","deleteLocalBranches","diff","diffSummary","exec","fetch","getRemotes","init","listConfig","listRemote","log","merge","mergeFromTo","mirror","mv","pull","push","pushTags","raw","rebase","remote","removeRemote","reset","revert","revparse","rm","rmKeepLocal","show","stash","stashList","status","subModule","submoduleAdd","submoduleInit","submoduleUpdate","tag","tags","updateServerInfo"]}}),{gitP:ai}=(ii(),h(si)),{esModuleFactory:ci,gitInstanceFactory:li,gitExportFactory:ui}=(oi(),h(Qn)),pi=ci(ui(li));e.exports=Object.assign(pi,{gitP:ai,simpleGit:pi})},736:(e,r,t)=>{e.exports=function(e){function r(e){let t,s,n,i=null;function a(...e){if(!a.enabled)return;const o=a,s=Number(new Date),n=s-(t||s);o.diff=n,o.prev=t,o.curr=s,t=s,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(t,s)=>{if("%%"===t)return"%";i++;const n=r.formatters[s];if("function"==typeof n){const r=e[i];t=n.call(o,r),e.splice(i,1),i--}return t}),r.formatArgs.call(o,e),(o.log||r.log).apply(o,e)}return a.namespace=e,a.useColors=r.useColors(),a.color=r.selectColor(e),a.extend=o,a.destroy=r.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(s!==r.namespaces&&(s=r.namespaces,n=r.enabled(e)),n),set:e=>{i=e}}),"function"==typeof r.init&&r.init(a),a}function o(e,t){const o=r(this.namespace+(void 0===t?":":t)+e);return o.log=this.log,o}function s(e,r){let t=0,o=0,s=-1,n=0;for(;t<e.length;)if(o<r.length&&(r[o]===e[t]||"*"===r[o]))"*"===r[o]?(s=o,n=t,o++):(t++,o++);else{if(-1===s)return!1;o=s+1,n++,t=n}for(;o<r.length&&"*"===r[o];)o++;return o===r.length}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names,...r.skips.map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){r.save(e),r.namespaces=e,r.names=[],r.skips=[];const t=("string"==typeof e?e:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const e of t)"-"===e[0]?r.skips.push(e.slice(1)):r.names.push(e)},r.enabled=function(e){for(const t of r.skips)if(s(e,t))return!1;for(const t of r.names)if(s(e,t))return!0;return!1},r.humanize=t(585),r.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(t=>{r[t]=e[t]}),r.names=[],r.skips=[],r.formatters={},r.selectColor=function(e){let t=0;for(let r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return r.colors[Math.abs(t)%r.colors.length]},r.enable(r.load()),r}},753:(e,r,t)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=t(833):e.exports=t(33)},811:(e,r,t)=>{var o=t(346),s=t(640),n=t(447),i=Function.bind,a=i.bind(i);function c(e,r,t){var o=a(n,null).apply(null,t?[r,t]:[r]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(function(o){var n=t?[r,o,t]:[r,o];e[o]=e.api[o]=a(s,null).apply(null,n)})}function l(){var e={registry:{}},r=o.bind(null,e);return c(r,e),r}var u=!1;function p(){return u||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),u=!0),l()}p.Singular=function(){var e={registry:{}},r=o.bind(null,e,"h");return c(r,e,"h"),r}.bind(),p.Collection=l.bind(),e.exports=p,e.exports.Hook=p,e.exports.Singular=p.Singular,e.exports.Collection=p.Collection},833:(e,r,t)=>{r.formatArgs=function(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const t="color: "+this.color;r.splice(1,0,t,"color: inherit");let o=0,s=0;r[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(o++,"%c"===e&&(s=o))}),r.splice(s,0,t)},r.save=function(e){try{e?r.storage.setItem("debug",e):r.storage.removeItem("debug")}catch(e){}},r.load=function(){let e;try{e=r.storage.getItem("debug")||r.storage.getItem("DEBUG")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},r.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},r.storage=function(){try{return localStorage}catch(e){}}(),r.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],r.log=console.debug||console.log||(()=>{}),e.exports=t(736)(r);const{formatters:o}=e.exports;o.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},896:e=>{"use strict";e.exports=require("fs")},926:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(e){for(var t in e)r.hasOwnProperty(t)||(r[t]=e[t])}(t(423))}},r={};function t(o){var s=r[o];if(void 0!==s)return s.exports;var n=r[o]={exports:{}};return e[o].call(n.exports,n,n.exports,t),n.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o=t(265);module.exports=o})();
//# sourceMappingURL=extension.js.map