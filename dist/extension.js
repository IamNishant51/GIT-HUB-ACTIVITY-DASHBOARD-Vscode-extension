(()=>{var e={18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},33:(e,t,r)=>{const n=r(18),o=r(23);t.init=function(e){e.inspectOpts={};const r=Object.keys(t.inspectOpts);for(let n=0;n<r.length;n++)e.inspectOpts[r[n]]=t.inspectOpts[r[n]]},t.log=function(...e){return process.stderr.write(o.formatWithOptions(t.inspectOpts,...e)+"\n")},t.formatArgs=function(r){const{namespace:n,useColors:o}=this;if(o){const t=this.color,o="[3"+(t<8?t:"8;5;"+t),s=`  ${o};1m${n} [0m`;r[0]=s+r[0].split("\n").join("\n"+s),r.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else r[0]=(t.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+n+" "+r[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):n.isatty(process.stderr.fd)},t.destroy=o.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),t.colors=[6,2,3,4,5,1];try{const e=r(Object(function(){var e=new Error("Cannot find module 'supports-color'");throw e.code="MODULE_NOT_FOUND",e}()));e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const r=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let n=process.env[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[r]=n,e},{}),e.exports=r(736)(t);const{formatters:s}=e.exports;s.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).split("\n").map(e=>e.trim()).join(" ")},s.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},100:(e,t)=>{"use strict";function r(){let e,t,r="pending";return{promise:new Promise((r,n)=>{e=r,t=n}),done(t){"pending"===r&&(r="resolved",e(t))},fail(e){"pending"===r&&(r="rejected",t(e))},get fulfilled(){return"pending"!==r},get status(){return r}}}Object.defineProperty(t,"__esModule",{value:!0}),t.createDeferred=t.deferred=void 0,t.deferred=r,t.createDeferred=r,t.default=r},265:function(e,t,r){"use strict";var n,o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=n(e),i=0;i<r.length;i++)"default"!==r[i]&&o(t,e,r[i]);return s(t,e),t}),a=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,s){function i(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(i,a)}c((n=n.apply(e,t||[])).next())})},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){m=e;const t=new h;l.window.registerTreeDataProvider("github-activity-dashboard",t);const r=new v;l.window.registerTreeDataProvider("github-repositories",r);const n=new w;l.window.registerTreeDataProvider("github-history",n);const o=new y;l.window.registerTreeDataProvider("github-stars",o);const s=new b;l.window.registerTreeDataProvider("github-notifications",s);const i=new f;l.window.registerTreeDataProvider("github-profile",i),l.window.registerTreeDataProvider("github-activity-dashboard",t),l.window.registerTreeDataProvider("github-repositories",r),l.window.registerTreeDataProvider("github-history",n),l.window.registerTreeDataProvider("github-stars",o),l.window.registerTreeDataProvider("github-notifications",s),l.window.registerTreeDataProvider("github-profile",i);const c=new T;l.window.registerTreeDataProvider("github-profile-repos",c);const E=l.window.createTreeView("github-profile-repos",{treeDataProvider:c,showCollapseAll:!0});e.subscriptions.push(E),console.log("Profile Repositories tree view created:",E?"YES":"NO"),setTimeout(()=>{l.commands.executeCommand("workbench.view.extension.github-dashboard-container"),l.commands.executeCommand("github-activity-dashboard.refresh"),E.reveal(null,{select:!1,focus:!1}),l.commands.executeCommand("github-activity-dashboard.openProfile")},1e3),l.commands.registerCommand("github-activity-dashboard.refresh",()=>a(this,void 0,void 0,function*(){t.refresh(),r.refresh(),n.refresh(),o.refresh(),s.refresh(),i.refresh(),yield c.refresh()})),l.commands.registerCommand("github-activity-dashboard.refreshProfile",e=>a(this,void 0,void 0,function*(){if(console.log("RefreshProfile command called with data:",e),console.log("ActiveProfilePanel status:",!!g,"Visible:",null==g?void 0:g.visible),g)try{console.log("Refreshing profile panel...");const t=yield l.authentication.getSession("github",["repo","delete_repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken}),n=yield r.repos.listForAuthenticatedUser({sort:"updated",per_page:100});console.log("Sending repoCreated message to webview with",n.data.length,"repositories"),console.log("Panel webview exists:",!!g.webview),yield g.webview.postMessage({command:"repoCreated",repositories:n.data,message:(null==e?void 0:e.repoName)?`Repository "${e.repoName}" created successfully!`:"Repositories updated"}),console.log("Message sent successfully")}catch(e){console.error("Error refreshing profile:",e)}else console.log("No active profile panel to refresh")})),l.commands.registerCommand("github-activity-dashboard.createRepo",()=>a(this,void 0,void 0,function*(){const t=l.window.createWebviewPanel("createRepo","Create a New Repository",l.ViewColumn.One,{enableScripts:!0,localResourceRoots:[l.Uri.joinPath(e.extensionUri,"resources")]}),n=_();t.webview.html=(0,u.getCreateRepoWebviewContent)(t.webview,n,e.extensionUri),t.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){if("createRepository"===e.command){const n=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});if(!n)return l.window.showErrorMessage("You must be signed in to GitHub to create a repository."),void t.webview.postMessage({command:"creationFailed"});const o=new p.Octokit({auth:n.accessToken});try{yield o.repos.createForAuthenticatedUser({name:e.repoName,description:e.description,private:e.isPrivate,auto_init:e.initReadme}),l.window.showInformationMessage(`Successfully created repository "${e.repoName}"`),r.refresh(),c.refresh(),console.log("Repository created, trying to refresh profile. ActiveProfilePanel exists:",!!g,"Visible:",null==g?void 0:g.visible),l.commands.executeCommand("github-activity-dashboard.refreshProfile",{type:"repoCreated",repoName:e.repoName}),t.dispose()}catch(e){l.window.showErrorMessage(`Failed to create repository: ${e.message}`),t.webview.postMessage({command:"creationFailed"})}}}),void 0,e.subscriptions)})),l.commands.registerCommand("github-activity-dashboard.openProfile",()=>a(this,void 0,void 0,function*(){var t,n,s,i;try{if(g){console.log("Profile panel already exists, revealing it");try{return void g.reveal(l.ViewColumn.One)}catch(e){console.log("Panel was disposed, clearing reference"),g=void 0}}console.log("Creating new profile panel...");const d=yield l.authentication.getSession("github",["repo","delete_repo"],{createIfNone:!0}),u=new p.Octokit({auth:d.accessToken}),m=(yield u.users.getAuthenticated()).data;yield c.refresh();const h=c.repositories;let f=[];try{f=(yield u.orgs.listForAuthenticatedUser()).data}catch(e){console.log("Could not fetch organizations:",e)}let b=[];try{const e=`\n                    query {\n                        user(login: "${m.login}") {\n                            pinnedItems(first: 6, types: REPOSITORY) {\n                                nodes {\n                                    ... on Repository {\n                                        name\n                                        description\n                                        url\n                                        stargazers {\n                                            totalCount\n                                    // keep panel open for seamless navigation\n                                        forks {\n                                            totalCount\n                                        }\n                                        primaryLanguage {\n                                            name\n                                            color\n                                        }\n                                        isPrivate\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;b=(yield u.graphql(e)).user.pinnedItems.nodes}catch(e){console.log("Could not fetch pinned repos:",e)}let v=[];try{v=(yield u.activity.listEventsForAuthenticatedUser({username:m.login,per_page:20})).data}catch(e){console.log("Could not fetch recent events:",e)}let w=[];try{w=(yield u.search.issuesAndPullRequests({q:`author:${m.login} is:pr`,sort:"updated",order:"desc",per_page:10})).data.items}catch(e){console.log("Could not fetch recent pull requests:",e)}let y=[];try{y=(yield u.search.issuesAndPullRequests({q:`author:${m.login} is:issue`,sort:"updated",order:"desc",per_page:10})).data.items}catch(e){console.log("Could not fetch recent issues:",e)}let T=[];try{T=(yield u.gists.listForUser({username:m.login,per_page:10})).data}catch(e){console.log("Could not fetch user gists:",e)}let E=[];try{E=(yield u.users.listFollowersForUser({username:m.login,per_page:20})).data}catch(e){console.log("Could not fetch followers:",e)}let k=[];try{k=(yield u.users.listFollowingForUser({username:m.login,per_page:20})).data}catch(e){console.log("Could not fetch following:",e)}let x=null;try{const e=`\n                    query {\n                        user(login: "${m.login}") {\n                            sponsorsListing {\n                                name\n                                description\n                                tiers(first: 3) {\n                                    nodes {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                            sponsorshipsAsMaintainer(first: 5) {\n                                nodes {\n                                    sponsor {\n                                        login\n                                        avatarUrl\n                                        name\n                                    }\n                                    tier {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                            sponsorshipsAsSponsor(first: 5) {\n                                nodes {\n                                    sponsorable {\n                                        login\n                                        avatarUrl\n                                        name\n                                    }\n                                    tier {\n                                        name\n                                        monthlyPriceInCents\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;x=(yield u.graphql(e)).user}catch(e){console.log("Could not fetch sponsors data:",e)}const P={};h.forEach(e=>{e.language&&(P[e.language]=(P[e.language]||0)+1)});const O=Object.entries(P).sort(([,e],[,t])=>t-e).slice(0,8);let A={};try{const e="\n                    query($login: String!) {\n                        user(login: $login) {\n                            issues(last: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                                nodes {\n                                    updatedAt\n                                    comments {\n                                        totalCount\n                                    }\n                                }\n                            }\n                            pullRequests(last: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {\n                                nodes {\n                                    updatedAt\n                                    comments {\n                                        totalCount\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ",r=yield u.graphql(e,{login:m.login});console.log("Comment response:",r);const o=(null===(n=null===(t=r.user)||void 0===t?void 0:t.issues)||void 0===n?void 0:n.nodes)||[],a=(null===(i=null===(s=r.user)||void 0===s?void 0:s.pullRequests)||void 0===i?void 0:i.nodes)||[];console.log("Issues found:",o.length),console.log("PRs found:",a.length),[...o,...a].forEach(e=>{if(e&&e.comments&&e.comments.totalCount>0){const t=new Date(e.updatedAt).toISOString().split("T")[0];A[t]=(A[t]||0)+e.comments.totalCount,console.log("Added comment activity for date:",t,"count:",e.comments.totalCount)}}),console.log("Final comment activity:",A);const c=new Date,l=0===Object.keys(A).length;l&&console.log("No real comment activity found, adding guaranteed sample data");for(let e=0;e<30;e++){const t=new Date(c);t.setDate(c.getDate()-e);const r=t.toISOString().split("T")[0];let n=0;e%7==0?n=4:e%3==0?n=2:e%2==0&&(n=1),A[r]||(A[r]=n)}l&&console.log("Added sample data for testing. Final comment activity:",A)}catch(e){console.log("Could not fetch comment activity:",e);const t=new Date;console.log("Adding fallback sample data due to error");for(let e=0;e<30;e++){const r=new Date(t);r.setDate(t.getDate()-e);const n=r.toISOString().split("T")[0],o=Math.floor(5*Math.random());o>0&&(A[n]=o)}}const R=l.window.createWebviewPanel("githubProfile",`GitHub Profile - ${m.login}`,l.ViewColumn.One,{enableScripts:!0});g=R,console.log("Profile panel created and set as active"),R.onDidDispose(()=>{console.log("Profile panel disposed"),g=void 0});let F=[];try{F=(yield u.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data}catch(e){console.log("Could not fetch starred repos:",e)}R.webview.html=function(e,t,r=[],n=[],o=[],s=[],i=[],a=[],c=[],l=[],p=null,d={}){const u=_(),g=JSON.stringify(r),m=JSON.stringify(a),h=JSON.stringify(o);return function(e){let t='<div class="heatmap-grid">';const r=new Date;Array.from({length:365},(e,t)=>{const n=new Date(r);return n.setDate(r.getDate()-t),n}).reverse().forEach(r=>{const n=r.toISOString().split("T")[0],o=e[n]||0;let s=0;o>0&&o<=2?s=1:o>2&&o<=5?s=2:o>5&&o<=10?s=3:o>10&&(s=4),t+=`<div class="heatmap-day level-${s}" title="${o} contributions on ${n}"></div>`}),t+="</div>"}(d),`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${e.cspSource} https: data:; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${u}';">\n            <title>GitHub Profile</title>\n            <style>\n                /* GitHub Exact Colors */\n                :root {\n                    --color-canvas-default: #0d1117;\n                    --color-canvas-subtle: #161b22;\n                    --color-canvas-inset: #010409;\n                    --color-border-default: #30363d;\n                    --color-border-muted: #21262d;\n                    --color-neutral-muted: rgba(110,118,129,0.4);\n                    --color-accent-fg: #2f81f7;\n                    --color-accent-emphasis: #1158c7;\n                    --color-accent-subtle: rgba(56,139,253,0.1);\n                    --color-success-fg: #3fb950;\n                    --color-attention-fg: #d29922;\n                    --color-danger-fg: #da3633;\n                    --color-fg-default: #e6edf3;\n                    --color-fg-muted: #7d8590;\n                    --color-fg-subtle: #656d76;\n                    --color-fg-on-emphasis: #ffffff;\n                }\n\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n\n                body {\n                    font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";\n                    font-size: 14px;\n                    line-height: 1.5;\n                    color: var(--color-fg-default);\n                    background-color: var(--color-canvas-default);\n                    margin: 0;\n                    padding: 0;\n                }\n\n                .AppHeader {\n                    background-color: var(--color-canvas-subtle);\n                    border-bottom: 1px solid var(--color-border-default);\n                    padding: 16px 32px;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                }\n\n                .AppHeader-globalBar {\n                    display: flex;\n                    align-items: center;\n                    gap: 16px;\n                }\n\n                .github-logo {\n                    fill: var(--color-fg-default);\n                    width: 32px;\n                    height: 32px;\n                }\n\n                .HeaderMenu-link {\n                    color: var(--color-fg-default);\n                    text-decoration: none;\n                    font-weight: 600;\n                    padding: 8px 16px;\n                    border-radius: 6px;\n                    transition: background-color 0.2s;\n                }\n\n                .HeaderMenu-link:hover {\n                    background-color: var(--color-neutral-muted);\n                }\n\n                .profile-container {\n                    max-width: 1280px;\n                    margin: 0 auto;\n                    padding: 24px;\n                    display: grid;\n                    grid-template-columns: 320px 1fr;\n                    gap: 24px;\n                }\n\n                /* Left Sidebar */\n                .profile-sidebar {\n                    position: sticky;\n                    top: 24px;\n                    align-self: start;\n                }\n\n                .avatar-wrapper {\n                    position: relative;\n                    margin-bottom: 16px;\n                }\n\n                .avatar {\n                    width: 296px;\n                    height: 296px;\n                    border-radius: 50%;\n                    border: 1px solid var(--color-border-default);\n                }\n\n                .profile-info {\n                    margin-bottom: 16px;\n                }\n\n                .profile-name {\n                    font-size: 26px;\n                    font-weight: 600;\n                    line-height: 1.25;\n                    color: var(--color-fg-default);\n                    margin-bottom: 0;\n                }\n\n                .profile-login {\n                    font-size: 20px;\n                    font-style: normal;\n                    font-weight: 300;\n                    line-height: 24px;\n                    color: var(--color-fg-muted);\n                    margin-bottom: 16px;\n                }\n\n                .profile-bio {\n                    font-size: 16px;\n                    margin-bottom: 16px;\n                    color: var(--color-fg-default);\n                }\n\n                .btn-primary {\n                    display: inline-block;\n                    padding: 5px 16px;\n                    font-size: 14px;\n                    font-weight: 500;\n                    line-height: 20px;\n                    white-space: nowrap;\n                    vertical-align: middle;\n                    cursor: pointer;\n                    user-select: none;\n                    border: 1px solid;\n                    border-radius: 6px;\n                    appearance: none;\n                    color: var(--color-fg-on-emphasis);\n                    background-color: var(--color-accent-emphasis);\n                    border-color: var(--color-accent-emphasis);\n                    text-decoration: none;\n                    width: 100%;\n                    text-align: center;\n                }\n\n                .btn-primary:hover {\n                    background-color: #1158c7;\n                    border-color: #1158c7;\n                }\n\n                .profile-details {\n                    margin: 16px 0;\n                }\n\n                .profile-detail {\n                    display: flex;\n                    align-items: center;\n                    margin-bottom: 8px;\n                    font-size: 14px;\n                    color: var(--color-fg-default);\n                }\n\n                .profile-detail svg {\n                    width: 16px;\n                    height: 16px;\n                    margin-right: 8px;\n                    fill: var(--color-fg-muted);\n                    flex-shrink: 0;\n                }\n\n                .profile-stats {\n                    margin-top: 20px;\n                    padding-top: 16px;\n                    border-top: 1px solid var(--color-border-default);\n                }\n\n                .profile-stat {\n                    display: block;\n                    padding: 4px 0;\n                    color: var(--color-fg-default);\n                    text-decoration: none;\n                    font-size: 14px;\n                }\n\n                .profile-stat:hover .profile-stat-count {\n                    color: var(--color-accent-fg);\n                }\n\n                .profile-stat-count {\n                    font-weight: 600;\n                    color: var(--color-fg-default);\n                }\n\n                /* Main Content Area */\n                .profile-main {\n                    min-width: 0;\n                }\n\n                .UnderlineNav {\n                    display: flex;\n                    border-bottom: 1px solid var(--color-border-default);\n                    margin-bottom: 24px;\n                    overflow-x: auto;\n                    overflow-y: hidden;\n                }\n\n                .UnderlineNav-item {\n                    padding: 8px 16px;\n                    margin-bottom: -1px;\n                    font-size: 14px;\n                    font-weight: 500;\n                    color: var(--color-fg-default);\n                    text-decoration: none;\n                    border-bottom: 2px solid transparent;\n                    white-space: nowrap;\n                    cursor: pointer;\n                    background: none;\n                    border-left: none;\n                    border-right: none;\n                    border-top: none;\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 8px;\n                }\n\n                .UnderlineNav-item.selected {\n                    font-weight: 600;\n                    color: var(--color-fg-default);\n                    border-bottom-color: var(--color-accent-emphasis);\n                }\n\n                .UnderlineNav-item:hover {\n                    color: var(--color-fg-default);\n                    text-decoration: none;\n                }\n\n                .Counter {\n                    display: inline-block;\n                    padding: 2px 5px;\n                    font-size: 12px;\n                    font-weight: 500;\n                    line-height: 1;\n                    color: var(--color-fg-default);\n                    background-color: var(--color-neutral-muted);\n                    border-radius: 20px;\n                }\n\n                .tab-content {\n                    display: none;\n                }\n\n                .tab-content.active {\n                    display: block;\n                }\n\n                /* Repository Filters */\n                .user-repo-search {\n                    position: relative;\n                    margin-bottom: 16px;\n                }\n\n                .repo-filters {\n                    display: flex;\n                    gap: 8px;\n                    margin-bottom: 16px;\n                    flex-wrap: wrap;\n                }\n\n                .form-control {\n                    padding: 5px 12px;\n                    font-size: 14px;\n                    line-height: 20px;\n                    color: var(--color-fg-default);\n                    vertical-align: middle;\n                    background-color: var(--color-canvas-default);\n                    background-repeat: no-repeat;\n                    background-position: right 8px center;\n                    border: 1px solid var(--color-border-default);\n                    border-radius: 6px;\n                    outline: none;\n                    box-shadow: inset 0 1px 0 rgba(208,215,222,0.2);\n                }\n\n                .form-control:focus {\n                    border-color: var(--color-accent-emphasis);\n                    outline: none;\n                    box-shadow: inset 0 1px 0 rgba(208,215,222,0.2), 0 0 0 3px rgba(9,105,218,0.3);\n                }\n\n                .form-select {\n                    padding-right: 20px;\n                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23e6edf3' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");\n                    background-repeat: no-repeat;\n                    background-position: right 8px center;\n                    background-size: 16px 12px;\n                    appearance: none;\n                }\n\n                /* Repository Grid */\n                .repo-list {\n                    list-style: none;\n                    margin: 0;\n                    padding: 0;\n                }\n\n                .repo-list-item {\n                    position: relative;\n                    padding: 24px 0;\n                    border-bottom: 1px solid var(--color-border-muted);\n                }\n\n                .repo-list-item:first-child {\n                    padding-top: 0;\n                }\n\n                .repo-list-item:last-child {\n                    border-bottom: none;\n                }\n\n                .repo {\n                    display: flex;\n                    /* align icon with first line of repo name */\n                    align-items: flex-start;\n                    width: 100%;\n                    text-align: left;\n                }\n\n                .repo-icon {\n                    margin-right: 12px;\n                    /* adjusted top margin for better baseline alignment with repo name */\n                    margin-top: 5px;\n                    fill: var(--color-fg-muted);\n                    flex-shrink: 0;\n                }\n                .starred-repo > .repo-icon { margin-top: 5px; }\n\n                .repo-info {\n                    min-width: 0;\n                    flex: 1;\n                }\n\n                .repo-name {\n                    display: inline-block;\n                    font-weight: 600;\n                    color: var(--color-accent-fg);\n                    font-size: 20px;\n                    text-decoration: none;\n                    margin-bottom: 4px;\n                }\n\n                .repo-name:hover {\n                    text-decoration: underline;\n                }\n\n                .Label {\n                    display: inline-block;\n                    padding: 0 7px;\n                    font-size: 12px;\n                    font-weight: 500;\n                    line-height: 18px;\n                    border-radius: 2em;\n                    border: 1px solid transparent;\n                    margin-left: 8px;\n                }\n\n                .Label--secondary {\n                    color: var(--color-fg-muted);\n                    border-color: var(--color-border-default);\n                }\n\n                .repo-description {\n                    color: var(--color-fg-muted);\n                    font-size: 14px;\n                    margin-bottom: 8px;\n                    display: inline-block;\n                    width: 75%;\n                }\n\n                .repo-meta {\n                    display: flex;\n                    align-items: center;\n                    gap: 16px;\n                    font-size: 12px;\n                    color: var(--color-fg-muted);\n                }\n\n                .repo-language-color {\n                    position: relative;\n                    top: 1px;\n                    display: inline-block;\n                    width: 12px;\n                    height: 12px;\n                    border: 1px solid rgba(27,31,36,0.15);\n                    border-radius: 50%;\n                    margin-right: 4px;\n                }\n\n                .repo-actions {\n                    display: flex;\n                    /* Center buttons vertically so icon + text sit aligned */\n                    align-items: center;\n                    gap: 8px;\n                    margin-left: 16px;\n                }\n\n                .btn {\n                    position: relative;\n                    display: inline-flex; /* allow flex centering of icon + text */\n                    align-items: center;\n                    justify-content: center;\n                    padding: 5px 16px;\n                    font-size: 14px;\n                    font-weight: 500;\n                    line-height: 20px;\n                    white-space: nowrap;\n                    vertical-align: middle;\n                    cursor: pointer;\n                    user-select: none;\n                    border: 1px solid;\n                    border-radius: 6px;\n                    appearance: none;\n                }\n\n                .btn-sm {\n                    padding: 3px 12px;\n                    font-size: 12px;\n                    line-height: 18px;\n                }\n\n                .btn-outline {\n                    color: var(--color-accent-fg);\n                    background-color: transparent;\n                    border-color: var(--color-border-default);\n                }\n\n                .btn-outline:hover {\n                    color: var(--color-fg-on-emphasis);\n                    background-color: var(--color-accent-emphasis);\n                    border-color: var(--color-accent-emphasis);\n                }\n\n                /* Normalize icon alignment inside buttons */\n                .btn svg {\n                    display: inline-block;\n                    vertical-align: middle;\n                    margin-top: -1px; /* optical alignment tweak */\n                }\n\n                .btn-danger {\n                    color: var(--color-danger-fg);\n                    background-color: transparent;\n                    border-color: var(--color-border-default);\n                }\n\n                .btn-danger:hover {\n                    color: var(--color-fg-on-emphasis);\n                    background-color: var(--color-danger-fg);\n                    border-color: var(--color-danger-fg);\n                }\n\n                /* Starred Repositories */\n                .starred-repos {\n                    list-style: none;\n                    margin: 0;\n                    padding: 0;\n                }\n\n                .starred-repo-item {\n                    position: relative;\n                    padding: 16px 0;\n                    border-bottom: 1px solid var(--color-border-muted);\n                }\n\n                .starred-repo-item:last-child {\n                    border-bottom: none;\n                }\n\n                .starred-repo {\n                    display: flex;\n                    align-items: flex-start; /* baseline alignment with name */\n                    width: 100%;\n                }\n\n                .starred-repo-info {\n                    min-width: 0;\n                    flex: 1;\n                }\n\n                .starred-repo-name {\n                    display: inline-block;\n                    font-weight: 600;\n                    color: var(--color-accent-fg);\n                    font-size: 16px;\n                    text-decoration: none;\n                    margin-bottom: 4px;\n                }\n\n                .starred-repo-name:hover {\n                    text-decoration: underline;\n                }\n\n                .starred-repo-description {\n                    color: var(--color-fg-muted);\n                    font-size: 14px;\n                    margin-bottom: 8px;\n                    display: inline-block;\n                }\n\n                .starred-repo-meta {\n                    display: flex;\n                    align-items: center;\n                    gap: 16px;\n                    font-size: 12px;\n                    color: var(--color-fg-muted);\n                }\n\n                .starred-repo-actions {\n                    display: flex;\n                    /* Center buttons vertically so icon + text sit aligned */\n                    align-items: center;\n                    gap: 8px;\n                    margin-left: 16px;\n                }\n\n                /* Activity Tab Styles */\n                .activity-container {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 24px;\n                }\n\n                .contribution-graph {\n                    background-color: var(--color-canvas-default);\n                    border: 1px solid var(--color-border-default);\n                    border-radius: 6px;\n                    padding: 16px;\n                }\n\n                .contrib-column {\n                    display: table-cell;\n                    width: 15px;\n                    border-spacing: 0;\n                    border-collapse: separate;\n                }\n\n                .contrib-day {\n                    display: block;\n                    width: 11px;\n                    height: 11px;\n                    border-radius: 2px;\n                    margin: 0 0 3px;\n                    cursor: pointer;\n                    outline: 1px solid rgba(27,31,36,0.06);\n                    outline-offset: -1px;\n                }\n\n                .contrib-day[data-level="0"] {\n                    background-color: #161b22;\n                }\n\n                .contrib-day[data-level="1"] {\n                    background-color: #0e4429;\n                }\n\n                .contrib-day[data-level="2"] {\n                    background-color: #006d32;\n                }\n\n                .contrib-day[data-level="3"] {\n                    background-color: #26a641;\n                }\n\n                .contrib-day[data-level="4"] {\n                    background-color: #39d353;\n                }\n\n                .activity-stats-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n                    gap: 16px;\n                    margin-bottom: 24px;\n                }\n\n                .activity-stat-card {\n                    background-color: var(--color-canvas-default);\n                    border: 1px solid var(--color-border-default);\n                    border-radius: 6px;\n                    padding: 16px;\n                    text-align: center;\n                }\n\n                .activity-stat-number {\n                    display: block;\n                    font-size: 32px;\n                    font-weight: 600;\n                    color: var(--color-accent-fg);\n                    line-height: 1;\n                    margin-bottom: 4px;\n                }\n\n                .activity-stat-label {\n                    font-size: 12px;\n                    color: var(--color-fg-muted);\n                    text-transform: uppercase;\n                    letter-spacing: 0.075em;\n                    font-weight: 600;\n                }\n\n                /* Responsive Design */\n                @media (max-width: 1012px) {\n                    .profile-container {\n                        grid-template-columns: 1fr;\n                        gap: 24px;\n                    }\n                    \n                    .profile-sidebar {\n                        position: static;\n                        display: grid;\n                        grid-template-columns: auto 1fr;\n                        gap: 16px;\n                        align-items: start;\n                    }\n                    \n                    .avatar {\n                        width: 120px;\n                        height: 120px;\n                    }\n                    \n                    .profile-info {\n                        margin-bottom: 0;\n                    }\n                }\n\n                @media (max-width: 768px) {\n                    .profile-container {\n                        padding: 16px;\n                    }\n                    \n                    .profile-sidebar {\n                        grid-template-columns: 1fr;\n                        text-align: center;\n                    }\n                    \n                    .UnderlineNav {\n                        overflow-x: scroll;\n                        scrollbar-width: none;\n                        -ms-overflow-style: none;\n                    }\n                    \n                    .UnderlineNav::-webkit-scrollbar {\n                        display: none;\n                    }\n                    \n                    .repo-filters {\n                        flex-direction: column;\n                    }\n                    \n                    .form-control {\n                        width: 100%;\n                    }\n                }\n\n                /* Loading and Focus States */\n                .btn:disabled {\n                    cursor: not-allowed;\n                    opacity: 0.6;\n                }\n\n                .btn:focus {\n                    outline: 2px solid var(--color-accent-emphasis);\n                    outline-offset: -2px;\n                }\n\n                .form-control:focus {\n                    outline: none;\n                }\n\n                /* Animations */\n                @keyframes fadeIn {\n                    from { opacity: 0; transform: translateY(10px); }\n                    to { opacity: 1; transform: translateY(0); }\n                }\n\n                @keyframes spin {\n                    from { transform: rotate(0deg); }\n                    to { transform: rotate(360deg); }\n                }\n\n                .repo-list-item {\n                    animation: fadeIn 0.3s ease-out;\n                }\n\n                .starred-repo-item {\n                    animation: fadeIn 0.3s ease-out;\n                }\n\n                /* Heatmap */\n                .heatmap {\n                    background: var(--color-canvas-subtle);\n                    border: 1px solid var(--color-border-default);\n                    border-radius: var(--border-radius-large);\n                    padding: var(--spacing-6);\n                    margin-top: var(--spacing-6);\n                    box-shadow: var(--shadow-large);\n                    position: relative;\n                }\n\n                .heatmap-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: var(--spacing-4);\n                    padding-bottom: var(--spacing-3);\n                    border-bottom: 1px solid var(--color-border-muted);\n                }\n\n                .heatmap-title {\n                    font-size: var(--font-size-xl);\n                    font-weight: 700;\n                    color: var(--color-fg-default);\n                    margin: 0;\n                }\n\n                .heatmap-legend {\n                    display: flex;\n                    gap: var(--spacing-3);\n                    align-items: center;\n                }\n\n                .legend-text {\n                    font-size: var(--font-size-small);\n                    color: var(--color-fg-muted);\n                    font-weight: 500;\n                    text-transform: uppercase;\n                    letter-spacing: 0.5px;\n                }\n\n                .legend-squares {\n                    display: flex;\n                    gap: var(--spacing-1);\n                }\n\n                .legend-square {\n                    width: 12px;\n                    height: 12px;\n                    border-radius: 2px;\n                    border: 1px solid var(--color-border-muted);\n                }\n\n                .heatmap-graph {\n                    display: flex;\n                    flex-direction: column;\n                    gap: var(--spacing-1);\n                    padding: var(--spacing-4);\n                    background: var(--color-canvas-default);\n                    border-radius: var(--border-radius-medium);\n                    border: 1px solid var(--color-border-muted);\n                }\n\n                .month-labels {\n                    display: grid;\n                    grid-template-columns: repeat(12, 1fr);\n                    gap: var(--spacing-1);\n                    margin-bottom: var(--spacing-2);\n                    padding: 0 var(--spacing-2);\n                }\n\n                .month-label {\n                    font-size: var(--font-size-small);\n                    color: var(--color-fg-subtle);\n                    text-align: center;\n                    font-weight: 500;\n                    text-transform: uppercase;\n                    letter-spacing: 0.5px;\n                }\n\n                .day-labels {\n                    display: flex;\n                    justify-content: space-around;\n                    margin-bottom: var(--spacing-1);\n                    padding: 0 var(--spacing-2);\n                }\n\n                .day-label {\n                    font-size: var(--font-size-small);\n                    color: var(--color-fg-subtle);\n                    text-transform: uppercase;\n                    letter-spacing: 0.5px;\n                    font-weight: 500;\n                }\n\n                .weeks-grid {\n                    display: grid;\n                    grid-template-columns: repeat(53, 1fr);\n                    gap: var(--spacing-1);\n                    justify-items: center;\n                }\n\n                .week-column {\n                    display: flex;\n                    flex-direction: column;\n                    gap: var(--spacing-1);\n                    align-items: center;\n                }\n\n                .day-square {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 2px;\n                    border: 1px solid var(--color-border-muted);\n                    transition: var(--transition-fast);\n                    background: var(--color-canvas-subtle);\n                }\n\n                .day-square:hover {\n                    opacity: 0.8;\n                }\n\n                .day-square.level-1 {\n                    background: #0e4429;\n                }\n\n                .day-square.level-2 {\n                    background: #006d32;\n                }\n\n                .day-square.level-3 {\n                    background: #26a641;\n                }\n\n                .day-square.level-4 {\n                    background: #39d353;\n                }\n\n                /* Contribution Graph Styles */\n                .contribution-graph {\n                    background: var(--vscode-editor-background);\n                    border: 1px solid var(--vscode-panel-border);\n                    border-radius: 8px;\n                    padding: 20px;\n                    margin: 20px 0;\n                    font-family: var(--vscode-font-family);\n                }\n\n                .contribution-header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 16px;\n                    padding-bottom: 12px;\n                    border-bottom: 1px solid var(--vscode-panel-border);\n                }\n\n                .contribution-stats {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 4px;\n                }\n\n                .contribution-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: var(--vscode-editor-foreground);\n                    margin: 0;\n                }\n\n                .contribution-summary {\n                    font-size: 12px;\n                    color: var(--vscode-descriptionForeground);\n                    margin: 0;\n                }\n\n                .contribution-legend {\n                    display: flex;\n                    align-items: center;\n                    gap: 4px;\n                    font-size: 11px;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .legend-text {\n                    font-size: 11px;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .legend-squares {\n                    display: flex;\n                    gap: 2px;\n                    margin: 0 4px;\n                }\n\n                .legend-square {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 2px;\n                    border: 1px solid var(--vscode-panel-border);\n                }\n\n                .legend-square.level-0 {\n                    background: var(--vscode-input-background);\n                }\n\n                .legend-square.level-1 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.4;\n                }\n\n                .legend-square.level-2 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.6;\n                }\n\n                .legend-square.level-3 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.8;\n                }\n\n                .legend-square.level-4 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 1;\n                }\n\n                .contribution-calendar {\n                    position: relative;\n                }\n\n                .month-labels {\n                    display: grid;\n                    grid-template-columns: repeat(12, 1fr);\n                    gap: 2px;\n                    margin-bottom: 8px;\n                    margin-left: 20px;\n                }\n\n                .month-label {\n                    font-size: 10px;\n                    color: var(--vscode-descriptionForeground);\n                    text-align: left;\n                }\n\n                .calendar-body {\n                    display: flex;\n                    gap: 4px;\n                }\n\n                .weekday-labels {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 2px;\n                    width: 16px;\n                }\n\n                .weekday-label {\n                    height: 10px;\n                    font-size: 9px;\n                    color: var(--vscode-descriptionForeground);\n                    display: flex;\n                    align-items: center;\n                    line-height: 1;\n                }\n\n                .contribution-grid {\n                    display: flex;\n                    gap: 2px;\n                    flex: 1;\n                }\n\n                .contribution-week {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 2px;\n                }\n\n                .contribution-day {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 2px;\n                    border: 1px solid transparent;\n                    cursor: pointer;\n                    transition: all 0.1s ease;\n                }\n\n                .contribution-day:hover {\n                    border-color: var(--vscode-focusBorder);\n                    transform: scale(1.1);\n                }\n\n                .contribution-day.inactive {\n                    opacity: 0.3;\n                }\n\n                .contribution-day.level-0 {\n                    background: var(--vscode-input-background);\n                    border-color: var(--vscode-panel-border);\n                }\n\n                .contribution-day.level-1 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.4;\n                }\n\n                .contribution-day.level-2 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.6;\n                }\n\n                .contribution-day.level-3 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 0.8;\n                }\n\n                .contribution-day.level-4 {\n                    background: var(--vscode-gitDecoration-addedResourceForeground);\n                    opacity: 1;\n                }\n\n                /* People and Gists Styles */\n                .people-tabs {\n                    display: flex;\n                    gap: var(--spacing-2);\n                    margin-bottom: var(--spacing-6);\n                    background: var(--color-canvas-subtle);\n                    border: 1px solid var(--color-border-default);\n                    border-radius: var(--border-radius-medium);\n                    padding: var(--spacing-1);\n                }\n\n                .people-tab {\n                    background: transparent;\n                    border: none;\n                    color: var(--color-fg-muted);\n                    padding: var(--spacing-3) var(--spacing-4);\n                    cursor: pointer;\n                    border-radius: var(--border-radius-small);\n                    font-weight: 600;\n                    font-size: var(--font-size-normal);\n                    transition: var(--transition-fast);\n                    display: flex;\n                    align-items: center;\n                    gap: var(--spacing-2);\n                    flex: 1;\n                    justify-content: center;\n                }\n\n                .people-tab:hover {\n                    background: var(--color-canvas-default);\n                    color: var(--color-fg-default);\n                }\n\n                .people-tab.active {\n                    background: var(--color-accent-emphasis);\n                    color: var(--color-canvas-default);\n                    box-shadow: var(--shadow-small);\n                }\n\n                .people-section {\n                    display: none;\n                }\n\n                .people-section.active {\n                    display: block;\n                }\n\n                .people-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n                    gap: var(--spacing-4);\n                }\n\n                .person-card {\n                    background: var(--color-canvas-default);\n                    border: 1px solid var(--color-border-default);\n                    border-radius: var(--border-radius-large);\n                    padding: var(--spacing-5);\n                    text-align: center;\n                    transition: var(--transition-normal);\n                    cursor: pointer;\n                    box-shadow: var(--shadow-medium);\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    gap: var(--spacing-3);\n                }\n\n                .person-card:hover {\n                    border-color: var(--color-accent-emphasis);\n                    transform: translateY(-2px);\n                    box-shadow: var(--shadow-large);\n                }\n\n                .person-avatar {\n                    width: 60px;\n                    height: 60px;\n                    border-radius: 50%;\n                    border: 2px solid var(--color-border-default);\n                    transition: var(--transition-fast);\n                }\n\n                .person-card:hover .person-avatar {\n                    border-color: var(--color-accent-emphasis);\n                }\n\n                .person-info {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    gap: var(--spacing-1);\n                }\n\n                .person-name {\n                    font-size: var(--font-size-normal);\n                    font-weight: 600;\n                    color: var(--color-fg-default);\n                    margin: 0;\n                }\n\n                .person-type {\n                    font-size: var(--font-size-small);\n                    color: var(--color-fg-muted);\n                    text-transform: uppercase;\n                    letter-spacing: 0.5px;\n                    font-weight: 500;\n                }\n\n                .visibility-badge {\n                    padding: var(--spacing-1) var(--spacing-2);\n                    border-radius: var(--border-radius-small);\n                    font-size: var(--font-size-small);\n                    font-weight: 600;\n                    text-transform: uppercase;\n                    letter-spacing: 0.5px;\n                }\n\n                .visibility-badge.public {\n                    background: var(--color-success-subtle);\n                    color: var(--color-success-fg);\n                    border: 1px solid var(--color-success-muted);\n                }\n\n                .visibility-badge.private {\n                    background: var(--color-attention-subtle);\n                    color: var(--color-attention-fg);\n                    border: 1px solid var(--color-attention-muted);\n                }\n\n                .empty-state {\n                    text-align: center;\n                    padding: var(--spacing-8);\n                    color: var(--color-fg-muted);\n                }\n\n                .empty-icon {\n                    font-size: 48px;\n                    margin-bottom: var(--spacing-4);\n                    opacity: 0.6;\n                }\n\n                .empty-state h3 {\n                    font-size: var(--font-size-xl);\n                    font-weight: 600;\n                    color: var(--color-fg-default);\n                    margin: 0 0 var(--spacing-2) 0;\n                }\n\n                .empty-state p {\n                    font-size: var(--font-size-normal);\n                    color: var(--color-fg-muted);\n                    margin: 0;\n                    max-width: 400px;\n                    margin-left: auto;\n                    margin-right: auto;\n                    line-height: 1.5;\n                }\n\n                /* Responsive Design */\n                @media (max-width: 1024px) {\n                    .container {\n                        padding: var(--spacing-5);\n                    }\n                    \n                    .header {\n                        flex-direction: column;\n                        text-align: center;\n                        gap: var(--spacing-6);\n                    }\n                    \n                    .grid {\n                        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n                        gap: var(--spacing-4);\n                    }\n                    \n                    .filters {\n                        flex-direction: column;\n                        align-items: stretch;\n                    }\n                    \n                    .right {\n                        margin-left: 0;\n                        margin-top: var(--spacing-4);\n                    }\n                }\n\n                @media (max-width: 768px) {\n                    .container {\n                        padding: var(--spacing-3);\n                    }\n                    \n                    .title {\n                        font-size: var(--font-size-2xl);\n                    }\n                    \n                    .stats {\n                        grid-template-columns: repeat(2, 1fr);\n                        gap: var(--spacing-3);\n                    }\n                    \n                    .grid {\n                        grid-template-columns: 1fr;\n                        gap: var(--spacing-3);\n                    }\n                    \n                    .tabs {\n                        flex-wrap: wrap;\n                    }\n                    \n                    .tab {\n                        flex: 1;\n                        min-width: 120px;\n                        justify-content: center;\n                    }\n                }\n\n                /* Loading States */\n                .loading {\n                    opacity: 0.6;\n                    pointer-events: none;\n                }\n\n                .loading::after {\n                    content: '';\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    width: 20px;\n                    height: 20px;\n                    margin: -10px 0 0 -10px;\n                    border: 2px solid var(--color-accent-emphasis);\n                    border-top: 2px solid transparent;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n\n                @keyframes spin {\n                    0% { transform: rotate(0deg); }\n                    100% { transform: rotate(360deg); }\n                }\n\n                /* Focus States */\n                .icon-btn:focus,\n                .primary-btn:focus,\n                .input:focus,\n                .select:focus {\n                    outline: 2px solid var(--color-accent-emphasis);\n                    outline-offset: 2px;\n                }\n\n                /* Print Styles */\n                @media print {\n                    .icon-btn,\n                    .primary-btn {\n                        display: none;\n                    }\n                    \n                    .card {\n                        break-inside: avoid;\n                        box-shadow: none;\n                        border: 1px solid #e5e7eb;\n                    }\n                }\n            </style>\n        </head>\n        <body>\n            \x3c!-- GitHub-like Header --\x3e\n            <div class="AppHeader">\n                <div class="AppHeader-globalBar">\n                    <svg height="32" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="32" class="github-logo">\n                        <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>\n                    </svg>\n                    <nav>\n                        <a href="#" class="HeaderMenu-link">Pull requests</a>\n                        <a href="#" class="HeaderMenu-link">Issues</a>\n                        <a href="#" class="HeaderMenu-link">Codespaces</a>\n                        <a href="#" class="HeaderMenu-link">Marketplace</a>\n                        <a href="#" class="HeaderMenu-link">Explore</a>\n                    </nav>\n                </div>\n                <div class="AppHeader-user">\n                    <img class="avatar" src="${t.avatar_url}" alt="${t.login}" style="width: 32px; height: 32px;" />\n                </div>\n            </div>\n\n            \x3c!-- Main Profile Container --\x3e\n            <div class="profile-container">\n                \x3c!-- Left Sidebar --\x3e\n                <div class="profile-sidebar">\n                    <div class="avatar-wrapper">\n                        <img class="avatar" src="${t.avatar_url}" alt="${t.login}" />\n                    </div>\n                    \n                    <div class="profile-info">\n                        <h1 class="profile-name">${t.name||t.login}</h1>\n                        <p class="profile-login">${t.login}</p>\n                        \n                        <button id="createRepoBtn" class="btn-primary">\n                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right:8px; display:inline-block; vertical-align:middle;">\n                                <path d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path>\n                            </svg>\n                            New repository\n                        </button>\n                        \n                        ${t.bio?`<div class="profile-bio">${t.bio}</div>`:""}\n                        \n                        <div class="profile-details">\n                            ${t.company?`\n                                <div class="profile-detail">\n                                    <svg viewBox="0 0 16 16" width="16" height="16" fill="currentColor">\n                                        <path d="M1.75 16A1.75 1.75 0 010 14.25V1.75C0 .784.784 0 1.75 0h8.5C11.216 0 12 .784 12 1.75v12.5c0 .085-.006.168-.018.25h2.268a.25.25 0 00.25-.25V8.285a.25.25 0 00-.111-.208l-1.055-.703a.75.75 0 11.832-1.248l1.055.703c.487.325.779.871.779 1.456v5.965A1.75 1.75 0 0114.25 16h-2.5a.75.75 0 01-.197-.026c-.099.017-.2.026-.303.026h-8.5zM9 9a.75.75 0 000-1.5H4.5a.75.75 0 000 1.5H9zM4.5 5.75a.75.75 0 000 1.5h3.5a.75.75 0 000-1.5h-3.5z"></path>\n                                    </svg>\n                                    ${t.company}\n                                </div>\n                            `:""}\n                            ${t.location?`\n                                <div class="profile-detail">\n                                    <svg viewBox="0 0 16 16" width="16" height="16" fill="currentColor">\n                                        <path d="m12.596 11.596-3.535 3.536a1.5 1.5 0 0 1-2.122 0l-3.535-3.536a6.5 6.5 0 1 1 9.192-9.193 6.5 6.5 0 0 1 0 9.193Zm-1.06-8.132v-.001a5 5 0 1 0-7.072 7.072L8 14.07l3.536-3.534a5 5 0 0 0 0-7.072ZM8 9a2 2 0 1 1-.001-3.999A2 2 0 0 1 8 9Z"></path>\n                                    </svg>\n                                    ${t.location}\n                                </div>\n                            `:""}\n                            ${t.email?`\n                                <div class="profile-detail">\n                                    <svg viewBox="0 0 16 16" width="16" height="16" fill="currentColor">\n                                        <path d="M1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0114.25 14H1.75A1.75 1.75 0 010 12.25v-8.5C0 2.784.784 2 1.75 2ZM1.5 12.251c0 .138.112.25.25.25h12.5a.25.25 0 00.25-.25V5.809L8.38 9.397a.75.75 0 01-.76 0L1.5 5.809v6.442Zm13-8.181v-.32a.25.25 0 00-.25-.25H1.75a.25.25 0 00-.25.25v.32L8 7.88l6.5-3.81Z"></path>\n                                    </svg>\n                                    ${t.email}\n                                </div>\n                            `:""}\n                            ${t.blog?`\n                                <div class="profile-detail">\n                                    <svg viewBox="0 0 16 16" width="16" height="16" fill="currentColor">\n                                        <path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path>\n                                    </svg>\n                                    <a href="${t.blog}" target="_blank">${t.blog}</a>\n                                </div>\n                            `:""}\n                        </div>\n                        \n                        <div class="profile-stats">\n                            <a href="#" class="profile-stat">\n                                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;">\n                                    <path d="M2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.442-.412 4.01 4.01 0 00-2.56-2.78A3 3 0 0011 4z"></path>\n                                </svg>\n                                <span class="profile-stat-count">${t.followers}</span> followers\n                            </a>\n                            <a href="#" class="profile-stat">\n                                <span class="profile-stat-count">${t.following}</span> following\n                            </a>\n                        </div>\n                    </div>\n                </div>\n\n                \x3c!-- Main Content --\x3e\n                <div class="profile-main">\n                    <nav class="UnderlineNav">\n                        <button class="UnderlineNav-item selected" data-tab="repositories">\n                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">\n                                <path d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path>\n                            </svg>\n                            Repositories\n                            <span class="Counter" id="tabRepoCount">${r.length}</span>\n                        </button>\n                        <button class="UnderlineNav-item" data-tab="stars">\n                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">\n                                <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.279l4.21-.612L7.327.668A.75.75 0 018 .25z"></path>\n                            </svg>\n                            Stars\n                            <span class="Counter" id="starTabCount">${a.length}</span>\n                        </button>\n                        <button class="UnderlineNav-item" data-tab="activity">\n                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">\n                                <path d="M6 2c.306 0 .582.187.696.471L10 10.731l1.304-3.26A.751.751 0 0112 7h3.25a.75.75 0 010 1.5h-2.742l-1.812 4.528a.751.751 0 01-1.392 0L6 4.77 4.696 8.03A.751.751 0 014 8.5H.75a.75.75 0 010-1.5h2.742l1.812-4.529A.751.751 0 016 2z"></path>\n                            </svg>\n                            Activity\n                        </button>\n                    </nav>\n\n                    \x3c!-- Repositories Tab --\x3e\n                    <div id="repositories" class="tab-content active">\n                        <div class="repo-filters">\n                            <input id="searchInput" class="form-control" type="text" placeholder="Find a repository..." />\n                            <select id="typeFilter" class="form-control form-select">\n                                <option value="">Type: All</option>\n                                <option value="public">Public</option>\n                                <option value="private">Private</option>\n                                <option value="forks">Forks</option>\n                                <option value="archived">Archived</option>\n                                <option value="mirrors">Mirrors</option>\n                            </select>\n                            <select id="langFilter" class="form-control form-select">\n                                <option value="">Language: All</option>\n                            </select>\n                            <select id="sortBy" class="form-control form-select">\n                                <option value="updated">Sort: Recently updated</option>\n                                <option value="name">Sort: Name</option>\n                                <option value="stars">Sort: Stars</option>\n                            </select>\n                        </div>\n                        <ul class="repo-list" id="repoList"></ul>\n                    </div>\n\n                    \x3c!-- Stars Tab --\x3e\n                    <div id="stars" class="tab-content">\n                        <ul class="starred-repos" id="starredReposList"></ul>\n                    </div>\n\n                    \x3c!-- Activity Tab --\x3e\n                    <div id="activity" class="tab-content">\n                        <div class="activity-container">\n                            <div class="activity-stats-grid">\n                                <div class="activity-stat-card">\n                                    <span class="activity-stat-number">${s.length}</span>\n                                    <span class="activity-stat-label">Recent Events</span>\n                                </div>\n                                <div class="activity-stat-card">\n                                    <span class="activity-stat-number">${c.length}</span>\n                                    <span class="activity-stat-label">Pull Requests</span>\n                                </div>\n                                <div class="activity-stat-card">\n                                    <span class="activity-stat-number">${l.length}</span>\n                                    <span class="activity-stat-label">Issues</span>\n                                </div>\n                                <div class="activity-stat-card">\n                                    <span class="activity-stat-number">${r.length}</span>\n                                    <span class="activity-stat-label">Repositories</span>\n                                </div>\n                            </div>\n                            \n                            ${function(e){const t=new Date,r=new Date(t);r.setFullYear(t.getFullYear()-1);const n=Object.values(e).reduce((e,t)=>e+t,0);let o='<div class="contribution-graph">';o+='<div class="contribution-header">',o+='<div class="contribution-stats">',o+='<h3 class="contribution-title">Contributions</h3>',o+=`<p class="contribution-summary">${n} contributions in the last year</p>`,o+="</div>",o+='<div class="contribution-legend">',o+='<span class="legend-text">Less</span>',o+='<div class="legend-squares">';for(let e=0;e<=4;e++)o+=`<div class="legend-square level-${e}"></div>`;o+="</div>",o+='<span class="legend-text">More</span>',o+="</div>",o+="</div>",o+='<div class="contribution-calendar">',o+='<div class="month-labels">';const s=[];for(let e=0;e<12;e++){const t=new Date(r);t.setMonth(r.getMonth()+e),s.push(t.toLocaleDateString("en",{month:"short"}))}s.forEach((e,t)=>{o+=`<div class="month-label" style="width: ${0===t||11===t?"13px":"26px"}">${e}</div>`}),o+="</div>",o+='<div class="calendar-body">',o+='<div class="weekday-labels">',o+='<div class="weekday-label"></div>',o+='<div class="weekday-label">Mon</div>',o+='<div class="weekday-label"></div>',o+='<div class="weekday-label">Wed</div>',o+='<div class="weekday-label"></div>',o+='<div class="weekday-label">Fri</div>',o+='<div class="weekday-label"></div>',o+="</div>",o+='<div class="contribution-grid">';let i=new Date(r);i.setDate(i.getDate()-i.getDay());for(let n=0;n<53;n++){o+='<div class="contribution-week">';for(let n=0;n<7;n++){const n=i.toISOString().split("T")[0],s=e[n]||0;let a=0;s>0&&s<=2?a=1:s>2&&s<=5?a=2:s>5&&s<=8?a=3:s>8&&(a=4);const c=i>=r&&i<=t,l=c?`${s} contribution${1!==s?"s":""} on ${i.toLocaleDateString("en",{weekday:"short",year:"numeric",month:"short",day:"numeric"})}`:"";o+=`<div class="contribution-day ${c?"active":"inactive"} level-${c?a:0}" \n                       data-date="${n}" \n                       data-count="${s}"\n                       title="${l}"></div>`,i.setDate(i.getDate()+1)}o+="</div>"}return o+="</div>",o+="</div>",o+="</div>",o+="</div>",o}(d)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <script nonce="${u}">\n                const vscode = acquireVsCodeApi();\n                const USER_LOGIN = ${JSON.stringify(t.login)};\n                const CURRENT_USER = ${JSON.stringify({login:t.login,id:t.id})};\n                let REPOS = ${g};\n                let STARRED = ${m};\n                const PINNED = ${h};\n                const starredSet = new Set(STARRED.map(r => (r.full_name || (r.owner.login + '/' + r.name))));\n\n                // Navigation Tabs\n                document.querySelectorAll('.UnderlineNav-item').forEach(t => t.addEventListener('click', () => {\n                    document.querySelectorAll('.UnderlineNav-item').forEach(x => x.classList.remove('selected'));\n                    t.classList.add('selected');\n                    document.querySelectorAll('.tab-content').forEach(s => s.classList.remove('active'));\n                    document.getElementById(t.dataset.tab).classList.add('active');\n                }));\n\n                // People Tabs\n                document.querySelectorAll('.people-tab').forEach(t => t.addEventListener('click', () => {\n                    document.querySelectorAll('.people-tab').forEach(x => x.classList.remove('active'));\n                    t.classList.add('active');\n                    document.querySelectorAll('.people-section').forEach(s => s.classList.remove('active'));\n                    document.getElementById(t.dataset.peopleTab + '-section').classList.add('active');\n                }));\n\n                // Actions\n                document.getElementById('createRepoBtn').addEventListener('click', () => vscode.postMessage({ command: 'createRepo' }));\n\n                function fmtUpdated(dateStr){\n                    const date = new Date(dateStr); const now = new Date(); const days = Math.floor((now-date)/(1000*60*60*24));\n                    if(days===0) return 'today'; if(days===1) return 'yesterday'; if(days<30) return days+' days ago'; if(days<365) return Math.floor(days/30)+' months ago'; return Math.floor(days/365)+' years ago';\n                }\n\n                function repoKey(o,r){ return (o+'/'+r).toLowerCase(); }\n\n                function starButton(owner, repo){\n                    const key = owner + '/' + repo;\n                    const isStarred = starredSet.has(key);\n                    return '<button class="btn btn-sm btn-outline" data-action="toggle-star" data-owner="' + owner + '" data-repo="' + repo + '" type="button">' +\n                           '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right:4px;">' +\n                               '<path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.279l4.21-.612L7.327.668A.75.75 0 018 .25z"></path>' +\n                           '</svg> ' + (isStarred ? 'Unstar' : 'Star') + '</button>';\n                }\n\n                function deleteButton(owner, repo){\n                    if (owner !== USER_LOGIN) return '';\n                    return '<button class="btn btn-sm btn-danger" data-action="delete" data-owner="' + owner + '" data-repo="' + repo + '" type="button">' +\n                           '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right:4px;">' +\n                               '<path d="M6.5 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25V3h-3V1.75zm4.5 0V3h2.25a.75.75 0 010 1.5H2.75a.75.75 0 010-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75zM4.496 6.675a.75.75 0 10-1.492.15l.66 6.6A1.75 1.75 0 005.405 15h5.19c.9 0 1.652-.681 1.741-1.576l.66-6.6a.75.75 0 00-1.492-.149l-.66 6.6a.25.25 0 01-.249.225h-5.19a.25.25 0 01-.249-.225l-.66-6.6z"></path>' +\n                           '</svg> Delete</button>';\n                }\n\n                function repoListItem(repo){\n                    const owner = (repo.owner?.login) || USER_LOGIN;\n                    const name = repo.name;\n                    const lang = repo.language;\n                    const langColor = lang ? getLangColor(lang) : '#586069';\n                    const isPrivate = repo.private;\n                    \n                    return (\n                        '<li class="repo-list-item" data-owner="' + owner + '" data-repo="' + name + '">' +\n                            '<div class="repo">' +\n                                '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="repo-icon">' +\n                                    '<path d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path>' +\n                                '</svg>' +\n                                '<div class="repo-info">' +\n                                    '<h3>' +\n                                        '<a href="#" class="repo-name" data-action="open">' + name + '</a>' +\n                                        (isPrivate ? '<span class="Label Label--secondary">Private</span>' : '') +\n                                    '</h3>' +\n                                    (repo.description ? '<p class="repo-description">' + repo.description + '</p>' : '') +\n                                    '<div class="repo-meta">' +\n                                        (lang ? \n                                            '<span style="display: inline-flex; align-items: center; margin-right: 16px;">' +\n                                                '<span class="repo-language-color" style="background-color: ' + langColor + ';"></span>' + lang +\n                                            '</span>' : ''\n                                        ) +\n                                        '<a href="#" style="display: inline-flex; align-items: center; margin-right: 16px; color: var(--color-fg-muted); text-decoration: none;">' +\n                                            '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;">' +\n                                                '<path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.279l4.21-.612L7.327.668A.75.75 0 018 .25z"></path>' +\n                                            '</svg>' +\n                                            (repo.stargazers_count || 0) +\n                                        '</a>' +\n                                        '<a href="#" style="display: inline-flex; align-items: center; margin-right: 16px; color: var(--color-fg-muted); text-decoration: none;">' +\n                                            '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;">' +\n                                                '<path d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z"></path>' +\n                                            '</svg>' +\n                                            (repo.forks_count || 0) +\n                                        '</a>' +\n                                        '<span style="font-size: 12px; color: var(--color-fg-muted);">Updated ' + fmtUpdated(repo.updated_at || repo.pushed_at || new Date().toISOString()) + '</span>' +\n                                    '</div>' +\n                                '</div>' +\n                                '<div class="repo-actions">' +\n                                    starButton(owner, name) +\n                                    deleteButton(owner, name) +\n                                '</div>' +\n                            '</div>' +\n                        '</li>'\n                    );\n                }\n\n                function getLangColor(lang){\n                    const colors = ${JSON.stringify({JavaScript:"#f1e05a",TypeScript:"#3178c6",Python:"#3572A5",Java:"#b07219",HTML:"#e34c26",CSS:"#563d7c",C:"#555555","C++":"#f34b7d","C#":"#239120",Go:"#00ADD8",Rust:"#dea584",PHP:"#4F5D95",Ruby:"#701516",Swift:"#fa7343",Kotlin:"#A97BFF",Dart:"#00B4AB",Scala:"#c22d40",R:"#198CE7",Shell:"#89e051",PowerShell:"#012456",Vue:"#4FC08D",React:"#61DAFB"})};\n                    return colors[lang] || '#586069';\n                }\n\n                // Populate language filter\n                (function(){\n                    const langs = Array.from(new Set(REPOS.map(r => r.language).filter(Boolean))).sort();\n                    const langSel = document.getElementById('langFilter');\n                    langSel.innerHTML = '<option value="">All languages</option>' + langs.map(l => '<option value="' + l + '">' + l + '</option>').join('');\n                })();\n\n                function applyFilters(){\n                    const q = (document.getElementById('searchInput').value || '').toLowerCase();\n                    const type = (document.getElementById('typeFilter').value);\n                    const lang = (document.getElementById('langFilter').value);\n                    const sort = (document.getElementById('sortBy').value);\n                    let list = REPOS.slice();\n                    if (q) list = list.filter(r => (r.name + ' ' + (r.description||'')).toLowerCase().includes(q));\n                    if (type==='public') list = list.filter(r => !r.private);\n                    if (type==='private') list = list.filter(r => r.private);\n                    if (type==='forks') list = list.filter(r => r.fork);\n                    if (type==='archived') list = list.filter(r => r.archived);\n                    if (type==='mirrors') list = list.filter(r => r.mirror_url);\n                    if (lang) list = list.filter(r => r.language === lang);\n                    if (sort==='updated') list.sort((a,b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n                    if (sort==='name') list.sort((a,b) => a.name.localeCompare(b.name));\n                    if (sort==='stars') list.sort((a,b) => (b.stargazers_count||0) - (a.stargazers_count||0));\n                    document.getElementById('repoList').innerHTML = list.map(repoListItem).join('');\n                }\n\n                ['searchInput','typeFilter','langFilter','sortBy'].forEach(id => document.getElementById(id).addEventListener('input', applyFilters));\n                ['typeFilter','langFilter','sortBy'].forEach(id => document.getElementById(id).addEventListener('change', applyFilters));\n\n                // Render pinned\n                // Render starred repositories\n                function renderStars(){\n                    const list = document.getElementById('starredReposList');\n                    list.innerHTML = STARRED.map(repo => {\n                        const owner = repo.owner.login;\n                        const name = repo.name;\n                        const lang = repo.language;\n                        const langColor = lang ? getLangColor(lang) : '#586069';\n                        \n                        // Check if current user owns this repository\n                        const isOwned = CURRENT_USER && owner === CURRENT_USER.login;\n                        const deleteBtn = isOwned ? deleteButton(owner, name) : '';\n                        \n                        return '<li class="starred-repo-item" data-owner="' + owner + '" data-repo="' + name + '">' +\n                               '    <div class="starred-repo">' +\n                               '        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="repo-icon">' +\n                               '            <path d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path>' +\n                               '        </svg>' +\n                               '        <div class="starred-repo-info">' +\n                               '            <h3>' +\n                               '                <a href="#" class="starred-repo-name" data-action="open">' + owner + '/' + name + '</a>' +\n                               '                ' + (repo.private ? '<span class="Label Label--secondary">Private</span>' : '') +\n                               '            </h3>' +\n                               '            ' + (repo.description ? '<p class="starred-repo-description">' + repo.description + '</p>' : '') +\n                               '            <div class="starred-repo-meta">' +\n                               '                ' + (lang ? \n                                                    '<span style="display: inline-flex; align-items: center; margin-right: 16px;">' +\n                                                        '<span class="repo-language-color" style="background-color: ' + langColor + ';"></span>' + lang +\n                                                    '</span>' : '') +\n                               '                <span style="display: inline-flex; align-items: center; margin-right: 16px; color: var(--color-fg-muted);">' +\n                               '                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;">' +\n                               '                        <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.279l4.21-.612L7.327.668A.75.75 0 018 .25z"></path>' +\n                               '                    </svg>' +\n                               '                    ' + (repo.stargazers_count || 0) +\n                               '                </span>' +\n                               '                <span style="display: inline-flex; align-items: center; margin-right: 16px; color: var(--color-fg-muted);">' +\n                               '                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;">' +\n                               '                        <path d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z"></path>' +\n                               '                    </svg>' +\n                               '                    ' + (repo.forks_count || 0) +\n                               '                </span>' +\n                               '                <span style="font-size: 12px; color: var(--color-fg-muted);">Updated ' + fmtUpdated(repo.updated_at || new Date().toISOString()) + '</span>' +\n                               '            </div>' +\n                               '        </div>' +\n                               '        <div class="starred-repo-actions">' +\n                               '            ' + starButton(owner, name) + deleteBtn +\n                               '        </div>' +\n                               '    </div>' +\n                               '</li>';\n                    }).join('');\n                }\n\n                // Global click handler for buttons and open\n                document.addEventListener('click', (e) => {\n                    const target = e.target.closest('[data-action]');\n                    if (!target) return;\n\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    const listItem = target.closest('.repo-list-item, .starred-repo-item');\n                    const owner = listItem?.getAttribute('data-owner') || target.getAttribute('data-owner');\n                    const repo = listItem?.getAttribute('data-repo') || target.getAttribute('data-repo');\n                    const action = target.getAttribute('data-action');\n\n                    console.log('Button clicked:', { action, owner, repo, target: target.outerHTML });\n\n                    if (action === 'open') {\n                        const repoData = REPOS.find(r => r.owner.login === owner && r.name === repo);\n                        vscode.postMessage({ \n                            command: 'openRepo', \n                            owner, \n                            repo,\n                            repoUrl: repoData?.clone_url || \`https://github.com/\${owner}/\${repo}.git\`\n                        });\n                    } else if (action === 'toggle-star') {\n                        const key = owner + '/' + repo;\n                        if (starredSet.has(key)) {\n                            console.log('Unstarring:', key);\n                            vscode.postMessage({ command: 'unstarRepository', owner, repo });\n                        } else {\n                            console.log('Starring:', key);\n                            vscode.postMessage({ command: 'starRepository', owner, repo });\n                        }\n                    } else if (action === 'delete') {\n                        // Update button to show loading state\n                        target.disabled = true;\n                        target.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="margin-right: 4px; animation: spin 1s linear infinite;"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg> Deleting...';\n                        target.style.opacity = '0.6';\n                        \n                        console.log('Deleting:', owner + '/' + repo);\n                        vscode.postMessage({ command: 'deleteRepository', owner, repo });\n                    }\n                });\n\n                // Messages from extension (update UI)\n                window.addEventListener('message', (event) => {\n                    const msg = event.data;\n                    console.log('Webview received message:', msg);\n                    if (msg.command === 'starToggled') {\n                        const key = msg.owner + '/' + msg.repo;\n                        if (msg.starred) starredSet.add(key); else starredSet.delete(key);\n                        STARRED = msg.starredRepos || STARRED;\n                        document.getElementById('starTabCount').textContent = String(STARRED.length);\n                        applyFilters();\n                        renderStars();\n                    }\n                    if (msg.command === 'repoDeleted') {\n                        console.log('Processing repoDeleted message for:', msg.owner + '/' + msg.repo);\n                        const key = (msg.owner + '/' + msg.repo).toLowerCase();\n                        const keyNormal = msg.owner + '/' + msg.repo;\n                        \n                        // Remove from repositories array\n                        REPOS = msg.repositories || REPOS.filter(r => (r.owner.login + '/' + r.name).toLowerCase() !== key);\n                        console.log('Updated REPOS array, new length:', REPOS.length);\n                        \n                        // Update both tab count and section count with proper IDs\n                        const tabRepoCount = document.getElementById('tabRepoCount');\n                        const sectionRepoCount = document.getElementById('sectionRepoCount');\n                        if (tabRepoCount) tabRepoCount.textContent = String(REPOS.length);\n                        if (sectionRepoCount) sectionRepoCount.textContent = String(REPOS.length);\n                        \n                            // Remove from starred repositories if it was starred\n                            if (msg.starredRepos) {\n                                STARRED = msg.starredRepos;\n                                starredSet.delete(keyNormal);\n                                document.getElementById('starTabCount').textContent = String(STARRED.length);\n                                renderStars(); // Re-render stars to remove the deleted repo\n                            } else {\n                                // Fallback: remove from starred set and array manually\n                                starredSet.delete(keyNormal);\n                                STARRED = STARRED.filter(r => (r.owner.login + '/' + r.name) !== keyNormal);\n                                document.getElementById('starTabCount').textContent = String(STARRED.length);\n                                renderStars();\n                            }                        // Update the UI immediately\n                        applyFilters();\n                        \n                        // Show success message\n                        const notification = document.createElement('div');\n                        notification.className = 'success-notification';\n                        notification.textContent = 'Repository ' + msg.owner + '/' + msg.repo + ' deleted successfully';\n                        notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: var(--vscode-notificationsInfoIcon-foreground); color: var(--vscode-editor-background); padding: 12px 16px; border-radius: 4px; font-size: 12px; z-index: 1000; animation: slideIn 0.3s ease;';\n                        document.body.appendChild(notification);\n                        \n                        // Remove notification after 3 seconds\n                        setTimeout(() => {\n                            if (notification.parentNode) {\n                                notification.remove();\n                            }\n                        }, 3000);\n                        \n                        console.log('Repository deleted successfully:', key);\n                    }\n                    if (msg.command === 'deleteError') {\n                        // Re-enable delete buttons and show error\n                        document.querySelectorAll('.btn[data-action="delete"]').forEach(btn => {\n                            if (btn.dataset.owner === msg.owner && btn.dataset.repo === msg.repo) {\n                                btn.disabled = false;\n                                btn.innerHTML = '<svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 4px;"><path d="M6.5 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25V3h-3V1.75zm4.5 0V3h2.25a.75.75 0 010 1.5H2.75a.75.75 0 010-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75zM4.496 6.675a.75.75 0 10-1.492.15l.66 6.6A1.75 1.75 0 005.405 15h5.19c.9 0 1.652-.681 1.741-1.576l.66-6.6a.75.75 0 00-1.492-.149l-.66 6.6a.25.25 0 01-.249.225h-5.19a.25.25 0 01-.249-.225l-.66-6.6z"></path></svg> Delete';\n                                btn.style.opacity = '1';\n                            }\n                        });\n                    }\n                    if (msg.command === 'repoCreated') {\n                        console.log('Processing repoCreated message with:', msg.repositories?.length, 'repositories');\n                        // Update repositories list with newly created repo\n                        if (msg.repositories) {\n                            REPOS = msg.repositories;\n                            console.log('Updated REPOS array, new length:', REPOS.length);\n                            // Update both tab count and section count with proper IDs\n                            const tabRepoCount = document.getElementById('tabRepoCount');\n                            const sectionRepoCount = document.getElementById('sectionRepoCount');\n                            console.log('Found tab count element:', !!tabRepoCount, 'section count element:', !!sectionRepoCount);\n                            if (tabRepoCount) tabRepoCount.textContent = String(REPOS.length);\n                            if (sectionRepoCount) sectionRepoCount.textContent = String(REPOS.length);\n                            \n                            applyFilters(); // This will re-render the repositories\n                            console.log('Applied filters and re-rendered repositories');\n                            \n                            // Show success notification\n                            const notification = document.createElement('div');\n                            notification.className = 'success-notification';\n                            notification.textContent = msg.message || 'Repository created successfully!';\n                            notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: var(--vscode-notificationsInfoIcon-foreground); color: var(--vscode-editor-background); padding: 12px 16px; border-radius: 4px; font-size: 12px; z-index: 1000; animation: slideIn 0.3s ease;';\n                            document.body.appendChild(notification);\n                            \n                            setTimeout(() => {\n                                if (notification.parentNode) {\n                                    notification.remove();\n                                }\n                            }, 3000);\n                        } else {\n                            console.error('repoCreated message received but no repositories data');\n                        }\n                    }\n                });\n\n                // Initial renders\n                applyFilters();\n                renderStars();\n            <\/script>\n        </body>\n        </html>\n    `}(R.webview,m,h,f,b,v,O,F,w,y,x,A),R.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){switch(console.log("Received message from webview:",e),e.command){case"createRepo":l.commands.executeCommand("github-activity-dashboard.createRepo");break;case"openRepo":try{const t=e.owner,r=e.repo;console.log(`Opening repository explorer for: ${t}/${r}`);const n=l.window.createWebviewPanel("repoExplorer",`📁 ${t}/${r}`,l.ViewColumn.One,{enableScripts:!0}),o=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),s=new p.Octokit({auth:o.accessToken}),i=yield s.repos.get({owner:t,repo:r}),c=i.data.default_branch,d=yield s.git.getTree({owner:t,repo:r,tree_sha:c,recursive:"1"});n.webview.html=S(t,r,i.data,d.data.tree,n.webview),n.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){if("openFile"===e.command){if(e.type&&"folder"===e.type)return void console.log("Ignoring folder click:",e.path);try{if(console.log("Fetching file content for:",e.path),!d.data.tree.find(t=>t.path===e.path&&"blob"===t.type))return console.log("Path is not a file:",e.path),void n.webview.postMessage({command:"showError",error:"This is a directory, not a file. Click on files inside the directory to view their content."});const o=yield s.repos.getContent({owner:t,repo:r,path:e.path,ref:c});if("content"in o.data&&!Array.isArray(o.data)){const t=Buffer.from(o.data.content,"base64").toString("utf-8");console.log("File content fetched successfully, length:",t.length),n.webview.postMessage({command:"showFileContent",path:e.path,content:t,language:C(e.path),size:o.data.size})}else n.webview.postMessage({command:"showError",error:"This appears to be a directory or binary file"})}catch(e){console.error("Error fetching file:",e),n.webview.postMessage({command:"showError",error:`Failed to load file: ${(null==e?void 0:e.message)||"Unknown error"}`})}}}))}catch(e){console.error('Error in "openRepo" message handler:',e),l.window.showErrorMessage(`Failed to open repository: ${e.message}`)}break;case"openOrg":try{yield l.commands.executeCommand("github-activity-dashboard.openOrganizationProfile",e.orgName)}catch(e){l.window.showErrorMessage(`Failed to open organization: ${e.message}`)}break;case"openEvent":try{yield l.commands.executeCommand("github-activity-dashboard.openEventDetails",e.eventUrl)}catch(e){l.window.showErrorMessage(`Failed to open event: ${e.message}`)}break;case"openProfile":try{yield l.commands.executeCommand("github-activity-dashboard.openUserProfile",e.username)}catch(e){l.window.showErrorMessage(`Failed to open profile: ${e.message}`)}break;case"openStarredRepo":try{const t=e.repoUrl,r=e.repoName;console.log(`Opening starred repo: ${t}, Name: ${r}`);const n=t.match(/github\.com[\/:]([^\/]+)\/([^\/\.]+)/);if(n){const[,e,t]=n;console.log(`Extracted owner: ${e}, repo: ${t}`),yield l.commands.executeCommand("github-activity-dashboard.expandProfileRepo",e,t)}else console.log("Failed to parse starred repo URL"),l.window.showErrorMessage("Invalid starred repository URL format")}catch(e){console.error("Error in openStarredRepo handler:",e),l.window.showErrorMessage(`Failed to open starred repository: ${e.message}`)}break;case"openPullRequest":try{const t=e.prUrl;console.log(`Opening pull request: ${t}`),yield l.env.openExternal(l.Uri.parse(t))}catch(e){console.error("Error in openPullRequest handler:",e),l.window.showErrorMessage(`Failed to open pull request: ${e.message}`)}break;case"openIssue":try{const t=e.issueUrl;console.log(`Opening issue: ${t}`),yield l.env.openExternal(l.Uri.parse(t))}catch(e){console.error("Error in openIssue handler:",e),l.window.showErrorMessage(`Failed to open issue: ${e.message}`)}break;case"starRepository":try{console.log("Starring repository:",e.owner,e.repo);const t=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken});yield r.activity.starRepoForAuthenticatedUser({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Starred ${e.owner}/${e.repo}`);const n=(yield r.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data;R.webview.postMessage({command:"starToggled",owner:e.owner,repo:e.repo,starred:!0,starredRepos:n})}catch(e){console.error("Error starring repository:",e),l.window.showErrorMessage(`Failed to star repository: ${e.message}`)}break;case"unstarRepository":try{console.log("Unstarring repository:",e.owner,e.repo);const t=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken});yield r.activity.unstarRepoForAuthenticatedUser({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Unstarred ${e.owner}/${e.repo}`);const n=(yield r.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:50})).data;R.webview.postMessage({command:"starToggled",owner:e.owner,repo:e.repo,starred:!1,starredRepos:n})}catch(e){console.error("Error unstarring repository:",e),l.window.showErrorMessage(`Failed to unstar repository: ${e.message}`)}break;case"deleteRepository":try{console.log("Deleting repository:",e.owner,e.repo);const t=yield l.authentication.getSession("github",["repo","delete_repo"],{createIfNone:!0}),n=new p.Octokit({auth:t.accessToken}),s=yield n.users.getAuthenticated();if(e.owner!==s.data.login)return void l.window.showErrorMessage(`You don't have permission to delete ${e.owner}/${e.repo}. You can only delete your own repositories.`);if("Delete Repository"!==(yield l.window.showWarningMessage(`Are you sure you want to delete ${e.owner}/${e.repo}? This action cannot be undone.`,{modal:!0},"Delete Repository")))return;yield n.repos.delete({owner:e.owner,repo:e.repo}),l.window.showInformationMessage(`Successfully deleted repository ${e.owner}/${e.repo}`);let i=[];try{i=(yield n.repos.listForAuthenticatedUser({sort:"updated",per_page:100})).data}catch(e){console.error("Error fetching updated repositories:",e)}let a=[];try{a=(yield n.activity.listReposStarredByAuthenticatedUser({sort:"updated",per_page:100})).data}catch(e){console.error("Error fetching updated starred repositories:",e)}R.webview.postMessage({command:"repoDeleted",owner:e.owner,repo:e.repo,repositories:i,starredRepos:a}),r.refresh(),c.refresh(),o.refresh()}catch(t){console.error("Error deleting repository:",t),l.window.showErrorMessage(`Failed to delete repository: ${t.message}`),R.webview.postMessage({command:"deleteError",owner:e.owner,repo:e.repo,error:t.message})}}}),void 0,e.subscriptions)}catch(e){l.window.showErrorMessage(`Failed to load profile: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.openStarredFile",e=>a(this,void 0,void 0,function*(){var t,r,n;if(!(null===(t=e.repoInfo)||void 0===t?void 0:t.owner)||!(null===(r=e.repoInfo)||void 0===r?void 0:r.repo)||!(null===(n=e.repoInfo)||void 0===n?void 0:n.sha))return;const o=new p.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const t=yield o.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),r=Buffer.from(t.data.content,"base64").toString("utf8"),n=x(e.label.split(".").pop()||""),s=yield l.workspace.openTextDocument({content:r,language:n});yield l.window.showTextDocument(s,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createIssue",()=>a(this,void 0,void 0,function*(){var e;const r=yield l.window.showInputBox({prompt:"Enter issue title",placeHolder:"Bug: Something is not working..."});if(!r)return;const n=yield l.window.showInputBox({prompt:"Enter issue description (optional)",placeHolder:"Describe the issue..."}),o=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(o)try{const e=(0,d.default)(o.uri.fsPath),s=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!s)return void l.window.showErrorMessage("Not a GitHub repository");const[,i,a]=s,c=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),u=new p.Octokit({auth:c.accessToken}),g=yield u.issues.create({owner:i,repo:a,title:r,body:n||""});l.window.showInformationMessage(`Issue created: #${g.data.number}`),t.refresh()}catch(e){l.window.showErrorMessage(`Failed to create issue: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.searchRepos",()=>a(this,void 0,void 0,function*(){const e=yield l.window.showInputBox({prompt:"Search GitHub repositories",placeHolder:"Enter search terms..."});if(e)try{const t=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken}),n=yield r.search.repos({q:e,sort:"stars",order:"desc"}),o=l.window.createQuickPick();o.items=n.data.items.slice(0,20).map(e=>({label:e.full_name,description:`⭐ ${e.stargazers_count} | ${e.description||"No description"}`,detail:e.html_url})),o.placeholder="Select a repository to open",o.onDidChangeSelection(e=>{e[0]&&(l.env.openExternal(l.Uri.parse(e[0].detail)),o.dispose())}),o.show()}catch(e){l.window.showErrorMessage(`Search failed: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.checkoutCommit",e=>a(this,void 0,void 0,function*(){var t;const r=null===(t=l.workspace.workspaceFolders)||void 0===t?void 0:t[0];if(r)try{const t=(0,d.default)(r.uri.fsPath);yield t.checkout(e),l.window.showInformationMessage(`Checked out commit ${e}`)}catch(e){l.window.showErrorMessage(`Failed to checkout commit: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.openOrganizationProfile",e=>a(this,void 0,void 0,function*(){const t=`https://github.com/orgs/${e}/people`;yield l.env.openExternal(l.Uri.parse(t))})),l.commands.registerCommand("github-activity-dashboard.openEventDetails",e=>a(this,void 0,void 0,function*(){yield l.env.openExternal(l.Uri.parse(e))})),l.commands.registerCommand("github-activity-dashboard.openUserProfile",e=>a(this,void 0,void 0,function*(){const t=`https://github.com/${e}`;yield l.env.openExternal(l.Uri.parse(t))})),l.commands.registerCommand("github-activity-dashboard.openProfileFile",e=>a(this,void 0,void 0,function*(){var t,r,n;if(!(null===(t=e.repoInfo)||void 0===t?void 0:t.owner)||!(null===(r=e.repoInfo)||void 0===r?void 0:r.repo)||!(null===(n=e.repoInfo)||void 0===n?void 0:n.sha))return;const o=new p.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const t=yield o.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),r=Buffer.from(t.data.content,"base64").toString("utf8"),n=x(e.label.split(".").pop()||""),s=yield l.workspace.openTextDocument({content:r,language:n});yield l.window.showTextDocument(s,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.switchBranch",(e,t,r)=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=(0,d.default)(t.uri.fsPath);yield e.checkout(r),l.window.showInformationMessage(`Switched to branch ${r}`)}catch(e){l.window.showErrorMessage(`Failed to switch branch: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.expandProfileRepo",(e,t)=>a(this,void 0,void 0,function*(){try{const r=yield c.getChildren();console.log(`[Provider] Found ${r.length} root items in the 'Profile Repos' tree.`);const n=r.find(r=>{var n,o;return(null===(n=r.repoInfo)||void 0===n?void 0:n.owner)===e&&(null===(o=r.repoInfo)||void 0===o?void 0:o.repo)===t});n?(console.log(`[Success] Found matching tree item for ${e}/${t}.`),yield l.commands.executeCommand("github-profile-repos.focus"),yield E.reveal(n,{select:!0,focus:!0,expand:!0}),console.log("[Action] reveal() command executed.")):(console.error(`[Error] Could not find a matching tree item for ${e}/${t}.`),l.window.showErrorMessage(`Could not find repository ${e}/${t} in the list. Please try refreshing the view.`))}catch(e){console.error("Error in expandProfileRepo handler:",e),l.window.showErrorMessage(`Failed to expand repository view: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.exploreRepo",(t,r,...n)=>a(this,[t,r,...n],void 0,function*(t,r,n=""){const o=l.window.createWebviewPanel("repoExplorer",`${r} Explorer`,l.ViewColumn.One,{enableScripts:!0,localResourceRoots:[l.Uri.joinPath(e.extensionUri,"resources")]}),s=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),i=new p.Octokit({auth:s.accessToken});try{const e=yield i.rest.repos.get({owner:t,repo:r});let n;try{n=yield i.rest.git.getTree({owner:t,repo:r,tree_sha:"main",recursive:"true"})}catch(e){console.log("Main branch not found, trying master..."),n=yield i.rest.git.getTree({owner:t,repo:r,tree_sha:"master",recursive:"true"})}o.webview.html=S(t,r,e.data,n.data.tree,o.webview),o.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){if("openFile"===e.command)try{console.log(`Fetching file content for: ${e.path}`);const n=yield i.rest.repos.getContent({owner:t,repo:r,path:e.path,ref:"main"});if(console.log("GitHub API response:",n.data),Array.isArray(n.data))throw new Error("Path is a directory, not a file");const s=n.data;if("file"!==s.type)throw new Error("Selected item is not a file");let a="";if(s.content)try{a=Buffer.from(s.content,"base64").toString("utf-8"),console.log(`Successfully decoded file content (${a.length} characters)`)}catch(e){console.error("Error decoding file content:",e),a="Error: Unable to decode file content"}else a="File is empty or content not available";o.webview.postMessage({command:"showFileContent",path:e.path,content:a,size:s.size||0})}catch(n){if(console.error("Error fetching file:",n),409===n.status||n.message.includes("Git Repository is empty"))try{const n=yield i.rest.repos.getContent({owner:t,repo:r,path:e.path,ref:"master"});if(Array.isArray(n.data))throw new Error("Path is a directory, not a file");const s=n.data;let a="";s.content&&(a=Buffer.from(s.content,"base64").toString("utf-8")),o.webview.postMessage({command:"showFileContent",path:e.path,content:a,size:s.size||0})}catch(t){let r="Unknown error occurred";404===t.status?r=`File not found: ${e.path}`:t.message&&(r=t.message),o.webview.postMessage({command:"showError",error:r})}else{let t="Unknown error occurred";404===n.status?t=`File not found: ${e.path}`:n.message&&(t=n.message),o.webview.postMessage({command:"showError",error:t})}}}))}catch(e){let t="Unknown error";(e instanceof Error||"object"==typeof e&&e&&"message"in e)&&(t=e.message),o.webview.html=`\n                <html>\n                    <body style="font-family: var(--vscode-font-family); padding: 20px;">\n                        <div style="color: var(--vscode-errorForeground); background: var(--vscode-inputValidation-errorBackground); padding: 20px; border-radius: 4px;">\n                            <h3>Failed to load repository</h3>\n                            <p>${t}</p>\n                        </div>\n                    </body>\n                </html>\n            `}}))},t.deactivate=function(){g&&(console.log("Extension deactivating, closing profile panel"),g.dispose(),g=void 0)};const l=i(r(398)),p=r(458),d=c(r(662)),u=r(566);let g,m;class h{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.repositories=[],this.repoItems=[],this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e)return[];{const e=yield this.octokit.users.getAuthenticated().then(e=>e.data.login),[t,r]=yield Promise.all([this.octokit.search.issuesAndPullRequests({q:`is:open is:issue assignee:${e}`}),this.octokit.search.issuesAndPullRequests({q:`is:open is:pr review-requested:${e}`})]);return[new l.TreeItem(`Assigned Issues: ${t.data.total_count}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`Review Requests: ${r.data.total_count}`,l.TreeItemCollapsibleState.None)]}})}}class f{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=(yield this.octokit.users.getAuthenticated()).data,t=[new l.TreeItem(`👤 ${e.name||e.login}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📧 ${e.email||"Private"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`🏢 ${e.company||"No company"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📍 ${e.location||"No location"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📝 ${e.bio||"No bio"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📊 ${e.public_repos} public repos`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👥 ${e.followers} followers`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👤 ${e.following} following`,l.TreeItemCollapsibleState.None),new l.TreeItem(`⭐ ${e.public_gists} public gists`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📅 Joined ${new Date(e.created_at).toLocaleDateString()}`,l.TreeItemCollapsibleState.None)],r=new l.TreeItem("🔗 View Profile in VS Code",l.TreeItemCollapsibleState.None);return r.command={command:"github-activity-dashboard.openProfile",title:"Open Profile in VS Code",arguments:[]},t.push(r),t}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class b{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["notifications"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=yield this.octokit.activity.listNotificationsForAuthenticatedUser();return 0===e.data.length?[new l.TreeItem("No notifications",l.TreeItemCollapsibleState.None)]:e.data.map(e=>{const t=new l.TreeItem(e.subject.title,l.TreeItemCollapsibleState.None);return t.description=e.repository.full_name,t.tooltip=`${e.subject.type}: ${e.subject.title}\nRepository: ${e.repository.full_name}\nUpdated: ${e.updated_at}`,e.subject.url&&(t.command={command:"vscode.open",title:"Open Notification",arguments:[l.Uri.parse(e.subject.url.replace("api.github.com/repos","github.com").replace("/pulls/","/pull/").replace("/issues/","/issues/"))]}),t.iconPath=e.unread?new l.ThemeIcon("mail"):new l.ThemeIcon("mail-read"),t})}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class v{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){return this.octokit?(yield this.octokit.repos.listForAuthenticatedUser()).data.map(e=>{const t=new l.TreeItem(e.name);return t.command={command:"vscode.open",title:"Open repo",arguments:[l.Uri.parse(e.html_url)]},t}):[]})}}class w{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];const{data:e}=yield this.octokit.activity.listPublicEventsForUser({username:(yield this.octokit.users.getAuthenticated()).data.login});return e.map(e=>new l.TreeItem(`${e.type} on ${e.repo.name}`))})}}class y{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){return this.octokit?(yield this.octokit.activity.listReposStarredByAuthenticatedUser()).data.map(e=>new k(e.name,l.TreeItemCollapsibleState.None,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url})):[]})}}class T{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.repositories=[],this.repoItems=[],this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){return a(this,void 0,void 0,function*(){if(!this.octokit)return;const e=yield this.octokit.repos.listForAuthenticatedUser({per_page:100});this.repositories=e.data,this.repoItems=[],this._onDidChangeTreeData.fire()})}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e&&e.repoInfo){const{owner:t,repo:r,path:n}=e.repoInfo;if("repo"===e.repoInfo.type||"dir"===e.repoInfo.type)try{const e=yield this.octokit.repos.getContent({owner:t,repo:r,path:n||""});if(Array.isArray(e.data))return e.data.map(e=>new E(e.name,"dir"===e.type?l.TreeItemCollapsibleState.Collapsed:l.TreeItemCollapsibleState.None,{owner:t,repo:r,path:e.path,type:e.type,sha:e.sha}))}catch(e){return[new E(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}return[]}return 0===this.repoItems.length&&this.repositories.length>0&&(this.repoItems=this.repositories.map(e=>{const t=new E(e.name,l.TreeItemCollapsibleState.Collapsed,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url});return t.description=e.private?"Private":"Public",t.tooltip=`${e.full_name}\n${e.description||"No description"}\n⭐ ${e.stargazers_count} stars • 🍴 ${e.forks_count} forks`,t})),this.repoItems})}}class E extends l.TreeItem{constructor(e,t,r){super(e,t),this.label=e,this.collapsibleState=t,this.repoInfo=r,"file"===(null==r?void 0:r.type)&&(this.command={command:"github-activity-dashboard.openProfileFile",title:"Open File",arguments:[this]})}}class k extends l.TreeItem{constructor(e,t,r){super(e,t),this.label=e,this.collapsibleState=t,this.repoInfo=r,"file"===(null==r?void 0:r.type)&&(this.command={command:"github-activity-dashboard.openStarredFile",title:"Open File",arguments:[this]})}}function _(){let e="";for(let t=0;t<32;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}function x(e){return{ts:"typescript",js:"javascript",json:"json",md:"markdown",py:"python",java:"java",cs:"csharp",cpp:"cpp",c:"c",go:"go",html:"html",css:"css"}[e]||"plaintext"}function C(e){var t;return{js:"javascript",jsx:"javascript",ts:"typescript",tsx:"typescript",py:"python",java:"java",cpp:"cpp",c:"c",cs:"csharp",php:"php",rb:"ruby",go:"go",rs:"rust",swift:"swift",kt:"kotlin",scala:"scala",html:"html",css:"css",scss:"scss",sass:"sass",less:"less",json:"json",xml:"xml",yaml:"yaml",yml:"yaml",md:"markdown",sh:"bash",sql:"sql",dockerfile:"dockerfile"}[(null===(t=e.split(".").pop())||void 0===t?void 0:t.toLowerCase())||""]||"plaintext"}function S(e,t,r,n,o){const s=_(),i=(e=>{console.log("=== HIERARCHICAL TREE CREATION ==="),console.log("Processing",e.length,"items");const t={children:new Map};e.forEach(e=>{const r=e.path.split("/");let n=t;r.forEach((t,o)=>{n.children.has(t)||n.children.set(t,{name:t,path:r.slice(0,o+1).join("/"),type:o===r.length-1&&"blob"===e.type?"file":"folder",size:e.size,sha:e.sha,children:new Map}),n=n.children.get(t)})});const r=e=>{const t={name:e.name,path:e.path,type:e.type,size:e.size,sha:e.sha,children:[]};if(e.children&&e.children.size>0){const n=Array.from(e.children.values()).map(e=>r(e)).sort((e,t)=>e.type!==t.type?"folder"===e.type?-1:1:e.name.localeCompare(t.name));t.children=n}return t},n=Array.from(t.children.values()).map(e=>r(e)).sort((e,t)=>e.type!==t.type?"folder"===e.type?-1:1:e.name.localeCompare(t.name));return console.log("Root items:",n.length),console.log("Tree structure built successfully"),console.log("Root items preview:",n.slice(0,3).map(e=>({name:e.name,type:e.type,path:e.path,childrenCount:e.children?e.children.length:0}))),{rootItems:n}})(n);return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${o.cspSource} https: data:; style-src ${o.cspSource} 'unsafe-inline'; script-src 'nonce-${s}';">\n            <title>${e}/${t}</title>\n                        <link rel="stylesheet" href="${o.asWebviewUri(l.Uri.joinPath(m.extensionUri,"resources","repo.css"))}">\n                        <style>\n                            /* Fallback / scroll assurance */\n                            html, body { height:100%; margin:0; }\n                            .container { height:100vh; display:flex; }\n                            .main-content { display:flex; flex-direction:column; flex:1; min-height:0; }\n                            #file-display { flex:1; min-height:0; overflow:auto; }\n                            .blob-wrapper { overflow:auto; max-height:none !important; }\n                            table { width:100%; border-collapse:separate; }\n                            .blob-num { white-space:nowrap; }\n                            .blob-code { white-space:pre; }\n                        </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="sidebar">\n                    <div class="repo-header">\n                        <h1 class="repo-title">${e}/${t}</h1>\n                        <p class="repo-description">${r.description||"No description provided"}</p>\n                        <div class="repo-stats">\n                            <div class="stat">\n                                <span>⭐</span>\n                                <span>${r.stargazers_count||0}</span>\n                            </div>\n                            <div class="stat">\n                                <span>🍴</span>\n                                <span>${r.forks_count||0}</span>\n                            </div>\n                            <div class="stat">\n                                <span>👁️</span>\n                                <span>${r.watchers_count||0}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="file-tree">\n                        ${(e=>{console.log("=== BASIC TREE RENDERING ===");const t=(e,r)=>{const n=20*r+16,o="file"===e.type?"file":"folder",s="folder"===e.type?e.path.replace(/[^a-zA-Z0-9]/g,"_"):"";let i='<div class="tree-item-container">';return i+=`<button class="tree-item ${o}" data-path="${e.path}" data-type="${o}" data-folder-name="${s}" style="padding-left: ${n}px;">`,i+='<span class="tree-icon"></span>'+e.name,i+="</button>","folder"===e.type&&e.children&&e.children.length>0&&(i+=`<div class="folder-children" id="folder-${s}">`,e.children.sort((e,t)=>e.type!==t.type?"folder"===e.type?-1:1:e.name.localeCompare(t.name)).forEach(e=>{i+=t(e,r+1)}),i+="</div>"),i+="</div>",i};let r="";return e.rootItems.sort((e,t)=>e.type!==t.type?"folder"===e.type?-1:1:e.name.localeCompare(t.name)).forEach(e=>{r+=t(e,0)}),console.log("Generated HTML length:",r.length),console.log("Generated HTML preview:",r.substring(0,1e3)),console.log("Number of tree-item buttons:",(r.match(/class="tree-item/g)||[]).length),console.log("Number of folder-children divs:",(r.match(/class="folder-children"/g)||[]).length),console.log("=== END BASIC TREE RENDERING ==="),r})(i)}\n                    </div>\n                </div>\n                <div class="main-content">\n                    <div class="file-toolbar">\n                        <div class="breadcrumbs" id="breadcrumbs"><span class="repo-root">${e} / ${t}</span></div>\n                        <div class="file-actions"><span class="branch-badge">${r.default_branch||"main"}</span></div>\n                    </div>\n                    <div id="file-display"></div>\n                </div>\n            </div>\n            \n            <script nonce="${s}">\n                const vscode = acquireVsCodeApi();\n                let activeElement = null;\n                \n                // Initialize event listeners when page loads\n                document.addEventListener('DOMContentLoaded', function() {\n                    console.log('DOM Content Loaded - Setting up event listeners');\n                    setupEventListeners();\n                });\n\n                // Also try to set up immediately in case DOMContentLoaded already fired\n                if (document.readyState === 'loading') {\n                    document.addEventListener('DOMContentLoaded', setupEventListeners);\n                } else {\n                    setupEventListeners();\n                }\n\n                function setupEventListeners() {\n                    console.log('Setting up event listeners');\n                    const fileTree = document.querySelector('.file-tree');\n                    if (!fileTree) {\n                        console.error('File tree not found');\n                        return;\n                    }\n\n                    // Log the initial tree structure\n                    try {\n                        console.log('File tree HTML:', fileTree.innerHTML.substring(0, 500) + '...');\n                    } catch (e) {\n                        console.log('Could not read file tree innerHTML');\n                    }\n                    console.log('Tree items found:', document.querySelectorAll('.tree-item').length);\n                    console.log('Folder items found:', document.querySelectorAll('.tree-item.folder').length);\n                    console.log('File items found:', document.querySelectorAll('.tree-item.file').length);\n                    console.log('Folder children divs found:', document.querySelectorAll('.folder-children').length);\n\n                    // Attach direct click handlers to each rendered button to avoid delegation edge cases\n                    attachClickHandlers();\n                }\n\n                function attachClickHandlers() {\n                    const buttons = Array.from(document.querySelectorAll('.tree-item'));\n                    console.log('Attaching click handlers to', buttons.length, 'tree-item buttons');\n                    buttons.forEach(btn => {\n                        // Avoid adding duplicate listeners\n                        // don't use TypeScript-only casts inside the emitted webview script\n                        if (btn && btn.__hasTreeHandler) return;\n                        try { btn.__hasTreeHandler = true; } catch (e) { /* ignore */ }\n\n                        btn.addEventListener('click', (e) => {\n                            try {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const path = btn.getAttribute('data-path');\n                                const type = btn.getAttribute('data-type');\n                                const folderName = btn.getAttribute('data-folder-name');\n                                console.log('tree-item clicked', { path, type, folderName });\n                                if (type === 'folder') {\n                                    toggleFolder(btn);\n                                } else if (type === 'file') {\n                                    openFile(path, btn);\n                                }\n                            } catch (err) {\n                                console.error('Error in tree-item click handler:', err);\n                            }\n                        });\n                    });\n                }\n                \n                function toggleFolder(element, event) {\n                    if (event) {\n                        try { event.stopPropagation(); } catch (e) {}\n                        try { event.preventDefault(); } catch (e) {}\n                    }\n\n                    console.log('=== FOLDER TOGGLE ===');\n\n                    const folderName = element.getAttribute('data-folder-name');\n                    console.log('Toggling folder:', folderName);\n\n                    if (!folderName) {\n                        console.error('No folder name found');\n                        return;\n                    }\n\n                    // Find the folder children div by ID\n                    const folderDiv = document.getElementById('folder-' + folderName);\n                    console.log('Looking for folder div with id:', 'folder-' + folderName);\n                    console.log('Found folder div:', !!folderDiv);\n\n                    if (folderDiv) {\n                        // Use classList to toggle visibility reliably\n                        const isShown = folderDiv.classList.contains('show');\n                        if (!isShown) {\n                            folderDiv.classList.add('show');\n                            element.classList.add('expanded');\n                            console.log('✅ EXPANDED folder:', folderName);\n                        } else {\n                            folderDiv.classList.remove('show');\n                            element.classList.remove('expanded');\n                            console.log('✅ COLLAPSED folder:', folderName);\n                        }\n                    } else {\n                        console.error('❌ Could not find folder div for:', folderName);\n                        // Debug: list all folder divs\n                        const allFolders = document.querySelectorAll('[id^="folder-"]');\n                        console.log('Available folder divs:', allFolders.length);\n                        allFolders.forEach(function(folder, index) {\n                            console.log('  ' + index + ': id="' + folder.id + '"');\n                        });\n\n                        // Try to find the element by different means\n                        const allElements = document.querySelectorAll('.folder-children');\n                        console.log('All .folder-children elements:', allElements.length);\n                        allElements.forEach(function(el, index) {\n                            try {\n                                console.log('  ' + index + ': id="' + el.id + '", display="' + el.style.display + '"');\n                            } catch (e) {\n                                console.log('  ' + index + ': id="' + el.id + '", display="(unavailable)"');\n                            }\n                        });\n                    }\n\n                    console.log('=== END FOLDER TOGGLE ===');\n                }\n                \n                function openFile(path, element) {\n                    const type = element.getAttribute('data-type');\n                    console.log('Opening file:', path, 'Type:', type);\n                    \n                    // Don't open folders as files\n                    if (type === 'folder') {\n                        console.log('Ignoring folder click - should be handled by toggleFolder');\n                        return;\n                    }\n                    \n                    // Clear previous selection\n                    if (activeElement) {\n                        activeElement.classList.remove('active');\n                    }\n                    \n                    // Mark current file as active\n                    element.classList.add('active');\n                    activeElement = element;\n                    \n                    // Show loading\n                    document.getElementById('file-display').innerHTML = \n                        '<div class="loading">' +\n                            '<span>Loading ' + path + '...</span>' +\n                        '</div>';\n                    \n                    // Request file content with type information\n                    vscode.postMessage({\n                        command: 'openFile',\n                        path: path,\n                        type: type\n                    });\n                }\n                \n                // Handle messages from extension\n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    console.log('Received message:', message);\n                    \n                    if (message.command === 'showFileContent') {\n                        const lines = message.content.split('\\n');\n                        const fileDisplayElement = document.getElementById('file-display');\n                        if (fileDisplayElement) {\n                            updateBreadcrumbs(message.path);\n                            const numberedRows = lines.map(function(line, i){\n                                return '<tr><td id="L'+(i+1)+'" class="blob-num">'+(i+1)+'</td><td class="blob-code"><span class="blob-code-inner">'+escapeHtml(line)+'</span></td></tr>';\n                            }).join('');\n                            fileDisplayElement.innerHTML = ''\n                              + '<div class="Box">'\n                              +   '<div class="Box-header">'\n                              +     '<span class="file-info">'+escapeHtml(message.path.split('/').pop()||'')+'</span>'\n                              +     '<span>'+lines.length+' lines ('+Math.round((message.size||0)/1024)+' KB)</span>'\n                              +     '<span style="margin-left:auto; color:var(--color-fg-muted);">UTF-8</span>'\n                              +   '</div>'\n                              +   '<div class="blob-wrapper"><table><tbody>'+numberedRows+'</tbody></table></div>'\n                              + '</div>';\n                        }\n                    } else if (message.command === 'showError') {\n                        document.getElementById('file-display').innerHTML = \n                            '<div class="error">' +\n                                '<strong>Error:</strong> ' + message.error +\n                            '</div>';\n                    }\n                });\n                \n                function escapeHtml(text) {\n                    const div = document.createElement('div');\n                    div.textContent = text;\n                    return div.innerHTML;\n                }\n                function updateBreadcrumbs(path) {\n                    const bc = document.getElementById('breadcrumbs');\n                    if (!bc) return;\n                    const segments = path.split('/').filter(Boolean);\n                    let html = '<span class="repo-root">${e} / ${t}</span>';\n                    let accum = '';\n                    segments.forEach(seg => {\n                        accum = accum ? accum + '/' + seg : seg;\n                        html += ' <span class="sep">/</span> <span>'+escapeHtml(seg)+'</span>';\n                    });\n                    bc.innerHTML = html;\n                }\n                // Initial welcome\n                document.getElementById('file-display').innerHTML = '<div class="welcome-screen"><div class="welcome-icon">📁</div><div class="welcome-title">${e}/${t}</div><div class="welcome-subtitle">Select a file to view its contents</div></div>';\n            <\/script>\n        </body>\n        </html>\n    `}},317:e=>{"use strict";e.exports=require("child_process")},346:e=>{e.exports=function e(t,r,n,o){if("function"!=typeof n)throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce(function(r,n){return e.bind(null,t,n,r,o)},n)():Promise.resolve().then(function(){return t.registry[r]?t.registry[r].reduce(function(e,t){return t.hook.bind(null,e,o)},n)():n(o)})}},398:e=>{"use strict";e.exports=require("vscode")},423:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(896),s=n(r(753)).default("@kwsites/file-exists");t.exists=function(e,r=t.READABLE){return function(e,t,r){s("checking %s",e);try{const n=o.statSync(e);return n.isFile()&&t?(s("[OK] path represents a file"),!0):n.isDirectory()&&r?(s("[OK] path represents a directory"),!0):(s("[FAIL] path represents something other than a file or directory"),!1)}catch(e){if("ENOENT"===e.code)return s("[FAIL] path is not accessible: %o",e),!1;throw s("[FATAL] %o",e),e}}(e,(r&t.FILE)>0,(r&t.FOLDER)>0)},t.FILE=1,t.FOLDER=2,t.READABLE=t.FILE+t.FOLDER},447:e=>{e.exports=function(e,t,r){if(e.registry[t]){var n=e.registry[t].map(function(e){return e.orig}).indexOf(r);-1!==n&&e.registry[t].splice(n,1)}}},458:(e,t,r)=>{"use strict";function n(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}r.r(t),r.d(t,{Octokit:()=>ee});var o=r(811);function s(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(n=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(t[n])?Object.assign(r,{[n]:t[n]}):n in e?r[n]=s(e[n],t[n]):Object.assign(r,{[n]:t[n]})}),r}function i(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function a(e,t,r){if("string"==typeof t){let[e,n]=t.split(" ");r=Object.assign(n?{method:e,url:n}:{url:e},r)}else r=Object.assign({},t);var n;r.headers=(n=r.headers)?Object.keys(n).reduce((e,t)=>(e[t.toLowerCase()]=n[t],e),{}):{},i(r),i(r.headers);const o=s(e||{},r);return"/graphql"===r.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter(e=>!o.mediaType.previews.includes(e)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),o}const c=/\{[^{}}]+\}/g;function l(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function p(e,t){const r={__proto__:null};for(const n of Object.keys(e))-1===t.indexOf(n)&&(r[n]=e[n]);return r}function d(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function u(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function g(e,t,r){return t="+"===e||"#"===e?d(t):u(t),r?u(r)+"="+t:t}function m(e){return null!=e}function h(e){return";"===e||"&"===e||"?"===e}function f(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,n,o){if(n){let e="";const o=[];if(-1!==r.indexOf(n.charAt(0))&&(e=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(r){var n=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);o.push(function(e,t,r,n){var o=e[r],s=[];if(m(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),n&&"*"!==n&&(o=o.substring(0,parseInt(n,10))),s.push(g(t,o,h(t)?r:""));else if("*"===n)Array.isArray(o)?o.filter(m).forEach(function(e){s.push(g(t,e,h(t)?r:""))}):Object.keys(o).forEach(function(e){m(o[e])&&s.push(g(t,o[e],e))});else{const e=[];Array.isArray(o)?o.filter(m).forEach(function(r){e.push(g(t,r))}):Object.keys(o).forEach(function(r){m(o[r])&&(e.push(u(r)),e.push(g(t,o[r].toString())))}),h(t)?s.push(u(r)+"="+e.join(",")):0!==e.length&&s.push(e.join(","))}else";"===t?m(o)&&s.push(u(r)):""!==o||"&"!==t&&"?"!==t?""===o&&s.push(""):s.push(u(r)+"=");return s}(t,e,n[1],n[2]||n[3]))}),e&&"+"!==e){var s=",";return"?"===e?s="&":"#"!==e&&(s=e),(0!==o.length?e:"")+o.join(s)}return o.join(",")}return d(o)}),"/"===e?e:e.replace(/\/$/,"")}function b(e){let t,r=e.method.toUpperCase(),n=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s=p(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const t=e.match(c);return t?t.map(l).reduce((e,t)=>e.concat(t),[]):[]}(n);var a;n=(a=n,{expand:f.bind(null,a)}).expand(s),/^http/.test(n)||(n=e.baseUrl+n);const d=p(s,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),n.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=o.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map(t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(r)?n=function(e,t){const r=/\?/.test(e)?"&":"?",n=Object.keys(t);return 0===n.length?e:e+r+n.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(n,d):"data"in d?t=d.data:Object.keys(d).length&&(t=d),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:n,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function v(e,t,r){return b(a(e,t,r))}const w=function e(t,r){const n=a(t,r),o=v.bind(null,n);return Object.assign(o,{DEFAULTS:n,defaults:e.bind(null,n),merge:a.bind(null,n),parse:b})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/9.0.6 ${n()}`},mediaType:{format:""}});class y extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var T=r(519),E=r.n(T);const k=E()(e=>console.warn(e)),_=E()(e=>console.warn(e));class x extends Error{constructor(e,t,r){let n;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"headers"in r&&void 0!==r.headers&&(n=r.headers),"response"in r&&(this.response=r.response,n=r.response.headers);const o=Object.assign({},r.request);r.request.headers.authorization&&(o.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o,Object.defineProperty(this,"code",{get:()=>(k(new y("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t)}),Object.defineProperty(this,"headers",{get:()=>(_(new y("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),n||{})})}}function C(e){const t=e.request&&e.request.log?e.request.log:console,r=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let n,o,s={},{fetch:i}=globalThis;if(e.request?.fetch&&(i=e.request.fetch),!i)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return i(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async i=>{o=i.url,n=i.status;for(const e of i.headers)s[e[0]]=e[1];if("deprecation"in s){const r=s.link&&s.link.match(/<([^<>]+)>; rel="deprecation"/),n=r&&r.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${s.sunset}${n?`. See ${n}`:""}`)}if(204!==n&&205!==n){if("HEAD"===e.method){if(n<400)return;throw new x(i.statusText,n,{response:{url:o,status:n,headers:s,data:void 0},request:e})}if(304===n)throw new x("Not modified",n,{response:{url:o,status:n,headers:s,data:await S(i)},request:e});if(n>=400){const t=await S(i),r=new x(function(e){if("string"==typeof e)return e;let t;return t="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${t}`:`${e.message}${t}`:`Unknown error: ${JSON.stringify(e)}`}(t),n,{response:{url:o,status:n,headers:s,data:t},request:e});throw r}return r?await S(i):i.body}}).then(e=>({status:n,url:o,headers:s,data:e})).catch(t=>{if(t instanceof x)throw t;if("AbortError"===t.name)throw t;let r=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?r=t.cause.message:"string"==typeof t.cause&&(r=t.cause)),new x(r,500,{request:e})})}async function S(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():function(e){return e.arrayBuffer()}(e)}const P=function e(t,r){const n=t.defaults(r);return Object.assign(function(t,r){const o=n.merge(t,r);if(!o.request||!o.request.hook)return C(n.parse(o));const s=(e,t)=>C(n.parse(n.merge(e,t)));return Object.assign(s,{endpoint:n,defaults:e.bind(null,n)}),o.request.hook(s,o)},{endpoint:n,defaults:e.bind(null,n)})}(w,{headers:{"user-agent":`octokit-request.js/8.4.1 ${n()}`}});var O=class extends Error{constructor(e,t,r){super("Request failed due to following response errors:\n"+r.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=r,this.name="GraphqlResponseError",this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},A=["method","baseUrl","url","headers","request","query","mediaType"],R=["query","method","url"],F=/\/api\/v3\/?$/;function G(e,t){const r=e.defaults(t);return Object.assign((e,t)=>function(e,t,r){if(r){if("string"==typeof t&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in r)if(R.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const n="string"==typeof t?Object.assign({query:t},r):t,o=Object.keys(n).reduce((e,t)=>A.includes(t)?(e[t]=n[t],e):(e.variables||(e.variables={}),e.variables[t]=n[t],e),{}),s=n.baseUrl||e.endpoint.DEFAULTS.baseUrl;return F.test(s)&&(o.url=s.replace(F,"/api/graphql")),e(o).then(e=>{if(e.data.errors){const t={};for(const r of Object.keys(e.headers))t[r]=e.headers[r];throw new O(o,t,e.data)}return e.data.data})}(r,e,t),{defaults:G.bind(null,r),endpoint:r.endpoint})}G(P,{headers:{"user-agent":`octokit-graphql.js/7.1.1 ${n()}`},method:"POST",url:"/graphql"});const D=/^v1\./,U=/^ghs_/,I=/^ghu_/;async function L(e){const t=3===e.split(/\./).length,r=D.test(e)||U.test(e),n=I.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":n?"user-to-server":"oauth"}}async function $(e,t,r,n){const o=t.endpoint.merge(r,n);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}const j=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(L.bind(null,e),{hook:$.bind(null,e)})};var M="5.2.2",B=()=>{},q=console.warn.bind(console),z=console.error.bind(console),N=`octokit-core.js/${M} ${n()}`,H=class{static{this.VERSION=M}static defaults(e){return class extends(this){constructor(...t){const r=t[0]||{};super("function"!=typeof e?Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null):e(r))}}}static{this.plugins=[]}static plugin(...e){const t=this.plugins;return class extends(this){static{this.plugins=t.concat(e.filter(e=>!t.includes(e)))}}}constructor(e={}){const t=new o.Collection,r={baseUrl:P.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var n;if(r.headers["user-agent"]=e.userAgent?`${e.userAgent} ${N}`:N,e.baseUrl&&(r.baseUrl=e.baseUrl),e.previews&&(r.mediaType.previews=e.previews),e.timeZone&&(r.headers["time-zone"]=e.timeZone),this.request=P.defaults(r),this.graphql=(n=this.request,G(n,{method:"POST",url:"/graphql"})).defaults(r),this.log=function(e={}){return"function"!=typeof e.debug&&(e.debug=B),"function"!=typeof e.info&&(e.info=B),"function"!=typeof e.warn&&(e.warn=q),"function"!=typeof e.error&&(e.error=z),e}(e.log),this.hook=t,e.authStrategy){const{authStrategy:r,...n}=e,o=r(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:n},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){const r=j(e.auth);t.wrap("request",r.hook),this.auth=r}else this.auth=async()=>({type:"unauthenticated"});const s=this.constructor;for(let t=0;t<s.plugins.length;++t)Object.assign(this,s.plugins[t](this,e))}};function V(e){e.hook.wrap("request",(t,r)=>{e.log.debug("request",r);const n=Date.now(),o=e.request.endpoint.parse(r),s=o.url.replace(r.baseUrl,"");return t(r).then(t=>(e.log.info(`${o.method} ${s} - ${t.status} in ${Date.now()-n}ms`),t)).catch(t=>{throw e.log.info(`${o.method} ${s} - ${t.status} in ${Date.now()-n}ms`),t})})}function W(e,t,r){const n="function"==typeof t?t.endpoint(r):e.request.endpoint(t,r),o="function"==typeof t?t:e.request,s=n.method,i=n.headers;let a=n.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,r=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],s=e.data[o];return e.data=s,void 0!==t&&(e.data.incomplete_results=t),void 0!==r&&(e.data.repository_selection=r),e.data.total_count=n,e}(await o({method:s,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function K(e,t,r,n){return"function"==typeof r&&(n=r,r=void 0),J(e,[],W(e,t,r)[Symbol.asyncIterator](),n)}function J(e,t,r,n){return r.next().then(o=>{if(o.done)return t;let s=!1;return t=t.concat(n?n(o.value,function(){s=!0}):o.value.data),s?t:J(e,t,r,n)})}function Y(e){return{paginate:Object.assign(K.bind(null,e),{iterator:W.bind(null,e)})}}V.VERSION="4.0.1",Object.assign(K,{iterator:W}),Y.VERSION="11.4.4-cjs.2";const Z=new Map;for(const[e,t]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(const[r,n]of Object.entries(t)){const[t,o,s]=n,[i,a]=t.split(/ /),c=Object.assign({method:i,url:a},o);Z.has(e)||Z.set(e,new Map),Z.get(e).set(r,{scope:e,methodName:r,endpointDefaults:c,decorations:s})}const Q={has:({scope:e},t)=>Z.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,r)=>(Object.defineProperty(e.cache,t,r),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...Z.get(e).keys()],set:(e,t,r)=>e.cache[t]=r,get({octokit:e,scope:t,cache:r},n){if(r[n])return r[n];const o=Z.get(t).get(n);if(!o)return;const{endpointDefaults:s,decorations:i}=o;return r[n]=i?function(e,t,r,n,o){const s=e.request.defaults(n);return Object.assign(function(...n){let i=s.endpoint.merge(...n);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),s(i);if(o.renamed){const[n,s]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${n}.${s}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=s.endpoint.merge(...n);for(const[n,s]of Object.entries(o.renamedParameters))n in i&&(e.log.warn(`"${n}" parameter is deprecated for "octokit.${t}.${r}()". Use "${s}" instead`),s in i||(i[s]=i[n]),delete i[n]);return s(i)}return s(...n)},s)}(e,t,n,s,i):e.request.defaults(s),r[n]}};function X(e){const t=function(e){const t={};for(const r of Z.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Q);return t}(e);return{...t,rest:t}}X.VERSION="13.3.2-cjs.1";var ee=H.plugin(V,X,Y).defaults({userAgent:"octokit-rest.js/20.1.2"})},474:e=>{"use strict";e.exports=require("node:events")},519:(e,t,r)=>{var n=r(587);function o(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function s(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}e.exports=n(o),e.exports.strict=n(s),o.proto=o(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return s(this)},configurable:!0})})},566:function(e,t,r){"use strict";var n,o=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=n(e),i=0;i<r.length;i++)"default"!==r[i]&&o(t,e,r[i]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.getCreateRepoWebviewContent=function(e,t,r){const n=e.asWebviewUri(a.Uri.joinPath(r,"resources","createRepo.css")),o=e.asWebviewUri(a.Uri.joinPath(r,"node_modules","@vscode/codicons","dist","codicon.css"));return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; font-src ${e.cspSource}; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${t}';">\n            <link href="${n}" rel="stylesheet">\n            <link href="${o}" rel="stylesheet" />\n            <title>Create a New Repository</title>\n        </head>\n        <body>\n            <div class="github-create-repo-bg">\n                <div class="container">\n                    <div class="github-create-repo">\n                        <div class="header">\n                            <i class="codicon codicon-repo"></i>\n                            <h1>Create a new repository</h1>\n                        </div>\n                        <p class="github-create-repo-desc">A repository contains all project files, including the revision history. Already have a project repository elsewhere?</p>\n                        <form class="github-create-repo-form">\n                            <div class="form-group">\n                                <label for="repoName">Repository name <span class="required">*</span></label>\n                                <div class="input-with-icon">\n                                    <i class="codicon codicon-repo"></i>\n                                    <input type="text" id="repoName" name="repoName" required placeholder="my-awesome-project">\n                                </div>\n                                <p class="description">Great repository names are short and memorable. Need inspiration? How about <strong>stellar-octo-guide</strong>?</p>\n                            </div>\n                            <div class="form-group">\n                                <label for="description">Description <span class="description">(optional)</span></label>\n                                <input type="text" id="description" name="description" placeholder="Short description of this repository">\n                            </div>\n                            <div class="form-group visibility-group">\n                                <div class="radio-option">\n                                    <input type="radio" id="public" name="visibility" value="public" checked>\n                                    <label for="public">\n                                        <i class="codicon codicon-globe"></i>\n                                        <strong>Public</strong>\n                                        <span class="description">Anyone on the internet can see this repository. You choose who can commit.</span>\n                                    </label>\n                                </div>\n                                <div class="radio-option">\n                                    <input type="radio" id="private" name="visibility" value="private">\n                                    <label for="private">\n                                        <i class="codicon codicon-lock"></i>\n                                        <strong>Private</strong>\n                                        <span class="description">You choose who can see and commit to this repository.</span>\n                                    </label>\n                                </div>\n                            </div>\n                            <div class="form-group">\n                                <label>Initialize this repository with:</label>\n                                <div class="checkbox-option">\n                                    <input type="checkbox" id="addReadme" name="addReadme" checked>\n                                    <label for="addReadme">Add a README file</label>\n                                    <p class="description">This is where you can write a long description for your project. <a href="#" onclick="return false;">Learn more about READMEs</a>.</p>\n                                </div>\n                            </div>\n                            <button id="createRepoBtn" class="github-create-repo-btn">\n                                <i class="codicon codicon-add"></i>\n                                Create repository\n                            </button>\n                            <div id="error-message" class="error-message"></div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <script nonce="${t}">\n                const vscode = acquireVsCodeApi();\n                const createRepoBtn = document.getElementById('createRepoBtn');\n                const repoNameInput = document.getElementById('repoName');\n                const descriptionInput = document.getElementById('description');\n                const publicRadio = document.getElementById('public');\n                const addReadmeCheckbox = document.getElementById('addReadme');\n                const errorMessage = document.getElementById('error-message');\n                \n                createRepoBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const repoName = repoNameInput.value;\n                    if (!repoName) {\n                        errorMessage.textContent = 'Repository name is required.';\n                        repoNameInput.focus();\n                        return;\n                    }\n                    errorMessage.textContent = '';\n                    createRepoBtn.disabled = true;\n                    createRepoBtn.innerHTML = '<i class="codicon codicon-sync codicon-spin"></i> Creating repository...';\n                    vscode.postMessage({\n                        command: 'createRepository',\n                        repoName: repoName,\n                        description: descriptionInput.value,\n                        isPrivate: !publicRadio.checked,\n                        initReadme: addReadmeCheckbox.checked\n                    });\n                });\n                \n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    if (message.command === 'creationFailed') {\n                        createRepoBtn.disabled = false;\n                        createRepoBtn.innerHTML = '<i class="codicon codicon-add"></i>Create repository';\n                    }\n                });\n            <\/script>\n        </body>\n        </html>\n    `},t.getRepoExplorerWebviewContent=function(e,t,r,n,o,s=""){const i=e.asWebviewUri(a.Uri.joinPath(r,"resources","createRepo.css"));return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${t}';">\n            <link href="${i}" rel="stylesheet">\n            <title>${o} Explorer</title>\n            <style>\n                body { font-family: var(--vscode-font-family); background: var(--vscode-editor-background); color: var(--vscode-editor-foreground); }\n                .container { max-width: 1200px; margin: 0 auto; padding: 20px; }\n                .header { display: flex; align-items: center; gap: 12px; margin-bottom: 20px; padding-bottom: 12px; border-bottom: 1px solid var(--vscode-panel-border); }\n                .header h1 { margin: 0; font-size: 24px; }\n                .breadcrumb { display: flex; gap: 8px; margin-bottom: 20px; }\n                .breadcrumb-item { color: var(--vscode-textLink-foreground); cursor: pointer; }\n                .breadcrumb-item:hover { text-decoration: underline; }\n                .breadcrumb-separator { color: var(--vscode-description-foreground); }\n                .repo-list { list-style: none; padding: 0; }\n                .repo-item { display: flex; align-items: center; gap: 12px; padding: 12px; border: 1px solid var(--vscode-panel-border); border-radius: 6px; margin-bottom: 8px; background: var(--vscode-panel-background); cursor: pointer; transition: all 0.2s; }\n                .repo-item:hover { border-color: var(--vscode-focusBorder); background: var(--vscode-toolbar-hoverBackground); }\n                .repo-item-icon { font-size: 16px; width: 20px; text-align: center; }\n                .repo-item-name { flex: 1; font-weight: 500; }\n                .repo-item-size { color: var(--vscode-description-foreground); font-size: 12px; }\n                .loading { text-align: center; padding: 40px; color: var(--vscode-description-foreground); }\n                .error { color: var(--vscode-errorForeground); padding: 20px; background: var(--vscode-inputValidation-errorBackground); border: 1px solid var(--vscode-inputValidation-errorBorder); border-radius: 6px; }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="header">\n                    <span class="codicon codicon-repo"></span>\n                    <h1>${n}/${o}</h1>\n                </div>\n                ${s?`<div class="breadcrumb">${s.split("/").map((e,t)=>`<span class="breadcrumb-item" data-path="${s.split("/").slice(0,t+1).join("/")}">${e}</span>${t<s.split("/").length-1?'<span class="breadcrumb-separator">/</span>':""}`).join("")}</div>`:""}\n                <div id="repo-explorer">\n                    <div class="loading">Loading repository contents...</div>\n                </div>\n            </div>\n            <script nonce="${t}">\n                const vscode = acquireVsCodeApi();\n                \n                // Handle breadcrumb navigation\n                document.addEventListener('click', function(e) {\n                    const breadcrumbItem = e.target.closest('.breadcrumb-item');\n                    if (breadcrumbItem) {\n                        const path = breadcrumbItem.getAttribute('data-path');\n                        vscode.postMessage({ command: 'navigate', path: path });\n                        e.preventDefault();\n                    }\n                });\n                \n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    if (message.command === 'updateExplorer') {\n                        document.getElementById('repo-explorer').innerHTML = message.html;\n                        \n                        // Add click handlers for items\n                        document.querySelectorAll('.repo-item[data-path]').forEach(item => {\n                            item.addEventListener('click', function() {\n                                const path = this.getAttribute('data-path');\n                                const type = this.getAttribute('data-type');\n                                if (type === 'dir') {\n                                    vscode.postMessage({ command: 'navigate', path: path });\n                                } else {\n                                    vscode.postMessage({ command: 'openFile', path: path });\n                                }\n                            });\n                        });\n                    }\n                });\n            <\/script>\n        </body>\n        </html>\n    `};const a=i(r(398))},573:e=>{"use strict";e.exports=require("node:buffer")},585:e=>{var t=1e3,r=60*t,n=60*r,o=24*n,s=7*o;function i(e,t,r,n){var o=t>=1.5*r;return Math.round(e/r)+" "+n+(o?"s":"")}e.exports=function(e,a){a=a||{};var c,l,p=typeof e;if("string"===p&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*n;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===p&&isFinite(e))return a.long?(c=e,(l=Math.abs(c))>=o?i(c,l,o,"day"):l>=n?i(c,l,n,"hour"):l>=r?i(c,l,r,"minute"):l>=t?i(c,l,t,"second"):c+" ms"):function(e){var s=Math.abs(e);return s>=o?Math.round(e/o)+"d":s>=n?Math.round(e/n)+"h":s>=r?Math.round(e/r)+"m":s>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},587:e=>{e.exports=function e(t,r){if(t&&r)return e(t)(r);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach(function(e){n[e]=t[e]}),n;function n(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];var n=t.apply(this,e),o=e[e.length-1];return"function"==typeof n&&n!==o&&Object.keys(o).forEach(function(e){n[e]=o[e]}),n}}},640:e=>{e.exports=function(e,t,r,n){var o=n;e.registry[r]||(e.registry[r]=[]),"before"===t&&(n=function(e,t){return Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))}),"after"===t&&(n=function(e,t){var r;return Promise.resolve().then(e.bind(null,t)).then(function(e){return o(r=e,t)}).then(function(){return r})}),"error"===t&&(n=function(e,t){return Promise.resolve().then(e.bind(null,t)).catch(function(e){return o(e,t)})}),e.registry[r].push({hook:n,orig:o})}},662:(e,t,r)=>{"use strict";var n,o,s,i=Object.create,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,p=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty,u=(e,t)=>function(){return e&&(t=(0,e[l(e)[0]])(e=0)),t},g=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},m=(e,t,r,n)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))d.call(e,o)||o===r||a(e,o,{get:()=>t[o],enumerable:!(n=c(t,o))||n.enumerable});return e},h=e=>m(a({},"__esModule",{value:!0}),e),f=u({"src/lib/errors/git-error.ts"(){n=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),b=u({"src/lib/errors/git-response-error.ts"(){f(),o=class extends n{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}});function v(...e){const t=new String(e);return s.set(t,e),t}function w(e){return e instanceof String&&s.has(e)}function y(e){return s.get(e)||[]}var T,E,k,_,x,C,S,P,O=u({"src/lib/args/pathspec.ts"(){s=new WeakMap}}),A=u({"src/lib/errors/git-construct-error.ts"(){f(),T=class extends n{constructor(e,t){super(void 0,t),this.config=e}}}}),R=u({"src/lib/errors/git-plugin-error.ts"(){f(),E=class extends n{constructor(e,t,r){super(e,r),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}}}}),F=u({"src/lib/errors/task-configuration-error.ts"(){f(),k=class extends n{constructor(e){super(void 0,e)}}}});function G(e){return"function"!=typeof e?S:e}function D(e){return"function"==typeof e&&e!==S}function U(e,t){const r=e.indexOf(t);return r<=0?[e,""]:[e.substr(0,r),e.substr(r+1)]}function I(e,t=0){return $(e)&&e.length>t?e[t]:void 0}function L(e,t=0){if($(e)&&e.length>t)return e[e.length-1-t]}function $(e){return!(!e||"number"!=typeof e.length)}function j(e="",t=!0,r="\n"){return e.split(r).reduce((e,r)=>{const n=t?r.trim():r;return n&&e.push(n),e},[])}function M(e,t){return j(e,!0).map(e=>t(e))}function B(e){return(0,x.exists)(e,x.FOLDER)}function q(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function z(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function N(e,t){if(Array.isArray(e)){const r=e.indexOf(t);r>=0&&e.splice(r,1)}else e.delete(t);return t}function H(e){return Array.isArray(e)?e:[e]}function V(e){return e.replace(/[\s-]+(.)/g,(e,t)=>t.toUpperCase())}function W(e){return H(e).map(String)}function K(e,t=0){if(null==e)return t;const r=parseInt(e,10);return isNaN(r)?t:r}function J(e,t){const r=[];for(let n=0,o=e.length;n<o;n++)r.push(t,e[n]);return r}function Y(e){return(Array.isArray(e)?_.Buffer.concat(e):e).toString("utf-8")}function Z(e,t){return Object.assign({},...t.map(t=>t in e?{[t]:e[t]}:{}))}function Q(e=0){return new Promise(t=>setTimeout(t,e))}function X(e){if(!1!==e)return e}var ee,te,re,ne,oe,se=u({"src/lib/utils/util.ts"(){_=r(573),x=r(926),C="\0",S=()=>{},P=Object.prototype.toString.call.bind(Object.prototype.toString)}});function ie(e,t,r){return t(e)?e:arguments.length>2?r:void 0}function ae(e,t){const r=w(e)?"string":typeof e;return/number|string|boolean/.test(r)&&(!t||!t.includes(r))}function ce(e){return!!e&&"[object Object]"===P(e)}function le(e){return"function"==typeof e}var pe,de,ue,ge,me,he=u({"src/lib/utils/argument-filters.ts"(){se(),O(),ee=e=>Array.isArray(e),te=e=>"string"==typeof e,re=e=>Array.isArray(e)&&e.every(te),ne=e=>te(e)||Array.isArray(e)&&e.every(te),oe=e=>null!=e&&!"number|boolean|function".includes(typeof e)&&(Array.isArray(e)||"string"==typeof e||"number"==typeof e.length)}}),fe=u({"src/lib/utils/exit-codes.ts"(){pe=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(pe||{})}}),be=u({"src/lib/utils/git-output-streams.ts"(){de=class e{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new e(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),ve=u({"src/lib/utils/line-parser.ts"(){ue=class{constructor(e,t){this.matches=[],this.parse=(e,t)=>(this.resetMatches(),!!this._regExp.every((t,r)=>this.addMatch(t,r,e(r)))&&!1!==this.useMatches(t,this.prepareMatches())),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,r){const n=r&&e.exec(r);return n&&this.pushMatch(t,n),!!n}pushMatch(e,t){this.matches.push(...t.slice(1))}},ge=class extends ue{addMatch(e,t,r){return/^remote:\s/.test(String(r))&&super.addMatch(e,t,r)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function we(...e){const t=process.cwd(),r=Object.assign({baseDir:t,...me},...e.filter(e=>"object"==typeof e&&e));return r.baseDir=r.baseDir||t,r.trimmed=!0===r.trimmed,r}var ye=u({"src/lib/utils/simple-git-options.ts"(){me={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function Te(e,t=[]){return ce(e)?Object.keys(e).reduce((t,r)=>{const n=e[r];if(w(n))t.push(n);else if(ae(n,["boolean"]))t.push(r+"="+n);else if(Array.isArray(n))for(const e of n)ae(e,["string","number"])||t.push(r+"="+e);else t.push(r);return t},t):t}function Ee(e,t=0,r=!1){const n=[];for(let r=0,o=t<0?e.length:t;r<o;r++)"string|number".includes(typeof e[r])&&n.push(String(e[r]));return Te(ke(e),n),r||n.push(...function(e){const t="function"==typeof L(e);return ie(L(e,t?1:0),ee,[])}(e)),n}function ke(e){const t=le(L(e));return ie(L(e,t?1:0),ce)}function _e(e,t=!0){const r=G(L(e));return t||D(r)?r:void 0}var xe=u({"src/lib/utils/task-options.ts"(){he(),se(),O()}});function Ce(e,t){return e(t.stdOut,t.stdErr)}function Se(e,t,r,n=!0){return H(r).forEach(r=>{for(let o=j(r,n),s=0,i=o.length;s<i;s++){const r=(e=0)=>{if(!(s+e>=i))return o[s+e]};t.some(({parse:t})=>t(r,e))}}),e}var Pe=u({"src/lib/utils/task-parser.ts"(){se()}}),Oe={};g(Oe,{ExitCodes:()=>pe,GitOutputStreams:()=>de,LineParser:()=>ue,NOOP:()=>S,NULL:()=>C,RemoteLineParser:()=>ge,append:()=>q,appendTaskOptions:()=>Te,asArray:()=>H,asCamelCase:()=>V,asFunction:()=>G,asNumber:()=>K,asStringArray:()=>W,bufferToString:()=>Y,callTaskParser:()=>Ce,createInstanceConfig:()=>we,delay:()=>Q,filterArray:()=>ee,filterFunction:()=>le,filterHasLength:()=>oe,filterPlainObject:()=>ce,filterPrimitives:()=>ae,filterString:()=>te,filterStringArray:()=>re,filterStringOrStringArray:()=>ne,filterType:()=>ie,first:()=>I,folderExists:()=>B,forEachLineWithContent:()=>M,getTrailingOptions:()=>Ee,including:()=>z,isUserFunction:()=>D,last:()=>L,objectToString:()=>P,orVoid:()=>X,parseStringResponse:()=>Se,pick:()=>Z,prefixedArray:()=>J,remove:()=>N,splitOn:()=>U,toLinesWithContent:()=>j,trailingFunctionArgument:()=>_e,trailingOptionsArgument:()=>ke});var Ae,Re,Fe,Ge=u({"src/lib/utils/index.ts"(){he(),fe(),be(),ve(),ye(),xe(),Pe(),se()}}),De={};function Ue(e){switch(e){case"bare":return Le();case"root":return Ie()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:Re,parser:Fe}}function Ie(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:Re,parser:e=>/^\.(git)?$/.test(e.trim())}}function Le(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:Re,parser:Fe}}g(De,{CheckRepoActions:()=>Ae,checkIsBareRepoTask:()=>Le,checkIsRepoRootTask:()=>Ie,checkIsRepoTask:()=>Ue});var $e,je,Me,Be,qe,ze=u({"src/lib/tasks/check-is-repo.ts"(){Ge(),Ae=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Ae||{}),Re=({exitCode:e},t,r,n)=>{if(128===e&&function(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}(t))return r(Buffer.from("false"));n(t)},Fe=e=>"true"===e.trim()}}),Ne=u({"src/lib/responses/CleanSummary.ts"(){Ge(),$e=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},je=/^[a-z]+\s*/i,Me=/^[a-z]+\s+[a-z]+\s*/i,Be=/\/$/}}),He={};function Ve(e){return{commands:qe,format:"empty",parser:e}}function We(e){return{commands:qe,format:"empty",parser(){throw"string"==typeof e?new k(e):e}}}function Ke(e,t=!1){return{commands:e,format:"utf-8",parser:e=>t?String(e).trim():e}}function Je(e){return{commands:e,format:"buffer",parser:e=>e}}function Ye(e){return"buffer"===e.format}function Ze(e){return"empty"===e.format||!e.commands.length}g(He,{EMPTY_COMMANDS:()=>qe,adhocExecTask:()=>Ve,configurationErrorTask:()=>We,isBufferTask:()=>Ye,isEmptyTask:()=>Ze,straightThroughBufferTask:()=>Je,straightThroughStringTask:()=>Ke});var Qe,Xe,et,tt,rt,nt=u({"src/lib/tasks/task.ts"(){F(),qe=[]}}),ot={};function st(e,t){const{cleanMode:r,options:n,valid:o}=function(e){let t,r=[],n={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(e=>{var o;!function(e){return"f"===e||"n"===e}(e)?n.options=n.options&&(o=r[r.length]=`-${e}`,/^-[a-z]$/i.test(o)&&rt.has(o.charAt(1))):(t=e,n.cleanMode=!0)}),{cleanMode:t,options:r,valid:n}}(e);return r?o.options?(n.push(...t),n.some(ct)?We(Qe):it(r,n)):We(et+JSON.stringify(e)):We(Xe)}function it(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser:t=>function(e,t){const r=new $e(e),n=e?Me:je;return j(t).forEach(e=>{const t=e.replace(n,"");r.paths.push(t),(Be.test(t)?r.folders:r.files).push(t)}),r}("n"===e,t)}}function at(e){return Array.isArray(e)&&e.every(e=>rt.has(e))}function ct(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:"--interactive"===e}g(ot,{CONFIG_ERROR_INTERACTIVE_MODE:()=>Qe,CONFIG_ERROR_MODE_REQUIRED:()=>Xe,CONFIG_ERROR_UNKNOWN_OPTION:()=>et,CleanOptions:()=>tt,cleanTask:()=>it,cleanWithOptionsTask:()=>st,isCleanOptionsArray:()=>at});var lt,pt=u({"src/lib/tasks/clean.ts"(){Ne(),Ge(),nt(),Qe="Git clean interactive mode is not supported",Xe='Git clean mode parameter ("n" or "f") is required',et="Git clean unknown option found in: ",tt=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(tt||{}),rt=new Set(["i",...W(Object.values(tt))])}});function dt(e){return e.replace(/^(file):/,"")}function*ut(e,t=null){const r=e.split("\0");for(let e=0,n=r.length-1;e<n;){const n=dt(r[e++]);let o=r[e++],s=t;if(o.includes("\n")){const e=U(o,"\n");s=e[0],o=e[1]}yield{file:n,key:s,value:o}}}var gt,mt=u({"src/lib/responses/ConfigList.ts"(){Ge(),lt=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){const t=L(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,r){const n=this.addFile(e);n.hasOwnProperty(t)?Array.isArray(n[t])?n[t].push(r):n[t]=[n[t],r]:n[t]=r,this._all=void 0}}}});function ht(e,t){return"string"==typeof e&&gt.hasOwnProperty(e)?e:t}var ft,bt,vt,wt,yt,Tt,Et=u({"src/lib/tasks/config.ts"(){mt(),Ge(),gt=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(gt||{})}}),kt=u({"src/lib/tasks/diff-name-status.ts"(){ft=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(ft||{}),bt=new Set(Object.values(ft))}});function _t(...e){return(new Tt).param(...e)}var xt,Ct,St=u({"src/lib/tasks/grep.ts"(){Ge(),nt(),vt=["-h"],wt=Symbol("grepQuery"),Tt=class{constructor(){this[yt]=[]}*[(yt=wt,Symbol.iterator)](){for(const e of this[wt])yield e}and(...e){return e.length&&this[wt].push("--and","(",...J(e,"-e"),")"),this}param(...e){return this[wt].push(...J(e,"-e")),this}}}}),Pt={};function Ot(e,t){const r=["reset"];return Rt(e)&&r.push(`--${e}`),r.push(...t),Ke(r)}function At(e){if(Rt(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Rt(e){return Ct.includes(e)}g(Pt,{ResetMode:()=>xt,getResetMode:()=>At,resetTask:()=>Ot});var Ft=u({"src/lib/tasks/reset.ts"(){nt(),xt=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(xt||{}),Ct=Array.from(Object.values(xt))}}),Gt={};g(Gt,{CheckRepoActions:()=>Ae,CleanOptions:()=>tt,DiffNameStatus:()=>ft,GitConfigScope:()=>gt,GitConstructError:()=>T,GitError:()=>n,GitPluginError:()=>E,GitResponseError:()=>o,ResetMode:()=>xt,TaskConfigurationError:()=>k,grepQueryBuilder:()=>_t,pathspec:()=>v});var Dt=u({"src/lib/api.ts"(){O(),A(),f(),R(),b(),F(),ze(),pt(),Et(),kt(),St(),Ft()}}),Ut=u({"src/lib/plugins/abort-plugin.ts"(){R()}});var It,Lt,$t=u({"src/lib/plugins/block-unsafe-operations-plugin.ts"(){R()}}),jt=u({"src/lib/plugins/command-config-prefixing-plugin.ts"(){Ge()}});var Mt,Bt,qt=u({"src/lib/plugins/completion-detection.plugin.ts"(){It=r(100),Ge(),Lt=(0,It.deferred)().promise}});function zt(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function Nt(e,t){if(e.length<1||e.length>2)throw new E(void 0,"binary",Mt);if(e.some(zt)){if(!t)throw new E(void 0,"binary",Bt);console.warn(Bt)}const[r,n]=e;return{binary:r,prefix:n}}var Ht=u({"src/lib/plugins/custom-binary.plugin.ts"(){R(),Ge(),Mt="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",Bt="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option"}});function Vt(e){return!(!e.exitCode||!e.stdErr.length)}function Wt(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function Kt(e=!1,t=Vt,r=Wt){return(n,o)=>!e&&n||!t(o)?n:r(o)}function Jt(e){return{type:"task.error",action(t,r){const o=e(t.error,{stdErr:r.stdErr,stdOut:r.stdOut,exitCode:r.exitCode});return Buffer.isBuffer(o)?{error:new n(void 0,o.toString("utf-8"))}:{error:o}}}}var Yt,Zt,Qt,Xt=u({"src/lib/plugins/error-detection.plugin.ts"(){f()}}),er=u({"src/lib/plugins/plugin-store.ts"(){Yt=r(474),Ge(),Zt=class{constructor(){this.plugins=new Set,this.events=new Yt.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){const r=q(this.plugins,{type:e,action:t});return()=>this.plugins.delete(r)}add(e){const t=[];return H(e).forEach(e=>e&&this.plugins.add(q(t,e))),()=>{t.forEach(e=>this.plugins.delete(e))}}exec(e,t,r){let n=t;const o=Object.freeze(Object.create(r));for(const t of this.plugins)t.type===e&&(n=t.action(n,o));return n}}}}),tr=u({"src/lib/plugins/progress-monitor-plugin.ts"(){Ge()}}),rr=u({"src/lib/plugins/simple-git-plugin.ts"(){}}),nr=u({"src/lib/plugins/spawn-options-plugin.ts"(){Ge()}}),or=u({"src/lib/plugins/timout-plugin.ts"(){R()}}),sr=u({"src/lib/plugins/index.ts"(){Ut(),$t(),jt(),qt(),Ht(),Xt(),er(),tr(),rr(),nr(),or()}}),ir=u({"src/lib/plugins/suffix-paths.plugin.ts"(){O()}});function ar(e,t,r){return t&&String(t).replace(/\s*/,"")?(n,...o)=>{e(`%s ${n}`,t,...o),r&&r(n,...o)}:r?(t,...n)=>{e(t,...n),r(t,...n)}:e}function cr(e,t,r,n=function(){return(0,Qt.default)("simple-git")}()){const o=e&&`[${e}]`||"",s=[],i="string"==typeof t?n.extend(t):t,a=function(e,t,{namespace:r}){if("string"==typeof e)return e;const n=t&&t.namespace||"";return n.startsWith(r)?n.substr(r.length+1):n||r}(ie(t,te),i,n);return function t(r){const s=r&&`[${r}]`||"",a=i&&ar(i,s)||S,l=ar(n,`${o} ${s}`,a);return Object.assign(i?a:l,{label:e,sibling:c,info:l,step:t})}(r);function c(t,r){return q(s,cr(e,a.replace(/^[^:]+/,t),r,n))}}var lr,pr,dr,ur=u({"src/lib/git-logger.ts"(){var e,t;t=null!=(e=r(753))?i(p(e)):{},Qt=m(e&&e.__esModule?t:a(t,"default",{value:e,enumerable:!0}),e),Ge(),Qt.default.formatters.L=e=>String(oe(e)?e.length:"-"),Qt.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):P(e)}}),gr=u({"src/lib/runners/tasks-pending-queue.ts"(){f(),ur(),lr=class e{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(t){const r=e.getName(t.commands[0]);return{task:t,logger:cr(this.logLabel,r),name:r}}push(e){const t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(const[t,{logger:r}]of Array.from(this._queue.entries()))t===e.task?(r.info("Failed %o",e),r("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):r.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(0!==this._queue.size)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){const t=this.withProgress(e);if(!t)throw new n(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(t="empty"){return`task:${t}:${++e.counter}`}static{this.counter=0}}}});function mr(e,t){return{method:I(e.commands)||"",commands:t}}function hr(e,t,r,n){return o=>{r("%s received %L bytes",t,o),n("%B",o),e.push(o)}}var fr,br=u({"src/lib/runners/git-executor-chain.ts"(){pr=r(317),f(),nt(),Ge(),gr(),dr=class{constructor(e,t,r){this._executor=e,this._scheduler=t,this._plugins=r,this._chain=Promise.resolve(),this._queue=new lr}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}async attemptTask(e){const t=await this._scheduler.next(),r=()=>this._queue.complete(e);try{const{logger:t}=this._queue.attempt(e);return await(Ze(e)?this.attemptEmptyTask(e,t):this.attemptRemoteTask(e,t))}catch(t){throw this.onFatalException(e,t)}finally{r(),t()}}onFatalException(e,t){const r=t instanceof n?Object.assign(t,{task:e}):new n(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(r),r}async attemptRemoteTask(e,t){const r=this._plugins.exec("spawn.binary","",mr(e,e.commands)),n=this._plugins.exec("spawn.args",[...e.commands],mr(e,e.commands)),o=await this.gitResponse(e,r,n,this.outputHandler,t.step("SPAWN")),s=await this.handleTaskData(e,n,o,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),Ye(e)?Ce(e.parser,s):Ce(e.parser,s.asStrings())}async attemptEmptyTask(e,t){return t("empty task bypassing child process to call to task's parser"),e.parser(this)}handleTaskData(e,t,r,n){const{exitCode:o,rejection:s,stdOut:i,stdErr:a}=r;return new Promise((c,l)=>{n("Preparing to handle process response exitCode=%d stdOut=",o);const{error:p}=this._plugins.exec("task.error",{error:s},{...mr(e,t),...r});return p&&e.onError?(n.info("exitCode=%s handling with custom error handler"),e.onError(r,p,e=>{n.info("custom error handler treated as success"),n("custom error returned a %s",P(e)),c(new de(Array.isArray(e)?Buffer.concat(e):e,Buffer.concat(a)))},l)):p?(n.info("handling as error: exitCode=%s stdErr=%s rejection=%o",o,a.length,s),l(p)):(n.info("retrieving task output complete"),void c(new de(Buffer.concat(i),Buffer.concat(a))))})}async gitResponse(e,t,r,n,o){const s=o.sibling("output"),i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},mr(e,e.commands));return new Promise(a=>{const c=[],l=[];o.info("%s %o",t,r),o("%O",i);let p=this._beforeSpawn(e,r);if(p)return a({stdOut:c,stdErr:l,exitCode:9901,rejection:p});this._plugins.exec("spawn.before",void 0,{...mr(e,r),kill(e){p=e||p}});const d=(0,pr.spawn)(t,r,i);d.stdout.on("data",hr(c,"stdOut",o,s.step("stdOut"))),d.stderr.on("data",hr(l,"stdErr",o,s.step("stdErr"))),d.on("error",function(e,t){return r=>{t("[ERROR] child process exception %o",r),e.push(Buffer.from(String(r.stack),"ascii"))}}(l,o)),n&&(o("Passing child process stdOut/stdErr to custom outputHandler"),n(t,d.stdout,d.stderr,[...r])),this._plugins.exec("spawn.after",void 0,{...mr(e,r),spawned:d,close(e,t){a({stdOut:c,stdErr:l,exitCode:e,rejection:p||t})},kill(e){d.killed||(p=e,d.kill("SIGINT"))}})})}_beforeSpawn(e,t){let r;return this._plugins.exec("spawn.before",void 0,{...mr(e,t),kill(e){r=e||r}}),r}}}}),vr={};g(vr,{GitExecutor:()=>fr});var wr=u({"src/lib/runners/git-executor.ts"(){br(),fr=class{constructor(e,t,r){this.cwd=e,this._scheduler=t,this._plugins=r,this._chain=new dr(this,this._scheduler,this._plugins)}chain(){return new dr(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});var yr=u({"src/lib/task-callback.ts"(){b(),Ge()}});function Tr(e,t){return Ve(r=>{if(!B(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||r).cwd=e})}var Er=u({"src/lib/tasks/change-working-directory.ts"(){Ge(),nt()}});function kr(e){const t=["checkout",...e];return"-b"===t[1]&&t.includes("-B")&&(t[1]=N(t,"-B")),Ke(t)}var _r,xr,Cr=u({"src/lib/tasks/checkout.ts"(){Ge(),nt()}}),Sr=u({"src/lib/tasks/count-objects.ts"(){Ge(),_r=new ue(/([a-z-]+): (\d+)$/,(e,[t,r])=>{const n=V(t);e.hasOwnProperty(n)&&(e[n]=K(r))})}});function Pr(e){return Se({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},xr,e)}var Or=u({"src/lib/parsers/parse-commit.ts"(){Ge(),xr=[new ue(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,r,n])=>{e.branch=t,e.commit=n,e.root=!!r}),new ue(/\s*Author:\s(.+)/i,(e,[t])=>{const r=t.split("<"),n=r.pop();n&&n.includes("@")&&(e.author={email:n.substr(0,n.length-1),name:r.join("<").trim()})}),new ue(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,r,n])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(r,10)||0,e.summary.deletions=parseInt(n,10)||0}),new ue(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,r,n])=>{e.summary.changes=parseInt(t,10)||0;const o=parseInt(r,10)||0;"-"===n?e.summary.deletions=o:"+"===n&&(e.summary.insertions=o)})]}});var Ar,Rr,Fr,Gr,Dr=u({"src/lib/tasks/commit.ts"(){Or(),Ge(),nt()}}),Ur=u({"src/lib/tasks/first-commit.ts"(){Ge(),nt()}}),Ir=u({"src/lib/tasks/hash-object.ts"(){nt()}}),Lr=u({"src/lib/responses/InitSummary.ts"(){Ar=class{constructor(e,t,r,n){this.bare=e,this.path=t,this.existing=r,this.gitDir=n}},Rr=/^Init.+ repository in (.+)$/,Fr=/^Rein.+ in (.+)$/}});var $r,jr=u({"src/lib/tasks/init.ts"(){Lr(),Gr="--bare"}});function Mr(e){for(let t=0;t<e.length;t++){const r=$r.exec(e[t]);if(r)return`--${r[1]}`}return""}function Br(e){return $r.test(e)}var qr,zr,Nr,Hr,Vr,Wr,Kr=u({"src/lib/args/log-format.ts"(){$r=/^--(stat|numstat|name-only|name-status)(=|$)/}}),Jr=u({"src/lib/responses/DiffSummary.ts"(){qr=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function Yr(e=""){const t=Wr[e];return e=>Se(new qr,t,e,!1)}var Zr,Qr,Xr,en,tn=u({"src/lib/parsers/parse-diff-summary.ts"(){Kr(),Jr(),kt(),Ge(),zr=[new ue(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,r,n=""])=>{e.files.push({file:t.trim(),changes:K(r),insertions:n.replace(/[^+]/g,"").length,deletions:n.replace(/[^-]/g,"").length,binary:!1})}),new ue(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,r,n])=>{e.files.push({file:t.trim(),before:K(r),after:K(n),binary:!0})}),new ue(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,r])=>{const n=/(\d+) i/.exec(r),o=/(\d+) d/.exec(r);e.changed=K(t),e.insertions=K(n?.[1]),e.deletions=K(o?.[1])})],Nr=[new ue(/(\d+)\t(\d+)\t(.+)$/,(e,[t,r,n])=>{const o=K(t),s=K(r);e.changed++,e.insertions+=o,e.deletions+=s,e.files.push({file:n,changes:o+s,insertions:o,deletions:s,binary:!1})}),new ue(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],Hr=[new ue(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],Vr=[new ue(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,r,n,o,s])=>{var i;e.changed++,e.files.push({file:s??n,changes:0,insertions:0,deletions:0,binary:!1,status:X((i=t,bt.has(i)&&t)),from:X(!!s&&n!==s&&n),similarity:K(r)})})],Wr={"":zr,"--stat":zr,"--numstat":Nr,"--name-status":Vr,"--name-only":Hr}}});function rn(e=Xr,t=en,r=""){const n=Yr(r);return function(r){const o=j(r.trim(),!1,Zr).map(function(r){const o=r.split(Qr),s=function(e,t){return t.reduce((t,r,n)=>(t[r]=e[n]||"",t),Object.create({diff:null}))}(o[0].split(e),t);return o.length>1&&o[1].trim()&&(s.diff=n(o[1])),s});return{all:o,latest:o.length&&o[0]||null,total:o.length}}}var nn=u({"src/lib/parsers/parse-list-log-summary.ts"(){Ge(),tn(),Kr(),Zr="òòòòòò ",Qr=" òò",Xr=" ò ",en=["hash","date","message","refs","author_name","author_email"]}}),on={};function sn(e){let t=Mr(e);const r=["diff"];return""===t&&(t="--stat",r.push("--stat=4096")),r.push(...e),an(r)||{commands:r,format:"utf-8",parser:Yr(t)}}function an(e){const t=e.filter(Br);return t.length>1?We(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`):t.length&&e.includes("-z")?We(`Summary flag ${t} parsing is not compatible with null termination option '-z'`):void 0}g(on,{diffSummaryTask:()=>sn,validateLogFormatConfig:()=>an});var cn,ln=u({"src/lib/tasks/diff.ts"(){Kr(),tn(),nt()}});function pn(e={},t=[]){const r=ie(e.splitter,te,Xr),n=ce(e.format)?e.format:{hash:"%H",date:!1===e.strictDate?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:!1!==e.mailMap?"%aN":"%an",author_email:!1!==e.mailMap?"%aE":"%ae"},[o,s]=function(e,t){const r=[],n=[];return Object.keys(e).forEach(t=>{r.push(t),n.push(String(e[t]))}),[r,n.join(t)]}(n,r),i=[],a=[`--pretty=format:${Zr}${s}${Qr}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){const t=!1!==e.symmetric?"...":"..";i.push(`${e.from||""}${t}${e.to||""}`)}var l;return te(e.file)&&a.push("--follow",v(e.file)),Te((l=e,Object.keys(l).reduce((e,t)=>(t in cn||(e[t]=l[t]),e),{})),a),{fields:o,splitter:r,commands:[...a,...i]}}var dn,un,gn,mn,hn,fn=u({"src/lib/tasks/log.ts"(){Kr(),O(),nn(),Ge(),nt(),ln(),cn=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(cn||{})}}),bn=u({"src/lib/responses/MergeSummary.ts"(){dn=class{constructor(e,t=null,r){this.reason=e,this.file=t,this.meta=r}toString(){return`${this.file}:${this.reason}`}},un=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),vn=u({"src/lib/responses/PullSummary.ts"(){gn=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},mn=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function wn(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function yn(e){const t=/^\s*(\d+)/.exec(e),r=/delta (\d+)/i.exec(e);return{count:K(t&&t[1]||"0"),delta:K(r&&r[1]||"0")}}var Tn,En,kn=u({"src/lib/parsers/parse-remote-objects.ts"(){Ge(),hn=[new ge(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,r])=>{const n=t.toLowerCase(),o=wn(e.remoteMessages);Object.assign(o,{[n]:K(r)})}),new ge(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,r])=>{const n=t.toLowerCase(),o=wn(e.remoteMessages);Object.assign(o,{[n]:K(r)})}),new ge(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,r,n])=>{const o=wn(e.remoteMessages);o.total=yn(t),o.reused=yn(r),o.packReused=K(n)})]}});function _n(e,t){return Se({remoteMessages:new En},Tn,t)}var xn,Cn,Sn,Pn,On,An,Rn,Fn,Gn,Dn=u({"src/lib/parsers/parse-remote-messages.ts"(){Ge(),kn(),Tn=[new ge(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),...hn,new ge([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new ge([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,r,n])=>{e.remoteMessages.vulnerabilities={count:K(t),summary:r,url:n}})],En=class{constructor(){this.all=[]}}}}),Un=u({"src/lib/parsers/parse-pull.ts"(){vn(),Ge(),Dn(),xn=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Cn=/^(create|delete) mode \d+ (.+)/,Sn=[new ue(/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,(e,[t,r,n])=>{e.files.push(t),r&&(e.insertions[t]=r.length),n&&(e.deletions[t]=n.length)}),new ue(xn,(e,[t,,r,,n])=>(void 0!==r||void 0!==n)&&(e.summary.changes=+t||0,e.summary.insertions=+r||0,e.summary.deletions=+n||0,!0)),new ue(Cn,(e,[t,r])=>{q(e.files,r),q("create"===t?e.created:e.deleted,r)})],Pn=[new ue(/^from\s(.+)$/i,(e,[t])=>{e.remote=t}),new ue(/^fatal:\s(.+)$/,(e,[t])=>{e.message=t}),new ue(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,r,n,o])=>{e.branch.local=n,e.hash.local=t,e.branch.remote=o,e.hash.remote=r})],On=(e,t)=>Se(new gn,Sn,[e,t]),An=(e,t)=>Object.assign(new gn,On(e,t),_n(0,t))}}),In=u({"src/lib/parsers/parse-merge.ts"(){bn(),Ge(),Un(),Rn=[new ue(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new ue(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,r])=>{e.conflicts.push(new dn(t,r))}),new ue(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,r,n])=>{e.conflicts.push(new dn(t,r,{deleteRef:n}))}),new ue(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new dn(t,null))}),new ue(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],Fn=(e,t)=>Object.assign(Gn(e,t),An(e,t)),Gn=e=>Se(new un,Rn,e)}});function Ln(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(e,t){const r=Fn(e,t);if(r.failed)throw new o(r);return r}}:We("Git.merge requires at least one option")}var $n,jn,Mn,Bn=u({"src/lib/tasks/merge.ts"(){b(),In(),nt()}}),qn=u({"src/lib/parsers/parse-push.ts"(){Ge(),Dn(),$n=[new ue(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new ue(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref={...e.ref||{},local:t}}),new ue(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,r,n])=>{e.pushed.push(function(e,t,r){const n=r.includes("deleted"),o=r.includes("tag")||/^refs\/tags/.test(e),s=!r.includes("new");return{deleted:n,tag:o,branch:!o,new:!s,alreadyUpdated:s,local:e,remote:t}}(t,r,n))}),new ue(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,r,n])=>{e.branch={...e.branch||{},local:t,remote:r,remoteName:n}}),new ue(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,r,n,o])=>{e.update={head:{local:t,remote:r},hash:{from:n,to:o}}})],jn=(e,t)=>({...Mn(e,t),..._n(0,t)}),Mn=(e,t)=>Se({pushed:[]},$n,[e,t])}}),zn={};function Nn(e={},t){return q(t,"--tags"),Hn(e,t)}function Hn(e={},t){const r=["push",...t];return e.branch&&r.splice(1,0,e.branch),e.remote&&r.splice(1,0,e.remote),N(r,"-v"),q(r,"--verbose"),q(r,"--porcelain"),{commands:r,format:"utf-8",parser:jn}}g(zn,{pushTagsTask:()=>Nn,pushTask:()=>Hn});var Vn,Wn,Kn,Jn,Yn,Zn=u({"src/lib/tasks/push.ts"(){qn(),Ge()}}),Qn=u({"src/lib/tasks/show.ts"(){Ge(),nt()}}),Xn=u({"src/lib/responses/FileStatusSummary.ts"(){Vn=/^(.+)\0(.+)$/,Wn=class{constructor(e,t,r){if(this.path=e,this.index=t,this.working_dir=r,"R"===t||"R"===r){const t=Vn.exec(e)||[null,e,e];this.from=t[2]||"",this.path=t[1]||""}}}}});function eo(e){const[t,r]=e.split(C);return{from:r||t,to:t}}function to(e,t,r){return[`${e}${t}`,r]}function ro(e,...t){return t.map(t=>to(e,t,(e,t)=>q(e.conflicted,t)))}function no(e,t){const r=t.trim();switch(" "){case r.charAt(2):return n(r.charAt(0),r.charAt(1),r.substr(3));case r.charAt(1):return n(" ",r.charAt(0),r.substr(2));default:return}function n(t,r,n){const o=`${t}${r}`,s=Jn.get(o);s&&s(e,n),"##"!==o&&"!!"!==o&&e.files.push(new Wn(n,t,r))}}var oo,so,io,ao=u({"src/lib/responses/StatusSummary.ts"(){Ge(),Xn(),Kn=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Jn=new Map([to(" ","A",(e,t)=>q(e.created,t)),to(" ","D",(e,t)=>q(e.deleted,t)),to(" ","M",(e,t)=>q(e.modified,t)),to("A"," ",(e,t)=>q(e.created,t)&&q(e.staged,t)),to("A","M",(e,t)=>q(e.created,t)&&q(e.staged,t)&&q(e.modified,t)),to("D"," ",(e,t)=>q(e.deleted,t)&&q(e.staged,t)),to("M"," ",(e,t)=>q(e.modified,t)&&q(e.staged,t)),to("M","M",(e,t)=>q(e.modified,t)&&q(e.staged,t)),to("R"," ",(e,t)=>{q(e.renamed,eo(t))}),to("R","M",(e,t)=>{const r=eo(t);q(e.renamed,r),q(e.modified,r.to)}),to("!","!",(e,t)=>{q(e.ignored=e.ignored||[],t)}),to("?","?",(e,t)=>q(e.not_added,t)),...ro("A","A","U"),...ro("D","D","U"),...ro("U","A","D","U"),["##",(e,t)=>{let r;r=/ahead (\d+)/.exec(t),e.ahead=r&&+r[1]||0,r=/behind (\d+)/.exec(t),e.behind=r&&+r[1]||0,r=/^(.+?(?=(?:\.{3}|\s|$)))/.exec(t),e.current=r&&r[1],r=/\.{3}(\S*)/.exec(t),e.tracking=r&&r[1],r=/\son\s([\S]+)$/.exec(t),e.current=r&&r[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),Yn=function(e){const t=e.split(C),r=new Kn;for(let e=0,n=t.length;e<n;){let n=t[e++].trim();n&&("R"===n.charAt(0)&&(n+=C+(t[e++]||"")),no(r,n))}return r}}}),co=u({"src/lib/tasks/status.ts"(){ao(),oo=["--null","-z"]}});function lo(e=0,t=0,r=0,n="",o=!0){return Object.defineProperty({major:e,minor:t,patch:r,agent:n,installed:o},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function po(e){return e===so?lo(0,0,0,"",!1):Se(lo(0,0,0,e),io,e)}var uo,go=u({"src/lib/tasks/version.ts"(){Ge(),so="installed=false",io=[new ue(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,r,n,o=""])=>{Object.assign(e,lo(K(t),K(r),K(n),o))}),new ue(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,r,n,o=""])=>{Object.assign(e,lo(K(t),K(r),n,o))})]}}),mo={};g(mo,{SimpleGitApi:()=>uo});var ho,fo,bo,vo=u({"src/lib/simple-git-api.ts"(){yr(),Er(),Cr(),Sr(),Dr(),Et(),Ur(),St(),Ir(),jr(),fn(),Bn(),Zn(),Qn(),co(),nt(),go(),Ge(),uo=class{constructor(e){this._executor=e}_runTask(e,t){const r=this._executor.chain(),n=r.push(e);return t&&function(e,t,r=S){t.then(e=>{r(null,e)},t=>{t?.task===e&&r(t instanceof o?function(e){let t=e=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${e} should be GitResponseError.git.${e}, this will no longer be available in version 3`),t=S};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(function(r,n){return n in e||(r[n]={enumerable:!1,configurable:!1,get:()=>(t(n),e.git[n])}),r},{}))}(t):t,void 0)})}(e,n,t),Object.create(this,{then:{value:n.then.bind(n)},catch:{value:n.catch.bind(n)},_executor:{value:r}})}add(e){return this._runTask(Ke(["add",...H(e)]),_e(arguments))}cwd(e){const t=_e(arguments);return"string"==typeof e?this._runTask(Tr(e,this._executor),t):"string"==typeof e?.path?this._runTask(Tr(e.path,e.root&&this._executor||void 0),t):this._runTask(We("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(function(e,t){const r=["hash-object",e];return t&&r.push("-w"),Ke(r,!0)}(e,!0===t),_e(arguments))}init(e){return this._runTask(function(e=!1,t,r){const n=["init",...r];return e&&!n.includes(Gr)&&n.splice(1,0,Gr),{commands:n,format:"utf-8",parser:e=>function(e,t,r){const n=String(r).trim();let o;if(o=Rr.exec(n))return new Ar(e,t,!1,o[1]);if(o=Fr.exec(n))return new Ar(e,t,!0,o[1]);let s="";const i=n.split(" ");for(;i.length;)if("in"===i.shift()){s=i.join(" ");break}return new Ar(e,t,/^re/i.test(n),s)}(n.includes("--bare"),t,e)}}(!0===e,this._executor.cwd,Ee(arguments)),_e(arguments))}merge(){return this._runTask(Ln(Ee(arguments)),_e(arguments))}mergeFromTo(e,t){return te(e)&&te(t)?this._runTask(Ln([e,t,...Ee(arguments)]),_e(arguments,!1)):this._runTask(We("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){const e=Hn({remote:ie(arguments[0],te),branch:ie(arguments[1],te)},Ee(arguments));return this._runTask(e,_e(arguments))}stash(){return this._runTask(Ke(["stash",...Ee(arguments)]),_e(arguments))}status(){return this._runTask({format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...Ee(arguments).filter(e=>!oo.includes(e))],parser:e=>Yn(e)},_e(arguments))}},Object.assign(uo.prototype,{checkout(){return this._runTask(kr(Ee(arguments,1)),_e(arguments))},checkoutBranch(e,t){return this._runTask(kr(["-b",e,t,...Ee(arguments)]),_e(arguments))},checkoutLocalBranch(e){return this._runTask(kr(["-b",e,...Ee(arguments)]),_e(arguments))}},{commit(e,...t){const r=_e(arguments),n=function(e){return!ne(e)&&We("git.commit: requires the commit message to be supplied as a string/string[]")}(e)||function(e,t,r){return{commands:["-c","core.abbrev=40","commit",...J(e,"-m"),...t,...r],format:"utf-8",parser:Pr}}(H(e),H(ie(t[0],ne,[])),[...ie(t[1],ee,[]),...Ee(arguments,0,!0)]);return this._runTask(n,r)}},{addConfig(e,t,...r){return this._runTask(function(e,t,r,n){const o=["config",`--${n}`];return r&&o.push("--add"),o.push(e,t),{commands:o,format:"utf-8",parser:e=>e}}(e,t,!0===r[0],ht(r[1],"local")),_e(arguments))},getConfig(e,t){return this._runTask(function(e,t){const r=["config","--null","--show-origin","--get-all",e];return t&&r.splice(1,0,`--${t}`),{commands:r,format:"utf-8",parser:t=>function(e,t){let r=null;const n=[],o=new Map;for(const s of ut(e,t))s.key===t&&(n.push(r=s.value),o.has(s.file)||o.set(s.file,[]),o.get(s.file).push(r));return{key:t,paths:Array.from(o.keys()),scopes:o,value:r,values:n}}(t,e)}}(e,ht(t,void 0)),_e(arguments))},listConfig(...e){return this._runTask(function(e){const t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser:e=>function(e){const t=new lt;for(const r of ut(e))t.addValue(r.file,String(r.key),r.value);return t}(e)}}(ht(e[0],void 0)),_e(arguments))}},{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser:e=>Se({count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0},[_r],e)})}},{firstCommit(){return this._runTask(Ke(["rev-list","--max-parents=0","HEAD"],!0),_e(arguments))}},{grep(e){const t=_e(arguments),r=Ee(arguments);for(const e of vt)if(r.includes(e))return this._runTask(We(`git.grep: use of "${e}" is not supported.`),t);"string"==typeof e&&(e=_t().param(e));const n=["grep","--null","-n","--full-name",...r,...e];return this._runTask({commands:n,format:"utf-8",parser:e=>function(e){const t=new Set,r={};return M(e,e=>{const[n,o,s]=e.split(C);t.add(n),(r[n]=r[n]||[]).push({line:K(o),path:n,preview:s})}),{paths:t,results:r}}(e)},t)}},{log(...e){const t=_e(arguments),r=pn(ke(arguments),ie(arguments[0],ee)),n=function(e,t){return te(e)&&te(t)&&We("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}(...e)||an(r.commands)||function(e){return function(e,t,r){const n=rn(e,t,Mr(r));return{commands:["log",...r],format:"utf-8",parser:n}}(e.splitter,e.fields,e.commands)}(r);return this._runTask(n,t)}},{showBuffer(){const e=["show",...Ee(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Je(e),_e(arguments))},show(){const e=["show",...Ee(arguments,1)];return this._runTask(Ke(e),_e(arguments))}},{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:po,onError(e,t,r,n){if(-2===e.exitCode)return r(Buffer.from(so));n(t)}})}})}}),wo={};g(wo,{Scheduler:()=>bo});var yo=u({"src/lib/runners/scheduler.ts"(){Ge(),ho=r(100),ur(),fo=(()=>{let e=0;return()=>{e++;const{promise:t,done:r}=(0,ho.createDeferred)();return{promise:t,done:r,id:e}}})(),bo=class{constructor(e=2){this.concurrency=e,this.logger=cr("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency)return void this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);const e=q(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),N(this.running,e),this.schedule()})}next(){const{promise:e,id:t}=q(this.pending,fo());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),To={};function Eo(e,t){return Ke(["apply",...t,...e])}g(To,{applyPatchTask:()=>Eo});var ko,_o,xo,Co,So=u({"src/lib/tasks/apply-patch.ts"(){nt()}}),Po=u({"src/lib/responses/BranchDeleteSummary.ts"(){ko=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function Oo(e,t){return 1===t&&_o.test(e)}var Ao,Ro,Fo=u({"src/lib/parsers/parse-branch-delete.ts"(){Po(),Ge(),_o=/^error[^']+'([^']+)'/m,xo=[new ue(/(\S+)\s+\(\S+\s([^)]+)\)/,(e,[t,r])=>{const n=function(e,t){return{branch:e,hash:t,success:!0}}(t,r);e.all.push(n),e.branches[t]=n}),new ue(_o,(e,[t])=>{const r=function(e){return{branch:e,hash:null,success:!1}}(t);e.errors.push(r),e.all.push(r),e.branches[t]=r})],Co=(e,t)=>Se(new ko,xo,[e,t])}}),Go=u({"src/lib/responses/BranchSummary.ts"(){Ao=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,r,n,o){"*"===e&&(this.detached=t,this.current=r),this.all.push(r),this.branches[r]={current:"*"===e,linkedWorkTree:"+"===e,name:r,commit:n,label:o}}}}});function Do(e){return e?e.charAt(0):""}function Uo(e){return Se(new Ao,Ro,e)}var Io=u({"src/lib/parsers/parse-branch.ts"(){Go(),Ge(),Ro=[new ue(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,r,n,o])=>{e.push(Do(t),!0,r,n,o)}),new ue(/^([*+]\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s,(e,[t,r,n,o])=>{e.push(Do(t),!1,r,n,o)})]}}),Lo={};function $o(e){const t=["-d","-D","--delete"];return e.some(e=>t.includes(e))}function jo(e){const t=$o(e),r=["branch",...e];return 1===r.length&&r.push("-a"),r.includes("-v")||r.splice(1,0,"-v"),{format:"utf-8",commands:r,parser:(e,r)=>t?Co(e,r).all[0]:Uo(e)}}function Mo(){return{format:"utf-8",commands:["branch","-v"],parser:Uo}}function Bo(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser:(e,t)=>Co(e,t),onError({exitCode:e,stdOut:t},r,n,o){if(!Oo(String(r),e))return o(r);n(t)}}}function qo(e,t=!1){const r={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser:(t,r)=>Co(t,r).branches[e],onError({exitCode:e,stdErr:t,stdOut:n},s,i,a){if(!Oo(String(s),e))return a(s);throw new o(r.parser(Y(n),Y(t)),String(s))}};return r}g(Lo,{branchLocalTask:()=>Mo,branchTask:()=>jo,containsDeleteBranchCommand:()=>$o,deleteBranchTask:()=>qo,deleteBranchesTask:()=>Bo});var zo,No=u({"src/lib/tasks/branch.ts"(){b(),Fo(),Io(),Ge()}}),Ho=u({"src/lib/responses/CheckIgnore.ts"(){zo=e=>e.split(/\n/g).map(e=>e.trim()).filter(e=>!!e)}}),Vo={};function Wo(e){return{commands:["check-ignore",...e],format:"utf-8",parser:zo}}g(Vo,{checkIgnoreTask:()=>Wo});var Ko=u({"src/lib/tasks/check-ignore.ts"(){Ho()}}),Jo={};function Yo(e){return/^--upload-pack(=|$)/.test(e)}function Zo(e,t,r){const n=["clone",...r];return te(e)&&n.push(e),te(t)&&n.push(t),n.find(Yo)?We("git.fetch: potential exploit argument blocked."):Ke(n)}function Qo(e,t,r){return q(r,"--mirror"),Zo(e,t,r)}g(Jo,{cloneMirrorTask:()=>Qo,cloneTask:()=>Zo});var Xo,es=u({"src/lib/tasks/clone.ts"(){nt(),Ge()}});function ts(e,t){return Se({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},Xo,[e,t])}var rs=u({"src/lib/parsers/parse-fetch.ts"(){Ge(),Xo=[new ue(/From (.+)$/,(e,[t])=>{e.remote=t}),new ue(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.branches.push({name:t,tracking:r})}),new ue(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.tags.push({name:t,tracking:r})}),new ue(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new ue(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,r,n,o])=>{e.updated.push({name:n,tracking:o,to:r,from:t})})]}}),ns={};function os(e){return/^--upload-pack(=|$)/.test(e)}function ss(e,t,r){const n=["fetch",...r];return e&&t&&n.push(e,t),n.find(os)?We("git.fetch: potential exploit argument blocked."):{commands:n,format:"utf-8",parser:ts}}g(ns,{fetchTask:()=>ss});var is,as=u({"src/lib/tasks/fetch.ts"(){rs(),nt()}});function cs(e){return Se({moves:[]},is,e)}var ls=u({"src/lib/parsers/parse-move.ts"(){Ge(),is=[new ue(/^Renaming (.+) to (.+)$/,(e,[t,r])=>{e.moves.push({from:t,to:r})})]}}),ps={};function ds(e,t){return{commands:["mv","-v",...H(e),t],format:"utf-8",parser:cs}}g(ps,{moveTask:()=>ds});var us=u({"src/lib/tasks/move.ts"(){ls(),Ge()}}),gs={};function ms(e,t,r){const n=["pull",...r];return e&&t&&n.splice(1,0,e,t),{commands:n,format:"utf-8",parser:(e,t)=>An(e,t),onError(e,t,r,n){const s=function(e,t){const r=Se(new mn,Pn,[e,t]);return r.message&&r}(Y(e.stdOut),Y(e.stdErr));if(s)return n(new o(s));n(t)}}}g(gs,{pullTask:()=>ms});var hs=u({"src/lib/tasks/pull.ts"(){b(),Un(),Ge()}});function fs(e){const t={};return vs(e,([e])=>t[e]={name:e}),Object.values(t)}function bs(e){const t={};return vs(e,([e,r,n])=>{t.hasOwnProperty(e)||(t[e]={name:e,refs:{fetch:"",push:""}}),n&&r&&(t[e].refs[n.replace(/[^a-z]/g,"")]=r)}),Object.values(t)}function vs(e,t){M(e,e=>t(e.split(/\s+/)))}var ws=u({"src/lib/responses/GetRemoteSummary.ts"(){Ge()}}),ys={};function Ts(e,t,r){return Ke(["remote","add",...r,e,t])}function Es(e){const t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?bs:fs}}function ks(e){const t=[...e];return"ls-remote"!==t[0]&&t.unshift("ls-remote"),Ke(t)}function _s(e){const t=[...e];return"remote"!==t[0]&&t.unshift("remote"),Ke(t)}function xs(e){return Ke(["remote","remove",e])}g(ys,{addRemoteTask:()=>Ts,getRemotesTask:()=>Es,listRemotesTask:()=>ks,remoteTask:()=>_s,removeRemoteTask:()=>xs});var Cs=u({"src/lib/tasks/remote.ts"(){ws(),nt()}}),Ss={};function Ps(e={},t){const r=pn(e),n=["stash","list",...r.commands,...t],o=rn(r.splitter,r.fields,Mr(n));return an(n)||{commands:n,format:"utf-8",parser:o}}g(Ss,{stashListTask:()=>Ps});var Os=u({"src/lib/tasks/stash-list.ts"(){Kr(),nn(),ln(),fn()}}),As={};function Rs(e,t){return Gs(["add",e,t])}function Fs(e){return Gs(["init",...e])}function Gs(e){const t=[...e];return"submodule"!==t[0]&&t.unshift("submodule"),Ke(t)}function Ds(e){return Gs(["update",...e])}g(As,{addSubModuleTask:()=>Rs,initSubModuleTask:()=>Fs,subModuleTask:()=>Gs,updateSubModuleTask:()=>Ds});var Us,Is,Ls=u({"src/lib/tasks/sub-module.ts"(){nt()}});function $s(e,t){return e===t?0:e>t?1:-1}function js(e){return e.trim()}function Ms(e){return"string"==typeof e&&parseInt(e.replace(/^\D+/g,""),10)||0}var Bs=u({"src/lib/responses/TagList.ts"(){Us=class{constructor(e,t){this.all=e,this.latest=t}},Is=function(e,t=!1){const r=e.split("\n").map(js).filter(Boolean);t||r.sort(function(e,t){const r=e.split("."),n=t.split(".");if(1===r.length||1===n.length)return function(e,t){const r=isNaN(e);return r!==isNaN(t)?r?1:-1:r?$s(e,t):0}(Ms(r[0]),Ms(n[0]));for(let e=0,t=Math.max(r.length,n.length);e<t;e++){const t=$s(Ms(r[e]),Ms(n[e]));if(t)return t}return 0});const n=t?r[0]:[...r].reverse().find(e=>e.indexOf(".")>=0);return new Us(r,n)}}}),qs={};function zs(e=[]){const t=e.some(e=>/^--sort=/.test(e));return{format:"utf-8",commands:["tag","-l",...e],parser:e=>Is(e,t)}}function Ns(e){return{format:"utf-8",commands:["tag",e],parser:()=>({name:e})}}function Hs(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser:()=>({name:e})}}g(qs,{addAnnotatedTagTask:()=>Hs,addTagTask:()=>Ns,tagListTask:()=>zs});var Vs,Ws,Ks,Js=u({"src/lib/tasks/tag.ts"(){Bs()}}),Ys=(Vs={"src/git.js"(e,t){var{GitExecutor:r}=(wr(),h(vr)),{SimpleGitApi:n}=(vo(),h(mo)),{Scheduler:o}=(yo(),h(wo)),{configurationErrorTask:s}=(nt(),h(He)),{asArray:i,filterArray:a,filterPrimitives:c,filterString:l,filterStringOrStringArray:p,filterType:d,getTrailingOptions:u,trailingFunctionArgument:g,trailingOptionsArgument:m}=(Ge(),h(Oe)),{applyPatchTask:f}=(So(),h(To)),{branchTask:b,branchLocalTask:v,deleteBranchesTask:w,deleteBranchTask:y}=(No(),h(Lo)),{checkIgnoreTask:T}=(Ko(),h(Vo)),{checkIsRepoTask:E}=(ze(),h(De)),{cloneTask:k,cloneMirrorTask:_}=(es(),h(Jo)),{cleanWithOptionsTask:x,isCleanOptionsArray:C}=(pt(),h(ot)),{diffSummaryTask:S}=(ln(),h(on)),{fetchTask:P}=(as(),h(ns)),{moveTask:O}=(us(),h(ps)),{pullTask:A}=(hs(),h(gs)),{pushTagsTask:R}=(Zn(),h(zn)),{addRemoteTask:F,getRemotesTask:G,listRemotesTask:D,remoteTask:U,removeRemoteTask:I}=(Cs(),h(ys)),{getResetMode:L,resetTask:$}=(Ft(),h(Pt)),{stashListTask:j}=(Os(),h(Ss)),{addSubModuleTask:M,initSubModuleTask:B,subModuleTask:q,updateSubModuleTask:z}=(Ls(),h(As)),{addAnnotatedTagTask:N,addTagTask:H,tagListTask:V}=(Js(),h(qs)),{straightThroughBufferTask:W,straightThroughStringTask:K}=(nt(),h(He));function J(e,t){this._plugins=t,this._executor=new r(e.baseDir,new o(e.maxConcurrentProcesses),t),this._trimmed=e.trimmed}function Y(e,t,r,n){return"string"!=typeof r?s(`git.${e}() requires a string 'repoPath'`):t(r,d(n,l),u(arguments))}(J.prototype=Object.create(n.prototype)).constructor=J,J.prototype.customBinary=function(e){return this._plugins.reconfigure("binary",e),this},J.prototype.env=function(e,t){return 1===arguments.length&&"object"==typeof e?this._executor.env=e:(this._executor.env=this._executor.env||{})[e]=t,this},J.prototype.stashList=function(e){return this._runTask(j(m(arguments)||{},a(e)&&e||[]),g(arguments))},J.prototype.clone=function(){return this._runTask(Y("clone",k,...arguments),g(arguments))},J.prototype.mirror=function(){return this._runTask(Y("mirror",_,...arguments),g(arguments))},J.prototype.mv=function(e,t){return this._runTask(O(e,t),g(arguments))},J.prototype.checkoutLatestTag=function(e){var t=this;return this.pull(function(){t.tags(function(r,n){t.checkout(n.latest,e)})})},J.prototype.pull=function(e,t,r,n){return this._runTask(A(d(e,l),d(t,l),u(arguments)),g(arguments))},J.prototype.fetch=function(e,t){return this._runTask(P(d(e,l),d(t,l),u(arguments)),g(arguments))},J.prototype.silent=function(e){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},J.prototype.tags=function(e,t){return this._runTask(V(u(arguments)),g(arguments))},J.prototype.rebase=function(){return this._runTask(K(["rebase",...u(arguments)]),g(arguments))},J.prototype.reset=function(e){return this._runTask($(L(e),u(arguments)),g(arguments))},J.prototype.revert=function(e){const t=g(arguments);return"string"!=typeof e?this._runTask(s("Commit must be a string"),t):this._runTask(K(["revert",...u(arguments,0,!0),e]),t)},J.prototype.addTag=function(e){const t="string"==typeof e?H(e):s("Git.addTag requires a tag name");return this._runTask(t,g(arguments))},J.prototype.addAnnotatedTag=function(e,t){return this._runTask(N(e,t),g(arguments))},J.prototype.deleteLocalBranch=function(e,t,r){return this._runTask(y(e,"boolean"==typeof t&&t),g(arguments))},J.prototype.deleteLocalBranches=function(e,t,r){return this._runTask(w(e,"boolean"==typeof t&&t),g(arguments))},J.prototype.branch=function(e,t){return this._runTask(b(u(arguments)),g(arguments))},J.prototype.branchLocal=function(e){return this._runTask(v(),g(arguments))},J.prototype.raw=function(e){const t=!Array.isArray(e),r=[].slice.call(t?arguments:e,0);for(let e=0;e<r.length&&t;e++)if(!c(r[e])){r.splice(e,r.length-e);break}r.push(...u(arguments,0,!0));var n=g(arguments);return r.length?this._runTask(K(r,this._trimmed),n):this._runTask(s("Raw: must supply one or more command to execute"),n)},J.prototype.submoduleAdd=function(e,t,r){return this._runTask(M(e,t),g(arguments))},J.prototype.submoduleUpdate=function(e,t){return this._runTask(z(u(arguments,!0)),g(arguments))},J.prototype.submoduleInit=function(e,t){return this._runTask(B(u(arguments,!0)),g(arguments))},J.prototype.subModule=function(e,t){return this._runTask(q(u(arguments)),g(arguments))},J.prototype.listRemote=function(){return this._runTask(D(u(arguments)),g(arguments))},J.prototype.addRemote=function(e,t,r){return this._runTask(F(e,t,u(arguments)),g(arguments))},J.prototype.removeRemote=function(e,t){return this._runTask(I(e),g(arguments))},J.prototype.getRemotes=function(e,t){return this._runTask(G(!0===e),g(arguments))},J.prototype.remote=function(e,t){return this._runTask(U(u(arguments)),g(arguments))},J.prototype.tag=function(e,t){const r=u(arguments);return"tag"!==r[0]&&r.unshift("tag"),this._runTask(K(r),g(arguments))},J.prototype.updateServerInfo=function(e){return this._runTask(K(["update-server-info"]),g(arguments))},J.prototype.pushTags=function(e,t){const r=R({remote:d(e,l)},u(arguments));return this._runTask(r,g(arguments))},J.prototype.rm=function(e){return this._runTask(K(["rm","-f",...i(e)]),g(arguments))},J.prototype.rmKeepLocal=function(e){return this._runTask(K(["rm","--cached",...i(e)]),g(arguments))},J.prototype.catFile=function(e,t){return this._catFile("utf-8",arguments)},J.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},J.prototype._catFile=function(e,t){var r=g(t),n=["cat-file"],o=t[0];if("string"==typeof o)return this._runTask(s("Git.catFile: options must be supplied as an array of strings"),r);Array.isArray(o)&&n.push.apply(n,o);const i="buffer"===e?W(n):K(n);return this._runTask(i,r)},J.prototype.diff=function(e,t){const r=l(e)?s("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):K(["diff",...u(arguments)]);return this._runTask(r,g(arguments))},J.prototype.diffSummary=function(){return this._runTask(S(u(arguments,1)),g(arguments))},J.prototype.applyPatch=function(e){const t=p(e)?f(i(e),u([].slice.call(arguments,1))):s("git.applyPatch requires one or more string patches as the first argument");return this._runTask(t,g(arguments))},J.prototype.revparse=function(){const e=["rev-parse",...u(arguments,!0)];return this._runTask(K(e,!0),g(arguments))},J.prototype.clean=function(e,t,r){const n=C(e),o=n&&e.join("")||d(e,l)||"",s=u([].slice.call(arguments,n?1:0));return this._runTask(x(o,s),g(arguments))},J.prototype.exec=function(e){const t={commands:[],format:"utf-8",parser(){"function"==typeof e&&e()}};return this._runTask(t)},J.prototype.clearQueue=function(){return this},J.prototype.checkIgnore=function(e,t){return this._runTask(T(i(d(e,p,[]))),g(arguments))},J.prototype.checkIsRepo=function(e,t){return this._runTask(E(d(e,l)),g(arguments))},t.exports=J}},function(){return Ws||(0,Vs[l(Vs)[0]])((Ws={exports:{}}).exports,Ws),Ws.exports}),Zs={};function Qs(e){return Object.defineProperties(e,{__esModule:{value:!0},default:{value:e}})}function Xs(e){return Object.assign(e.bind(null),Gt)}function ei(e,t){const r=new Zt,n=we(e&&("string"==typeof e?{baseDir:e}:e)||{},t);if(!B(n.baseDir))throw new T(n,"Cannot use simple-git on a directory that does not exist");return Array.isArray(n.config)&&r.add(function(e){const t=J(e,"-c");return{type:"spawn.args",action:e=>[...t,...e]}}(n.config)),r.add(function({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action:(r,n)=>(r.forEach((o,s)=>{const i=s<r.length?r[s+1]:"";e||function(e,t){if(function(e){return"string"==typeof e&&"-c"===e.trim().toLowerCase()}(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new E(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}(o,i),t||function(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new E(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if("clone"===t&&/^\s*-u\b/.test(e))throw new E(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if("push"===t&&/^\s*--exec\b/.test(e))throw new E(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}(o,n.method)}),r)}}(n.unsafe)),r.add({type:"spawn.args",action(e){const t=[];let r;function n(e){(r=r||[]).push(...e)}for(let r=0;r<e.length;r++){const o=e[r];if(w(o))n(y(o));else{if("--"===o){n(e.slice(r+1).flatMap(e=>w(e)&&y(e)||e));break}t.push(o)}}return r?[...t,"--",...r.map(String)]:t}}),r.add(function({onClose:e=!0,onExit:t=50}={}){function r(e,t,r){!1!==e&&(!0===e?t.promise:t.promise.then(()=>Q(e))).then(r.done)}return{type:"spawn.after",async action(n,{spawned:o,close:s}){const i=function(){let n=-1;const o={close:(0,It.deferred)(),closeTimeout:(0,It.deferred)(),exit:(0,It.deferred)(),exitTimeout:(0,It.deferred)()},s=Promise.race([!1===e?Lt:o.closeTimeout.promise,!1===t?Lt:o.exitTimeout.promise]);return r(e,o.close,o.closeTimeout),r(t,o.exit,o.exitTimeout),{close(e){n=e,o.close.done()},exit(e){n=e,o.exit.done()},get exitCode(){return n},result:s}}();let a=!0,c=()=>{a=!1};o.stdout?.on("data",c),o.stderr?.on("data",c),o.on("error",c),o.on("close",e=>i.close(e)),o.on("exit",e=>i.exit(e));try{await i.result,a&&await Q(50),s(i.exitCode)}catch(e){s(i.exitCode,e)}}}}(n.completion)),n.abort&&r.add(function(e){if(!e)return;const t={type:"spawn.after",action(t,r){function n(){r.kill(new E(void 0,"abort","Abort signal received"))}e.addEventListener("abort",n),r.spawned.on("close",()=>e.removeEventListener("abort",n))}};return[{type:"spawn.before",action(t,r){e.aborted&&r.kill(new E(void 0,"abort","Abort already signaled"))}},t]}(n.abort)),n.progress&&r.add(function(e){const t="--progress",r=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action:(e,n)=>r.includes(n.method)?z(e,t):e},{type:"spawn.after",action(r,n){n.commands.includes(t)&&n.spawned.stderr?.on("data",t=>{const r=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(t.toString("utf8"));var o;r&&e({method:n.method,stage:(o=r[1],String(o.toLowerCase().split(" ",1))||"unknown"),progress:K(r[2]),processed:K(r[3]),total:K(r[4])})})}}]}(n.progress)),n.timeout&&r.add(function({block:e,stdErr:t=!0,stdOut:r=!0}){if(e>0)return{type:"spawn.after",action(n,o){let s;function i(){s&&clearTimeout(s),s=setTimeout(c,e)}function a(){o.spawned.stdout?.off("data",i),o.spawned.stderr?.off("data",i),o.spawned.off("exit",a),o.spawned.off("close",a),s&&clearTimeout(s)}function c(){a(),o.kill(new E(void 0,"timeout","block timeout reached"))}r&&o.spawned.stdout?.on("data",i),t&&o.spawned.stderr?.on("data",i),o.spawned.on("exit",a),o.spawned.on("close",a),i()}}}(n.timeout)),n.spawnOptions&&r.add(function(e){const t=Z(e,["uid","gid"]);return{type:"spawn.options",action:e=>({...t,...e})}}(n.spawnOptions)),r.add(Jt(Kt(!0))),n.errors&&r.add(Jt(n.errors)),function(e,t=["git"],r=!1){let n=Nt(H(t),r);e.on("binary",e=>{n=Nt(H(e),r)}),e.append("spawn.binary",()=>n.binary),e.append("spawn.args",e=>n.prefix?[n.prefix,...e]:e)}(r,n.binary,n.unsafe?.allowUnsafeCustomBinary),new Ks(n,r)}g(Zs,{esModuleFactory:()=>Qs,gitExportFactory:()=>Xs,gitInstanceFactory:()=>ei});var ti,ri,ni=u({"src/lib/git-factory.ts"(){Dt(),sr(),ir(),Ge(),Ks=Ys()}}),oi={};function si(...e){let t,r=Promise.resolve();try{t=ei(...e)}catch(e){r=Promise.reject(e)}function n(){return i}function s(){return r}const i=[...ti,...ri].reduce((e,i)=>{const a=ri.includes(i),c=a?(l=i,p=t,function(...e){if("function"==typeof e[e.length])throw new TypeError("Promise interface requires that handlers are not supplied inline, trailing function not allowed in call to "+l);return r.then(function(){return new Promise(function(t,r){e.push((e,n)=>{if(e)return r((s=e)instanceof Error?s:"string"==typeof s?new Error(s):new o(s));var s;t(n)}),p[l].apply(p,e)})})}):function(e,t,r){return(...n)=>(t[e](...n),r)}(i,t,e);var l,p;const d=a?s:n;return Object.defineProperty(e,i,{enumerable:!1,configurable:!1,value:t?c:d}),e},{});return i}g(oi,{gitP:()=>si});var ii=u({"src/lib/runners/promise-wrapped.ts"(){b(),ni(),ti=["customBinary","env","outputHandler","silent"],ri=["add","addAnnotatedTag","addConfig","addRemote","addTag","applyPatch","binaryCatFile","branch","branchLocal","catFile","checkIgnore","checkIsRepo","checkout","checkoutBranch","checkoutLatestTag","checkoutLocalBranch","clean","clone","commit","cwd","deleteLocalBranch","deleteLocalBranches","diff","diffSummary","exec","fetch","getRemotes","init","listConfig","listRemote","log","merge","mergeFromTo","mirror","mv","pull","push","pushTags","raw","rebase","remote","removeRemote","reset","revert","revparse","rm","rmKeepLocal","show","stash","stashList","status","subModule","submoduleAdd","submoduleInit","submoduleUpdate","tag","tags","updateServerInfo"]}}),{gitP:ai}=(ii(),h(oi)),{esModuleFactory:ci,gitInstanceFactory:li,gitExportFactory:pi}=(ni(),h(Zs)),di=ci(pi(li));e.exports=Object.assign(di,{gitP:ai,simpleGit:di})},736:(e,t,r)=>{e.exports=function(e){function t(e){let r,o,s,i=null;function a(...e){if(!a.enabled)return;const n=a,o=Number(new Date),s=o-(r||o);n.diff=s,n.prev=r,n.curr=o,r=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(r,o)=>{if("%%"===r)return"%";i++;const s=t.formatters[o];if("function"==typeof s){const t=e[i];r=s.call(n,t),e.splice(i,1),i--}return r}),t.formatArgs.call(n,e),(n.log||t.log).apply(n,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=n,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(o!==t.namespaces&&(o=t.namespaces,s=t.enabled(e)),s),set:e=>{i=e}}),"function"==typeof t.init&&t.init(a),a}function n(e,r){const n=t(this.namespace+(void 0===r?":":r)+e);return n.log=this.log,n}function o(e,t){let r=0,n=0,o=-1,s=0;for(;r<e.length;)if(n<t.length&&(t[n]===e[r]||"*"===t[n]))"*"===t[n]?(o=n,s=r,n++):(r++,n++);else{if(-1===o)return!1;n=o+1,s++,r=s}for(;n<t.length&&"*"===t[n];)n++;return n===t.length}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names,...t.skips.map(e=>"-"+e)].join(",");return t.enable(""),e},t.enable=function(e){t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const e of r)"-"===e[0]?t.skips.push(e.slice(1)):t.names.push(e)},t.enabled=function(e){for(const r of t.skips)if(o(e,r))return!1;for(const r of t.names)if(o(e,r))return!0;return!1},t.humanize=r(585),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(r=>{t[r]=e[r]}),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return t.colors[Math.abs(r)%t.colors.length]},t.enable(t.load()),t}},753:(e,t,r)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=r(833):e.exports=r(33)},811:(e,t,r)=>{var n=r(346),o=r(640),s=r(447),i=Function.bind,a=i.bind(i);function c(e,t,r){var n=a(s,null).apply(null,r?[t,r]:[t]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(function(n){var s=r?[t,n,r]:[t,n];e[n]=e.api[n]=a(o,null).apply(null,s)})}function l(){var e={registry:{}},t=n.bind(null,e);return c(t,e),t}var p=!1;function d(){return p||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),p=!0),l()}d.Singular=function(){var e={registry:{}},t=n.bind(null,e,"h");return c(t,e,"h"),t}.bind(),d.Collection=l.bind(),e.exports=d,e.exports.Hook=d,e.exports.Singular=d.Singular,e.exports.Collection=d.Collection},833:(e,t,r)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;t.splice(1,0,r,"color: inherit");let n=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(n++,"%c"===e&&(o=n))}),t.splice(o,0,r)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")||t.storage.getItem("DEBUG")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=r(736)(t);const{formatters:n}=e.exports;n.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},896:e=>{"use strict";e.exports=require("fs")},926:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(423))}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=r(265);module.exports=n})();
//# sourceMappingURL=extension.js.map