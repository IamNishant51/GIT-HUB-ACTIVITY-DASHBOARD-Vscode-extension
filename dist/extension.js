(()=>{var e={18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},33:(e,t,r)=>{const s=r(18),o=r(23);t.init=function(e){e.inspectOpts={};const r=Object.keys(t.inspectOpts);for(let s=0;s<r.length;s++)e.inspectOpts[r[s]]=t.inspectOpts[r[s]]},t.log=function(...e){return process.stderr.write(o.formatWithOptions(t.inspectOpts,...e)+"\n")},t.formatArgs=function(r){const{namespace:s,useColors:o}=this;if(o){const t=this.color,o="[3"+(t<8?t:"8;5;"+t),n=`  ${o};1m${s} [0m`;r[0]=n+r[0].split("\n").join("\n"+n),r.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else r[0]=(t.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+s+" "+r[0]},t.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},t.load=function(){return process.env.DEBUG},t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):s.isatty(process.stderr.fd)},t.destroy=o.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),t.colors=[6,2,3,4,5,1];try{const e=r(Object(function(){var e=new Error("Cannot find module 'supports-color'");throw e.code="MODULE_NOT_FOUND",e}()));e&&(e.stderr||e).level>=2&&(t.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}t.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,t)=>{const r=t.substring(6).toLowerCase().replace(/_([a-z])/g,(e,t)=>t.toUpperCase());let s=process.env[t];return s=!!/^(yes|on|true|enabled)$/i.test(s)||!/^(no|off|false|disabled)$/i.test(s)&&("null"===s?null:Number(s)),e[r]=s,e},{}),e.exports=r(736)(t);const{formatters:n}=e.exports;n.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).split("\n").map(e=>e.trim()).join(" ")},n.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},100:(e,t)=>{"use strict";function r(){let e,t,r="pending";return{promise:new Promise((r,s)=>{e=r,t=s}),done(t){"pending"===r&&(r="resolved",e(t))},fail(e){"pending"===r&&(r="rejected",t(e))},get fulfilled(){return"pending"!==r},get status(){return r}}}Object.defineProperty(t,"__esModule",{value:!0}),t.createDeferred=t.deferred=void 0,t.deferred=r,t.createDeferred=r,t.default=r},265:function(e,t,r){"use strict";var s,o=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,o)}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[t.length]=r);return t},s(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r=s(e),i=0;i<r.length;i++)"default"!==r[i]&&o(t,e,r[i]);return n(t,e),t}),a=this&&this.__awaiter||function(e,t,r,s){return new(r||(r=Promise))(function(o,n){function i(e){try{c(s.next(e))}catch(e){n(e)}}function a(e){try{c(s.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(i,a)}c((s=s.apply(e,t||[])).next())})},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){const t=new d;l.window.registerTreeDataProvider("github-activity-dashboard",t);const r=new m;l.window.registerTreeDataProvider("github-repositories",r);const s=new h;l.window.registerTreeDataProvider("github-history",s);const o=new b;l.window.registerTreeDataProvider("github-stars",o);const n=new v;l.window.registerTreeDataProvider("github-notifications",n);const i=new E;l.window.registerTreeDataProvider("github-profile",i);const c=new T;l.window.registerTreeDataProvider("github-profile-repos",c);const g=l.window.createTreeView("github-profile-repos",{treeDataProvider:c,showCollapseAll:!0});e.subscriptions.push(g),console.log("Profile Repositories tree view created:",g?"YES":"NO"),l.commands.registerCommand("github-activity-dashboard.refresh",()=>{t.refresh(),r.refresh(),s.refresh(),o.refresh(),n.refresh(),i.refresh(),c.refresh()}),l.commands.registerCommand("github-activity-dashboard.openProfile",()=>a(this,void 0,void 0,function*(){try{const t=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken}),s=(yield r.users.getAuthenticated()).data,o=(yield r.repos.listForAuthenticatedUser({sort:"updated",per_page:50})).data,n=(yield r.orgs.listForAuthenticatedUser()).data;let i=[];try{const e=`\n                    query {\n                        user(login: "${s.login}") {\n                            pinnedItems(first: 6, types: REPOSITORY) {\n                                nodes {\n                                    ... on Repository {\n                                        name\n                                        description\n                                        url\n                                        stargazers {\n                                            totalCount\n                                        }\n                                        forks {\n                                            totalCount\n                                        }\n                                        primaryLanguage {\n                                            name\n                                            color\n                                        }\n                                        isPrivate\n                                    }\n                                }\n                            }\n                        }\n                    }\n                `;i=(yield r.graphql(e)).user.pinnedItems.nodes}catch(e){console.log("Could not fetch pinned repos:",e)}const c=(yield r.activity.listEventsForAuthenticatedUser({username:s.login,per_page:20})).data;let u=null;try{const e=yield r.repos.getContent({owner:s.login,repo:s.login,path:"README.md"});"content"in e.data&&(u=Buffer.from(e.data.content,"base64").toString("utf8"))}catch(e){console.log("No profile README found")}const d={};o.forEach(e=>{e.language&&(d[e.language]=(d[e.language]||0)+1)});const g=Object.entries(d).sort(([,e],[,t])=>t-e).slice(0,8),m=l.window.createWebviewPanel("githubProfile",`GitHub Profile - ${s.login}`,l.ViewColumn.One,{enableScripts:!0});m.webview.html=function(e,t,r=[],s=[],o=[],n=[],i=[],a=null){const c=function(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let t="";for(let r=0;r<32;r++)t+=e.charAt(Math.floor(62*Math.random()));return t}();return`\n        <!DOCTYPE html>\n        <html lang="en">\n        <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${e.cspSource} https: data:; style-src ${e.cspSource} 'unsafe-inline'; script-src 'nonce-${c}';">\n            <title>GitHub Profile</title>\n            <style>\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n                body {\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;\n                    background-color: #0d1117;\n                    color: #e6edf3;\n                    line-height: 1.5;\n                    overflow-x: hidden;\n                }\n                .container {\n                    max-width: 1280px;\n                    margin: 0 auto;\n                    padding: 24px;\n                }\n                \n                /* Profile Header */\n                .profile-header {\n                    display: flex;\n                    gap: 24px;\n                    margin-bottom: 32px;\n                    padding: 0;\n                }\n                .profile-avatar-section {\n                    flex-shrink: 0;\n                }\n                .profile-avatar {\n                    width: 296px;\n                    height: 296px;\n                    border-radius: 50%;\n                    border: 1px solid #30363d;\n                }\n                .profile-info {\n                    flex: 1;\n                    padding-top: 16px;\n                }\n                .profile-name {\n                    font-size: 26px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                    margin-bottom: 4px;\n                }\n                .profile-username {\n                    font-size: 20px;\n                    font-weight: 300;\n                    color: #7d8590;\n                    margin-bottom: 16px;\n                }\n                .profile-bio {\n                    font-size: 16px;\n                    margin-bottom: 16px;\n                    color: #e6edf3;\n                }\n                \n                /* Profile Stats */\n                .profile-stats {\n                    display: flex;\n                    gap: 16px;\n                    margin-bottom: 16px;\n                }\n                .stat-item {\n                    display: flex;\n                    align-items: center;\n                    gap: 4px;\n                    font-size: 14px;\n                    color: #7d8590;\n                }\n                .stat-number {\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                \n                /* Profile Details */\n                .profile-details {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 8px;\n                }\n                .detail-item {\n                    display: flex;\n                    align-items: center;\n                    gap: 8px;\n                    font-size: 14px;\n                    color: #e6edf3;\n                }\n                .detail-icon {\n                    width: 16px;\n                    height: 16px;\n                    color: #7d8590;\n                }\n                \n                /* Repositories Section */\n                .repos-section {\n                    margin-top: 32px;\n                }\n                .repos-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .repos-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .repos-count {\n                    background-color: #21262d;\n                    color: #e6edf3;\n                    font-size: 12px;\n                    font-weight: 500;\n                    padding: 0 6px;\n                    border-radius: 2em;\n                    line-height: 18px;\n                }\n                \n                /* Repository Grid */\n                .repos-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n                    gap: 16px;\n                }\n                .repo-card {\n                    border: 1px solid #21262d;\n                    border-radius: 6px;\n                    padding: 16px;\n                    background-color: #0d1117;\n                    transition: border-color 0.2s;\n                    cursor: pointer;\n                    position: relative;\n                }\n                .repo-card:hover {\n                    border-color: #30363d;\n                }\n                .repo-header {\n                    display: flex;\n                    align-items: flex-start;\n                    justify-content: space-between;\n                    margin-bottom: 8px;\n                }\n                .repo-name {\n                    font-size: 14px;\n                    font-weight: 600;\n                    color: #2f81f7;\n                    text-decoration: none;\n                    margin: 0;\n                    line-height: 1.25;\n                }\n                .repo-name:hover {\n                    text-decoration: underline;\n                }\n                .repo-visibility {\n                    font-size: 12px;\n                    font-weight: 500;\n                    padding: 0 7px;\n                    border-radius: 2em;\n                    border: 1px solid #21262d;\n                    color: #7d8590;\n                    line-height: 18px;\n                    margin-left: 8px;\n                }\n                .repo-visibility.public {\n                    color: #7d8590;\n                }\n                .repo-visibility.private {\n                    color: #f85149;\n                    border-color: #f85149;\n                }\n                .repo-description {\n                    font-size: 12px;\n                    color: #7d8590;\n                    margin-bottom: 8px;\n                    line-height: 1.33;\n                    display: -webkit-box;\n                    -webkit-line-clamp: 2;\n                    -webkit-box-orient: vertical;\n                    overflow: hidden;\n                }\n                .repo-footer {\n                    display: flex;\n                    align-items: center;\n                    gap: 16px;\n                    font-size: 12px;\n                    color: #7d8590;\n                }\n                .repo-meta {\n                    display: flex;\n                    align-items: center;\n                    gap: 4px;\n                }\n                .repo-language-color {\n                    width: 12px;\n                    height: 12px;\n                    border-radius: 50%;\n                }\n                .language-javascript { background-color: #f1e05a; }\n                .language-typescript { background-color: #3178c6; }\n                .language-python { background-color: #3572A5; }\n                .language-java { background-color: #b07219; }\n                .language-html { background-color: #e34c26; }\n                .language-css { background-color: #563d7c; }\n                .language-c { background-color: #555555; }\n                .language-cpp { background-color: #f34b7d; }\n                .language-csharp { background-color: #239120; }\n                .language-go { background-color: #00ADD8; }\n                .language-rust { background-color: #dea584; }\n                .language-php { background-color: #4F5D95; }\n                .language-ruby { background-color: #701516; }\n                .language-swift { background-color: #fa7343; }\n                .language-kotlin { background-color: #A97BFF; }\n                .language-dart { background-color: #00B4AB; }\n                .language-default { background-color: #586069; }\n                \n                /* Star and Fork Icons */\n                .star-icon, .fork-icon {\n                    width: 12px;\n                    height: 12px;\n                    fill: currentColor;\n                }\n                \n                /* Updated timestamp */\n                .repo-updated {\n                    font-size: 12px;\n                    color: #7d8590;\n                    margin-left: auto;\n                }\n                \n                /* Organizations Section */\n                .orgs-section {\n                    margin-top: 32px;\n                }\n                .orgs-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .orgs-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .orgs-count {\n                    background-color: #21262d;\n                    color: #e6edf3;\n                    font-size: 12px;\n                    font-weight: 500;\n                    padding: 0 6px;\n                    border-radius: 2em;\n                    line-height: 18px;\n                }\n                .orgs-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n                    gap: 12px;\n                }\n                .org-card {\n                    border: 1px solid #21262d;\n                    border-radius: 6px;\n                    padding: 12px;\n                    background-color: #0d1117;\n                    transition: border-color 0.2s;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    gap: 12px;\n                }\n                .org-card:hover {\n                    border-color: #30363d;\n                }\n                .org-avatar {\n                    width: 40px;\n                    height: 40px;\n                    border-radius: 6px;\n                    border: 1px solid #30363d;\n                }\n                .org-info h4 {\n                    font-size: 14px;\n                    font-weight: 600;\n                    color: #2f81f7;\n                    margin: 0 0 2px 0;\n                }\n                .org-info p {\n                    font-size: 12px;\n                    color: #7d8590;\n                    margin: 0;\n                }\n                \n                /* Pinned Repositories Section */\n                .pinned-section {\n                    margin-top: 32px;\n                }\n                .pinned-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .pinned-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .pinned-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n                    gap: 16px;\n                }\n                .pinned-card {\n                    border: 1px solid #21262d;\n                    border-radius: 6px;\n                    padding: 16px;\n                    background-color: #0d1117;\n                    transition: border-color 0.2s;\n                    cursor: pointer;\n                }\n                .pinned-card:hover {\n                    border-color: #30363d;\n                }\n                .pinned-header-row {\n                    display: flex;\n                    align-items: flex-start;\n                    justify-content: space-between;\n                    margin-bottom: 8px;\n                }\n                .pinned-name {\n                    font-size: 14px;\n                    font-weight: 600;\n                    color: #2f81f7;\n                    text-decoration: none;\n                    margin: 0;\n                }\n                .pinned-visibility {\n                    font-size: 12px;\n                    font-weight: 500;\n                    padding: 0 7px;\n                    border-radius: 2em;\n                    border: 1px solid #21262d;\n                    color: #7d8590;\n                    line-height: 18px;\n                }\n                .pinned-description {\n                    font-size: 12px;\n                    color: #7d8590;\n                    margin-bottom: 8px;\n                    line-height: 1.33;\n                }\n                .pinned-footer {\n                    display: flex;\n                    align-items: center;\n                    gap: 16px;\n                    font-size: 12px;\n                    color: #7d8590;\n                }\n                \n                /* Activity Section */\n                .activity-section {\n                    margin-top: 32px;\n                }\n                .activity-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .activity-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .activity-list {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 12px;\n                }\n                .activity-item {\n                    display: flex;\n                    align-items: center;\n                    gap: 12px;\n                    padding: 12px;\n                    border: 1px solid #21262d;\n                    border-radius: 6px;\n                    background-color: #0d1117;\n                    cursor: pointer;\n                    transition: border-color 0.2s;\n                }\n                .activity-item:hover {\n                    border-color: #30363d;\n                }\n                .activity-icon {\n                    width: 16px;\n                    height: 16px;\n                    color: #7d8590;\n                    flex-shrink: 0;\n                }\n                .activity-content {\n                    flex: 1;\n                    font-size: 12px;\n                    color: #e6edf3;\n                }\n                .activity-repo {\n                    font-weight: 500;\n                    color: #2f81f7;\n                }\n                .activity-time {\n                    font-size: 11px;\n                    color: #7d8590;\n                }\n                \n                /* Languages Section */\n                .languages-section {\n                    margin-top: 32px;\n                }\n                .languages-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .languages-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .languages-list {\n                    display: flex;\n                    flex-wrap: wrap;\n                    gap: 8px;\n                }\n                .language-item {\n                    display: flex;\n                    align-items: center;\n                    gap: 6px;\n                    padding: 4px 8px;\n                    border-radius: 12px;\n                    background-color: #21262d;\n                    font-size: 12px;\n                    color: #e6edf3;\n                }\n                .language-color {\n                    width: 10px;\n                    height: 10px;\n                    border-radius: 50%;\n                }\n                \n                /* Profile README Section */\n                .readme-section {\n                    margin-top: 32px;\n                }\n                .readme-header {\n                    display: flex;\n                    align-items: center;\n                    justify-content: space-between;\n                    margin-bottom: 16px;\n                    padding-bottom: 8px;\n                    border-bottom: 1px solid #21262d;\n                }\n                .readme-title {\n                    font-size: 16px;\n                    font-weight: 600;\n                    color: #f0f6fc;\n                }\n                .readme-content {\n                    border: 1px solid #21262d;\n                    border-radius: 6px;\n                    padding: 16px;\n                    background-color: #0d1117;\n                    font-size: 14px;\n                    line-height: 1.5;\n                    color: #e6edf3;\n                    overflow-x: auto;\n                }\n                .readme-content h1,\n                .readme-content h2,\n                .readme-content h3 {\n                    color: #f0f6fc;\n                    margin-top: 16px;\n                    margin-bottom: 8px;\n                }\n                .readme-content h1 { font-size: 20px; }\n                .readme-content h2 { font-size: 18px; }\n                .readme-content h3 { font-size: 16px; }\n                .readme-content code {\n                    background-color: #21262d;\n                    padding: 2px 4px;\n                    border-radius: 3px;\n                    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\n                    font-size: 12px;\n                }\n                .readme-content pre {\n                    background-color: #21262d;\n                    padding: 12px;\n                    border-radius: 6px;\n                    overflow-x: auto;\n                    margin: 8px 0;\n                }\n                .readme-content pre code {\n                    background-color: transparent;\n                    padding: 0;\n                }\n                \n                /* Responsive */\n                @media (max-width: 768px) {\n                    .profile-header {\n                        flex-direction: column;\n                        align-items: center;\n                        text-align: center;\n                    }\n                    .profile-avatar {\n                        width: 200px;\n                        height: 200px;\n                    }\n                    .repos-grid {\n                        grid-template-columns: 1fr;\n                    }\n                }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                \x3c!-- Profile Header --\x3e\n                <div class="profile-header">\n                    <div class="profile-avatar-section">\n                        <img src="${t.avatar_url}" alt="${t.name||t.login}" class="profile-avatar">\n                    </div>\n                    <div class="profile-info">\n                        <h1 class="profile-name">${t.name||t.login}</h1>\n                        <h2 class="profile-username">${t.login}</h2>\n                        ${t.bio?`<p class="profile-bio">${t.bio}</p>`:""}\n                        \n                        <div class="profile-stats">\n                            <div class="stat-item">\n                                <svg class="star-icon" viewBox="0 0 16 16">\n                                    <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25z"/>\n                                </svg>\n                                <span class="stat-number">${t.public_repos}</span> repositories\n                            </div>\n                            <div class="stat-item">\n                                <span class="stat-number">${t.followers}</span> followers\n                            </div>\n                            <div class="stat-item">\n                                <span class="stat-number">${t.following}</span> following\n                            </div>\n                        </div>\n                        \n                        <div class="profile-details">\n                            ${t.company?`\n                                <div class="detail-item">\n                                    <svg class="detail-icon" viewBox="0 0 16 16" fill="currentColor">\n                                        <path d="M1.75 16A1.75 1.75 0 010 14.25V1.75C0 .784.784 0 1.75 0h8.5C11.216 0 12 .784 12 1.75v12.5c0 .085-.006.168-.018.25h2.268a.25.25 0 00.25-.25V8.285a.25.25 0 00-.111-.208l-1.055-.703a.75.75 0 11.832-1.248l1.055.703c.487.325.779.871.779 1.456v5.965A1.75 1.75 0 0114.25 16h-3.5a.75.75 0 01-.197-.026c-.099.017-.2.026-.303.026h-8.5zM9 9a.75.75 0 000-1.5H4.5a.75.75 0 000 1.5H9zM4.5 5.25a.75.75 0 000 1.5h5a.75.75 0 000-1.5h-5z"/>\n                                    </svg>\n                                    ${t.company}\n                                </div>\n                            `:""}\n                            ${t.location?`\n                                <div class="detail-item">\n                                    <svg class="detail-icon" viewBox="0 0 16 16" fill="currentColor">\n                                        <path d="M11.536 3.464a5 5 0 010 7.072L8 14.07l-3.536-3.535a5 5 0 117.072-7.07v.001zm-4.95 7.07a3.5 3.5 0 006.895 0L8 6.062 6.586 10.534z"/>\n                                        <circle cx="8" cy="6" r="2"/>\n                                    </svg>\n                                    ${t.location}\n                                </div>\n                            `:""}\n                            ${t.email?`\n                                <div class="detail-item">\n                                    <svg class="detail-icon" viewBox="0 0 16 16" fill="currentColor">\n                                        <path d="M1.75 2A1.75 1.75 0 000 3.75v.736a.75.75 0 000 .027v7.737C0 13.216.784 14 1.75 14h12.5A1.75 1.75 0 0016 12.25v-8.5A1.75 1.75 0 0014.25 2H1.75zM14.5 4.07v-.32a.25.25 0 00-.25-.25H1.75a.25.25 0 00-.25.25v.32L8 7.88l6.5-3.81zm-13 1.74v6.441c0 .138.112.25.25.25h12.5a.25.25 0 00.25-.25V5.809L8.38 9.397a.75.75 0 01-.76 0L1.5 5.809z"/>\n                                    </svg>\n                                    ${t.email}\n                                </div>\n                            `:""}\n                            ${t.blog?`\n                                <div class="detail-item">\n                                    <svg class="detail-icon" viewBox="0 0 16 16" fill="currentColor">\n                                        <path d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"/>\n                                    </svg>\n                                    <a href="${t.blog}" target="_blank" style="color: #2f81f7; text-decoration: none;">${t.blog}</a>\n                                </div>\n                            `:""}\n                            <div class="detail-item">\n                                <svg class="detail-icon" viewBox="0 0 16 16" fill="currentColor">\n                                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>\n                                </svg>\n                                Joined ${new Date(t.created_at).toLocaleDateString("en-US",{year:"numeric",month:"long"})}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                \x3c!-- Repositories Section --\x3e\n                <div class="repos-section">\n                    <div class="repos-header">\n                        <h2 class="repos-title">Repositories</h2>\n                        <span class="repos-count">${r.length}</span>\n                    </div>\n                    \n                    <div class="repos-grid">\n                        ${r.map(e=>`\n                            <div class="repo-card" onclick="openRepository('${e.clone_url}', '${e.name}')">\n                                <div class="repo-header">\n                                    <div style="display: flex; align-items: center;">\n                                        <h3 class="repo-name">${e.name}</h3>\n                                        <span class="repo-visibility ${e.private?"private":"public"}">\n                                            ${e.private?"Private":"Public"}\n                                        </span>\n                                    </div>\n                                </div>\n                                ${e.description?`<p class="repo-description">${e.description}</p>`:""}\n                                <div class="repo-footer">\n                                    ${e.language?`\n                                        <div class="repo-meta">\n                                            <span class="repo-language-color language-${e.language.toLowerCase()}"></span>\n                                            ${e.language}\n                                        </div>\n                                    `:""}\n                                    <div class="repo-meta">\n                                        <svg class="star-icon" viewBox="0 0 16 16" fill="currentColor">\n                                            <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25z"/>\n                                        </svg>\n                                        ${e.stargazers_count}\n                                    </div>\n                                    <div class="repo-meta">\n                                        <svg class="fork-icon" viewBox="0 0 16 16" fill="currentColor">\n                                            <path d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878z"/>\n                                        </svg>\n                                        ${e.forks_count}\n                                    </div>\n                                    <span class="repo-updated">Updated ${(()=>{const t=new Date(e.updated_at),r=(new Date).getTime()-t.getTime(),s=Math.floor(r/864e5);return 0===s?"today":1===s?"yesterday":s<30?s+" days ago":s<365?Math.floor(s/30)+" months ago":Math.floor(s/365)+" years ago"})()}</span>\n                                </div>\n                            </div>\n                        `).join("")}\n                    </div>\n                </div>\n\n                \x3c!-- Organizations Section --\x3e\n                ${s.length>0?`\n                <div class="orgs-section">\n                    <div class="orgs-header">\n                        <h2 class="orgs-title">Organizations</h2>\n                        <span class="orgs-count">${s.length}</span>\n                    </div>\n                    \n                    <div class="orgs-grid">\n                        ${s.map(e=>`\n                            <div class="org-card" onclick="openOrganization('${e.login}')">\n                                <img src="${e.avatar_url}" alt="${e.login}" class="org-avatar">\n                                <div class="org-info">\n                                    <h4>${e.login}</h4>\n                                    <p>${e.description||"No description"}</p>\n                                </div>\n                            </div>\n                        `).join("")}\n                    </div>\n                </div>\n                `:""}\n\n                \x3c!-- Pinned Repositories Section --\x3e\n                ${o.length>0?`\n                <div class="pinned-section">\n                    <div class="pinned-header">\n                        <h2 class="pinned-title">Pinned Repositories</h2>\n                    </div>\n                    \n                    <div class="pinned-grid">\n                        ${o.map(e=>`\n                            <div class="pinned-card" onclick="openRepository('${e.url}', '${e.name}')">\n                                <div class="pinned-header-row">\n                                    <h3 class="pinned-name">${e.name}</h3>\n                                    <span class="pinned-visibility ${e.isPrivate?"private":"public"}">\n                                        ${e.isPrivate?"Private":"Public"}\n                                    </span>\n                                </div>\n                                ${e.description?`<p class="pinned-description">${e.description}</p>`:""}\n                                <div class="pinned-footer">\n                                    ${e.primaryLanguage?`\n                                        <div class="repo-meta">\n                                            <span class="repo-language-color" style="background-color: ${e.primaryLanguage.color}"></span>\n                                            ${e.primaryLanguage.name}\n                                        </div>\n                                    `:""}\n                                    <div class="repo-meta">\n                                        <svg class="star-icon" viewBox="0 0 16 16" fill="currentColor">\n                                            <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25z"/>\n                                        </svg>\n                                        ${e.stargazers.totalCount}\n                                    </div>\n                                    <div class="repo-meta">\n                                        <svg class="fork-icon" viewBox="0 0 16 16" fill="currentColor">\n                                            <path d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878z"/>\n                                        </svg>\n                                        ${e.forks.totalCount}\n                                    </div>\n                                </div>\n                            </div>\n                        `).join("")}\n                    </div>\n                </div>\n                `:""}\n\n                \x3c!-- Recent Activity Section --\x3e\n                ${n.length>0?`\n                <div class="activity-section">\n                    <div class="activity-header">\n                        <h2 class="activity-title">Recent Activity</h2>\n                    </div>\n                    \n                    <div class="activity-list">\n                        ${n.slice(0,10).map(e=>{var t;const r=function(e){const t=(new Date).getTime()-e.getTime(),r=Math.floor(t/6e4),s=Math.floor(t/36e5),o=Math.floor(t/864e5);return r<1?"now":r<60?`${r}m`:s<24?`${s}h`:o<30?`${o}d`:o<365?`${Math.floor(o/30)}mo`:`${Math.floor(o/365)}y`}(new Date(e.created_at));let s="git-commit",o="";switch(e.type){case"PushEvent":s="git-commit",o=`Pushed ${(null===(t=e.payload.commits)||void 0===t?void 0:t.length)||0} commit(s) to`;break;case"PullRequestEvent":s="git-pull-request",o=`${e.payload.action} a pull request in`;break;case"IssuesEvent":s="issues",o=`${e.payload.action} an issue in`;break;case"CreateEvent":s="add",o=`Created ${e.payload.ref_type} in`;break;case"DeleteEvent":s="trash",o=`Deleted ${e.payload.ref_type} in`;break;case"ForkEvent":s="repo-forked",o="Forked";break;case"WatchEvent":s="star",o="Starred";break;default:s="circle",o=`${e.type.replace("Event","").toLowerCase()} in`}return`\n                                <div class="activity-item" onclick="openEvent('${e.repo.url.replace("api.github.com/repos","github.com")}')">\n                                    <svg class="activity-icon" viewBox="0 0 16 16" fill="currentColor">\n                                        <path d="${function(e){const t={"git-commit":"M10.5 7.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM8.75 7.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM10.5 9.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM8.75 9.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM10.5 11.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM8.75 11.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM10.5 13.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM8.75 13.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5zM2.5 2.75a.75.75 0 00-1.5 0v10.5a.75.75 0 001.5 0V2.75z","git-pull-request":"M1.5 3.25a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zm5.677-.177L9.573.677A.25.25 0 0110 .854V2.5h1A2.5 2.5 0 0113.5 5v5.628a2.251 2.251 0 101.5 0V5a4 4 0 00-4-4h-1V.854a.25.25 0 01.43-.177L7.177 3.073a.25.25 0 010 .354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm0 9.5a.75.75 0 100 1.5.75.75 0 000-1.5zm8.25.75a.75.75 0 100 1.5.75.75 0 000-1.5z",issues:"M8 9.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM1.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v5.5a.25.25 0 01-.25.25h-3.5a.75.75 0 00-.53.22L3.5 11.44V9.25a.75.75 0 00-.75-.75h-1a.25.25 0 01-.25-.25v-5.5zM1.75 1h8.5v5.5h-2.75V9.25c0 .138.112.25.25.25h1.25l2.5 2.5v-2.5h.75v-5.5a1.75 1.75 0 00-1.75-1.75h-8.5A1.75 1.75 0 000 1.75v5.5C0 8.216.784 9 1.75 9H2.5v2.5l2.5-2.5H7.25a.25.25 0 00.25-.25V6.75h2.75V1.75z",add:"M7.75 2a.75.75 0 01.75.75V7h4.25a.75.75 0 110 1.5H8.5v4.25a.75.75 0 11-1.5 0V8.5H2.75a.75.75 0 010-1.5H7V2.75A.75.75 0 017.75 2z",trash:"M11 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25h-.5v8.5a1.75 1.75 0 01-1.75 1.75h-7a1.75 1.75 0 01-1.75-1.75v-8.5h-.5a.25.25 0 01-.25-.25v-.5a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25v-.5A1.75 1.75 0 015.25 0h3.5A1.75 1.75 0 0110 1.75v.5a.25.25 0 01-.25.25h-.5zM4.5 2.75v8.5a.25.25 0 00.25.25h4.5a.25.25 0 00.25-.25v-8.5a.25.25 0 00-.25-.25h-4.5a.25.25 0 00-.25.25zM6.25 3.5v6a.25.25 0 01-.5 0v-6a.25.25 0 01.5 0zm1.5 0v6a.25.25 0 01-.5 0v-6a.25.25 0 01.5 0z","repo-forked":"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm-1.75 7.378a.75.75 0 100 1.5.75.75 0 000-1.5zm3-8.75a.75.75 0 100 1.5.75.75 0 000-1.5z",star:"M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25z",circle:"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1112 0A6 6 0 012 8z"};return t[e]||t.circle}(s)}"/>\n                                    </svg>\n                                    <div class="activity-content">\n                                        <span>${o}</span>\n                                        <span class="activity-repo">${e.repo.name}</span>\n                                    </div>\n                                    <span class="activity-time">${r}</span>\n                                </div>\n                            `}).join("")}\n                    </div>\n                </div>\n                `:""}\n\n                \x3c!-- Languages Section --\x3e\n                ${i.length>0?`\n                <div class="languages-section">\n                    <div class="languages-header">\n                        <h2 class="languages-title">Most Used Languages</h2>\n                    </div>\n                    \n                    <div class="languages-list">\n                        ${i.map(([e,t])=>{return`\n                            <div class="language-item">\n                                <span class="language-color" style="background-color: ${r=e,{JavaScript:"#f1e05a",TypeScript:"#3178c6",Python:"#3572A5",Java:"#b07219",HTML:"#e34c26",CSS:"#563d7c",C:"#555555","C++":"#f34b7d","C#":"#239120",Go:"#00ADD8",Rust:"#dea584",PHP:"#4F5D95",Ruby:"#701516",Swift:"#fa7343",Kotlin:"#A97BFF",Dart:"#00B4AB",Scala:"#c22d40",R:"#198CE7",Shell:"#89e051",PowerShell:"#012456",Vue:"#4FC08D",React:"#61DAFB"}[r]||"#586069"}"></span>\n                                <span>${e}</span>\n                                <span>${t}</span>\n                            </div>\n                        `;var r}).join("")}\n                    </div>\n                </div>\n                `:""}\n\n                \x3c!-- Profile README Section --\x3e\n                ${a?`\n                <div class="readme-section">\n                    <div class="readme-header">\n                        <h2 class="readme-title">README</h2>\n                    </div>\n                    \n                    <div class="readme-content">\n                        ${l=a,l?l.replace(/^### (.*$)/gim,"<h3>$1</h3>").replace(/^## (.*$)/gim,"<h2>$1</h2>").replace(/^# (.*$)/gim,"<h1>$1</h1>").replace(/\*\*(.*)\*\*/gim,"<strong>$1</strong>").replace(/\*(.*)\*/gim,"<em>$1</em>").replace(/`([^`]+)`/gim,"<code>$1</code>").replace(/```([\s\S]*?)```/gim,"<pre><code>$1</code></pre>").replace(/\n\n/gim,"</p><p>").replace(/\n/gim,"<br>").replace(/^/,"<p>").replace(/$/,"</p>"):""}\n                    </div>\n                </div>\n                `:""}\n\n                \x3c!-- Footer --\x3e\n                <div class="profile-footer">\n                    <a href="${t.html_url}" target="_blank" class="github-link">\n                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">\n                            <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"/>\n                                        </svg>\n                                        View on GitHub\n                                    </a>\n                                </div>\n                            </div>\n\n            <script nonce="${c}">\n                const vscode = acquireVsCodeApi();\n                \n                function openOrganization(orgName) {\n                    vscode.postMessage({\n                        command: 'openOrg',\n                        orgName: orgName\n                    });\n                }\n                \n                function openEvent(eventUrl) {\n                    vscode.postMessage({\n                        command: 'openEvent',\n                        eventUrl: eventUrl\n                    });\n                }\n            <\/script>\n        </body>\n        </html>\n    `;var l}(m.webview,s,o,n,i,c,g,u),m.webview.onDidReceiveMessage(e=>a(this,void 0,void 0,function*(){switch(console.log("Received message from webview:",e),e.command){case"openRepo":try{console.log("Processing openRepo command");const t=e.repoUrl,r=e.repoName;console.log(`Repository URL: ${t}, Name: ${r}`);const s=t.match(/github\.com[\/:]([^\/]+)\/([^\/\.]+)/);if(console.log("URL match result:",s),s){const[,e,t]=s;console.log(`Extracted owner: ${e}, repo: ${t}`),yield l.commands.executeCommand("github-activity-dashboard.expandProfileRepo",e,t)}else console.log("Failed to parse repository URL"),l.window.showErrorMessage("Invalid repository URL format")}catch(e){console.error("Error in openRepo handler:",e),l.window.showErrorMessage(`Failed to open repository: ${e.message}`)}break;case"openOrg":try{const t=`https://github.com/${e.orgName}`;yield l.env.openExternal(l.Uri.parse(t))}catch(e){l.window.showErrorMessage(`Failed to open organization: ${e.message}`)}break;case"openEvent":try{yield l.env.openExternal(l.Uri.parse(e.eventUrl))}catch(e){l.window.showErrorMessage(`Failed to open event: ${e.message}`)}}}),void 0,e.subscriptions)}catch(e){l.window.showErrorMessage(`Failed to load profile: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.openStarredFile",e=>a(this,void 0,void 0,function*(){var t,r,s;if(!(null===(t=e.repoInfo)||void 0===t?void 0:t.owner)||!(null===(r=e.repoInfo)||void 0===r?void 0:r.repo)||!(null===(s=e.repoInfo)||void 0===s?void 0:s.sha))return;const o=new p.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const t=yield o.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),r=Buffer.from(t.data.content,"base64").toString("utf8"),s=y(e.label.split(".").pop()||""),n=yield l.workspace.openTextDocument({content:r,language:s});yield l.window.showTextDocument(n,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createIssue",()=>a(this,void 0,void 0,function*(){var e;const r=yield l.window.showInputBox({prompt:"Enter issue title",placeHolder:"Bug: Something is not working..."});if(!r)return;const s=yield l.window.showInputBox({prompt:"Enter issue description (optional)",placeHolder:"Describe the issue..."}),o=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(o)try{const e=(0,u.default)(o.uri.fsPath),n=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!n)return void l.window.showErrorMessage("Not a GitHub repository");const[,i,a]=n,c=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),d=new p.Octokit({auth:c.accessToken}),g=yield d.issues.create({owner:i,repo:a,title:r,body:s||""});l.window.showInformationMessage(`Issue created: #${g.data.number}`),t.refresh()}catch(e){l.window.showErrorMessage(`Failed to create issue: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.searchRepos",()=>a(this,void 0,void 0,function*(){const e=yield l.window.showInputBox({prompt:"Search GitHub repositories",placeHolder:"Enter search terms..."});if(e)try{const t=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),r=new p.Octokit({auth:t.accessToken}),s=yield r.search.repos({q:e,sort:"stars",order:"desc"}),o=l.window.createQuickPick();o.items=s.data.items.slice(0,20).map(e=>({label:e.full_name,description:`⭐ ${e.stargazers_count} | ${e.description||"No description"}`,detail:e.html_url})),o.placeholder="Select a repository to open",o.onDidChangeSelection(e=>{e[0]&&(l.env.openExternal(l.Uri.parse(e[0].detail)),o.dispose())}),o.show()}catch(e){l.window.showErrorMessage(`Search failed: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.checkoutCommit",e=>a(this,void 0,void 0,function*(){var o;const n=null===(o=l.workspace.workspaceFolders)||void 0===o?void 0:o[0];if(n){const o=(0,u.default)(n.uri.fsPath);try{yield o.checkout(e),l.window.showInformationMessage(`Checked out commit ${e.substring(0,7)}`),t.refresh(),r.refresh(),s.refresh()}catch(e){l.window.showErrorMessage(`Failed to checkout commit: ${e.message}`)}}})),l.commands.registerCommand("github-activity-dashboard.openFile",e=>a(this,void 0,void 0,function*(){if(!e.fileInfo.owner||!e.fileInfo.repo||!e.fileInfo.sha)return;const t=new p.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken}),r=yield t.git.getBlob({owner:e.fileInfo.owner,repo:e.fileInfo.repo,file_sha:e.fileInfo.sha}),s=Buffer.from(r.data.content,"base64").toString("utf8"),o=y(e.label.split(".").pop()||""),n=yield l.workspace.openTextDocument({content:s,language:o});yield l.window.showTextDocument(n,{preview:!0})})),l.commands.registerCommand("github-activity-dashboard.openProfileFile",e=>a(this,void 0,void 0,function*(){var t,r,s;if(!(null===(t=e.repoInfo)||void 0===t?void 0:t.owner)||!(null===(r=e.repoInfo)||void 0===r?void 0:r.repo)||!(null===(s=e.repoInfo)||void 0===s?void 0:s.sha))return;const o=new p.Octokit({auth:(yield l.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken});try{const t=yield o.git.getBlob({owner:e.repoInfo.owner,repo:e.repoInfo.repo,file_sha:e.repoInfo.sha}),r=Buffer.from(t.data.content,"base64").toString("utf8"),s=y(e.label.split(".").pop()||""),n=yield l.workspace.openTextDocument({content:r,language:s});yield l.window.showTextDocument(n,{preview:!0})}catch(e){l.window.showErrorMessage(`Failed to open file: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.openRepo",(e,t)=>a(this,void 0,void 0,function*(){try{const r=`https://github.com/${e}/${t}`,s=l.Uri.parse(r);yield l.env.openExternal(s)}catch(e){l.window.showErrorMessage(`Failed to open repository: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.testExpandRepo",()=>a(this,void 0,void 0,function*(){const e=yield l.window.showInputBox({prompt:"Enter repository owner",placeHolder:"e.g., microsoft"}),t=yield l.window.showInputBox({prompt:"Enter repository name",placeHolder:"e.g., vscode"});e&&t&&(yield l.commands.executeCommand("github-activity-dashboard.expandProfileRepo",e,t))})),l.commands.registerCommand("github-activity-dashboard.viewWorkflowRuns",(e,t)=>a(this,void 0,void 0,function*(){try{const r=`https://github.com/${e}/${t}/actions`;yield l.env.openExternal(l.Uri.parse(r))}catch(e){l.window.showErrorMessage(`Failed to open workflow runs: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createPullRequest",()=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=(0,u.default)(t.uri.fsPath),r=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!r)return void l.window.showErrorMessage("Not a GitHub repository");const[,s,o]=r,n=yield e.revparse(["--abbrev-ref","HEAD"]),i=yield l.window.showInputBox({prompt:"Enter pull request title",placeHolder:"Fix bug in authentication..."});if(!i)return;const a=yield l.window.showInputBox({prompt:"Enter pull request description (optional)",placeHolder:"This PR fixes the authentication issue..."}),c=yield l.window.showInputBox({prompt:"Enter base branch",placeHolder:"main",value:"main"});if(!c)return;const d=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),g=new p.Octokit({auth:d.accessToken}),m=yield g.pulls.create({owner:s,repo:o,title:i,body:a||"",head:n,base:c});l.window.showInformationMessage(`Pull request created: #${m.data.number}`),l.env.openExternal(l.Uri.parse(m.data.html_url))}catch(e){l.window.showErrorMessage(`Failed to create pull request: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.viewPullRequest",(e,t)=>a(this,void 0,void 0,function*(){try{const r=`https://github.com/${e}/pull/${t}`;yield l.env.openExternal(l.Uri.parse(r))}catch(e){l.window.showErrorMessage(`Failed to open pull request: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createBranch",()=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=yield l.window.showInputBox({prompt:"Enter new branch name",placeHolder:"feature/new-feature"});if(!e)return;const r=(0,u.default)(t.uri.fsPath);yield r.checkoutLocalBranch(e),l.window.showInformationMessage(`Branch '${e}' created and checked out`)}catch(e){l.window.showErrorMessage(`Failed to create branch: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.switchBranch",(e,t,r)=>a(this,void 0,void 0,function*(){var s;try{const o=null===(s=l.workspace.workspaceFolders)||void 0===s?void 0:s[0];if(o){const e=(0,u.default)(o.uri.fsPath);yield e.checkout(r),l.window.showInformationMessage(`Switched to branch '${r}'`)}else l.window.showInformationMessage(`Branch: ${r} in ${e}/${t}`)}catch(e){l.window.showErrorMessage(`Failed to switch branch: ${e.message}`)}})),l.commands.registerCommand("github-activity-dashboard.createRelease",()=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=(0,u.default)(t.uri.fsPath),r=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!r)return void l.window.showErrorMessage("Not a GitHub repository");const[,s,o]=r,n=(yield e.tags()).latest||"v1.0.0",i=yield l.window.showInputBox({prompt:"Enter tag name for release",placeHolder:"v1.1.0",value:n});if(!i)return;const a=yield l.window.showInputBox({prompt:"Enter release title",placeHolder:"Release v1.1.0"});if(!a)return;const c=yield l.window.showInputBox({prompt:"Enter release description (optional)",placeHolder:"This release includes..."}),d=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),g=new p.Octokit({auth:d.accessToken}),m=yield g.repos.createRelease({owner:s,repo:o,tag_name:i,name:a,body:c||"",draft:!1,prerelease:i.includes("beta")||i.includes("alpha")});l.window.showInformationMessage(`Release created: ${m.data.tag_name}`),l.env.openExternal(l.Uri.parse(m.data.html_url))}catch(e){l.window.showErrorMessage(`Failed to create release: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.viewRepositoryStats",()=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=(0,u.default)(t.uri.fsPath),r=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!r)return void l.window.showErrorMessage("Not a GitHub repository");const[,s,o]=r,n=yield l.authentication.getSession("github",["repo"],{createIfNone:!0}),i=new p.Octokit({auth:n.accessToken}),[a,c,d]=yield Promise.all([i.repos.get({owner:s,repo:o}),i.repos.listContributors({owner:s,repo:o}),i.repos.listLanguages({owner:s,repo:o})]),g=a.data,m=c.data.length,h=Object.entries(d.data).sort(([,e],[,t])=>t-e).slice(0,5).map(([e,t])=>`${e}: ${Math.round(t/1024)} KB`).join(", "),f=`📊 Repository Statistics for ${s}/${o}:\n⭐ Stars: ${g.stargazers_count}\n🍴 Forks: ${g.forks_count}\n👀 Watchers: ${g.watchers_count}\n🐛 Open Issues: ${g.open_issues_count}\n👥 Contributors: ${m}\n💻 Languages: ${h}\n📅 Created: ${new Date(g.created_at).toLocaleDateString()}\n🔄 Updated: ${new Date(g.updated_at).toLocaleDateString()}`;l.window.showInformationMessage(f,"View on GitHub").then(e=>{"View on GitHub"===e&&l.env.openExternal(l.Uri.parse(g.html_url))})}catch(e){l.window.showErrorMessage(`Failed to get repository stats: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.searchCode",()=>a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(t)try{const e=(0,u.default)(t.uri.fsPath),r=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!r)return void l.window.showErrorMessage("Not a GitHub repository");const[,s,o]=r,n=yield l.window.showInputBox({prompt:"Enter search query",placeHolder:"function login"});if(!n)return;const i=`https://github.com/${s}/${o}/search?q=${encodeURIComponent(n)}&type=code`;yield l.env.openExternal(l.Uri.parse(i))}catch(e){l.window.showErrorMessage(`Failed to search code: ${e.message}`)}else l.window.showErrorMessage("No workspace folder open")})),l.commands.registerCommand("github-activity-dashboard.createGist",()=>a(this,void 0,void 0,function*(){try{const e=yield l.window.showInputBox({prompt:"Enter filename",placeHolder:"example.js"});if(!e)return;const t=yield l.window.showInputBox({prompt:"Enter gist content",placeHolder:'console.log("Hello, World!");'});if(!t)return;const r=yield l.window.showInputBox({prompt:"Enter gist description (optional)",placeHolder:"A simple example"}),s=yield l.window.showQuickPick(["Public","Secret"],{placeHolder:"Choose visibility"});if(!s)return;const o=yield l.authentication.getSession("github",["gist"],{createIfNone:!0}),n=new p.Octokit({auth:o.accessToken}),i=yield n.gists.create({description:r||"",public:"Public"===s,files:{[e]:{content:t}}});l.window.showInformationMessage("Gist created successfully!"),i.data.html_url&&l.env.openExternal(l.Uri.parse(i.data.html_url))}catch(e){l.window.showErrorMessage(`Failed to create gist: ${e.message}`)}}))},t.deactivate=function(){};const l=i(r(398)),p=r(458),u=c(r(662));class d{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e)return[];{const e=yield this.octokit.users.getAuthenticated().then(e=>e.data.login),[t,r]=yield Promise.all([this.octokit.search.issuesAndPullRequests({q:`is:open is:issue assignee:${e}`}),this.octokit.search.issuesAndPullRequests({q:`is:open is:pr review-requested:${e}`})]),s=t.data.items.map(e=>{const t=new l.TreeItem(e.title,l.TreeItemCollapsibleState.None);return t.command={command:"vscode.open",title:"Open Issue",arguments:[l.Uri.parse(e.html_url)]},t.tooltip=`#${e.number}`,t}),o=r.data.items.map(e=>{const t=new l.TreeItem(e.title,l.TreeItemCollapsibleState.None);return t.command={command:"vscode.open",title:"Open Pull Request",arguments:[l.Uri.parse(e.html_url)]},t.tooltip=`#${e.number}`,t});return[new l.TreeItem(`Assigned Issues (${s.length})`,l.TreeItemCollapsibleState.Expanded),...s,new l.TreeItem(`Review Requests (${o.length})`,l.TreeItemCollapsibleState.Expanded),...o]}})}}class g extends l.TreeItem{constructor(e,t,r){super(e,t),this.label=e,this.collapsibleState=t,this.fileInfo=r,"file"===r.type?(this.command={command:"github-activity-dashboard.openFile",title:"Open File",arguments:[this]},this.iconPath=new l.ThemeIcon("file")):"dir"===r.type&&(this.iconPath=new l.ThemeIcon("folder"))}}class m{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getGitInfo(){return a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(!t)return null;const s=t.uri.fsPath;try{const e=e=>new Promise((t,o)=>{r(317).exec(e,{cwd:s},(e,r,s)=>{if(e)return o(e);t({stdout:r,stderr:s})})}),t=(yield e("git config --get remote.origin.url")).stdout.trim().match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!t)return null;const[,o,n]=t,i=(yield e("git rev-parse --abbrev-ref HEAD")).stdout.trim();yield e("git fetch");const a=(yield e(`git rev-list --left-right --count origin/${i}...HEAD`)).stdout.trim(),[c,l]=a.split("\t").map(Number);return{owner:o,repo:n,branch:i,ahead:l,behind:c}}catch(e){return console.error("Error getting git info:",e),null}})}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e){const{owner:t,repo:r,path:s}=e.fileInfo;if("string"!=typeof t||"string"!=typeof r||"string"!=typeof s)return[];const o=yield this.octokit.repos.getContent({owner:t,repo:r,path:s});return Array.isArray(o.data)?o.data.map(e=>new g(e.name,"dir"===e.type?l.TreeItemCollapsibleState.Collapsed:l.TreeItemCollapsibleState.None,{owner:t,repo:r,path:e.path,type:e.type,sha:e.sha})):[]}{const e=yield this.getGitInfo();if(!e)return[new g("Not a git repository or no remote found.",l.TreeItemCollapsibleState.None,{type:"message"})];const{owner:t,repo:r,branch:s,ahead:o,behind:n}=e;let i="";i=o>0&&n>0?`↑${o} ↓${n}`:o>0?`↑${o}`:n>0?`↓${n}`:"✓ Synced";const a=new g(`${r} (${s})`,l.TreeItemCollapsibleState.Collapsed,{owner:t,repo:r,path:"",type:"dir"});return a.description=i,a.tooltip=`Current repository: ${t}/${r}`,a.iconPath=new l.ThemeIcon("repo"),[a]}})}}class h{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){var e;const t=null===(e=l.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(!t)return[new l.TreeItem("No workspace folder open.",l.TreeItemCollapsibleState.None)];try{const e=(0,u.default)(t.uri.fsPath);if(!(yield e.checkIsRepo()))return[new l.TreeItem("Not a git repository.",l.TreeItemCollapsibleState.None)];const r=yield e.log({maxCount:20});return 0===r.all.length?[new l.TreeItem("No commits found.",l.TreeItemCollapsibleState.None)]:r.all.map(e=>{const t=new l.TreeItem(e.message,l.TreeItemCollapsibleState.None);return t.description=`${e.author_name} - ${new Date(e.date).toLocaleDateString()}`,t.tooltip=`${e.hash}\n${e.author_name} - ${e.date}\n\n${e.message}`,t.command={command:"github-activity-dashboard.checkoutCommit",title:"Checkout Commit",arguments:[e.hash]},t.iconPath=new l.ThemeIcon("git-commit"),t})}catch(e){return console.error("Failed to get git history:",e),[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class f extends l.TreeItem{constructor(e,t,r){super(e,t),this.label=e,this.collapsibleState=t,this.repoInfo=r,"file"===(null==r?void 0:r.type)?(this.command={command:"github-activity-dashboard.openStarredFile",title:"Open File",arguments:[this]},this.iconPath=new l.ThemeIcon("file")):"dir"===(null==r?void 0:r.type)?this.iconPath=new l.ThemeIcon("folder"):"repo"===(null==r?void 0:r.type)&&(this.iconPath=new l.ThemeIcon("repo"),this.contextValue="starredRepo",this.command={command:"github-activity-dashboard.openRepo",title:"Open Repository in VS Code",arguments:[r.owner,r.repo]})}}class b{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e&&e.repoInfo){const{owner:t,repo:r,path:s}=e.repoInfo;if("repo"===e.repoInfo.type||"dir"===e.repoInfo.type)try{const e=yield this.octokit.repos.getContent({owner:t,repo:r,path:s||""});if(Array.isArray(e.data))return e.data.map(e=>new f(e.name,"dir"===e.type?l.TreeItemCollapsibleState.Collapsed:l.TreeItemCollapsibleState.None,{owner:t,repo:r,path:e.path,type:e.type,sha:e.sha}))}catch(e){return[new f(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}return[]}try{return(yield this.octokit.activity.listReposStarredByAuthenticatedUser()).data.map(e=>{const t=new f(e.name,l.TreeItemCollapsibleState.Collapsed,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url});return t.description=`⭐ ${e.stargazers_count}`,t.tooltip=`${e.full_name}\n⭐ ${e.stargazers_count} stars\n🍴 ${e.forks_count} forks\n\n${e.description||"No description"}`,t})}catch(e){return[new f(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class w extends l.TreeItem{constructor(e,t,r){super(e,t),this.label=e,this.collapsibleState=t,this.repoInfo=r,"file"===(null==r?void 0:r.type)?(this.command={command:"github-activity-dashboard.openProfileFile",title:"Open File",arguments:[this]},this.iconPath=new l.ThemeIcon("file")):"dir"===(null==r?void 0:r.type)?this.iconPath=new l.ThemeIcon("folder"):"repo"===(null==r?void 0:r.type)&&(this.iconPath=new l.ThemeIcon("repo"),this.contextValue="profileRepo")}}class T{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.repositories=[],this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),yield this.loadRepositories(),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}loadRepositories(){return a(this,void 0,void 0,function*(){if(this.octokit)try{const e=yield this.octokit.repos.listForAuthenticatedUser({sort:"updated",per_page:100});this.repositories=e.data}catch(e){console.error("Error loading repositories:",e)}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e&&e.repoInfo){const{owner:t,repo:r,path:s}=e.repoInfo;if("repo"===e.repoInfo.type||"dir"===e.repoInfo.type)try{const e=yield this.octokit.repos.getContent({owner:t,repo:r,path:s||""});if(Array.isArray(e.data))return e.data.map(e=>new w(e.name,"dir"===e.type?l.TreeItemCollapsibleState.Collapsed:l.TreeItemCollapsibleState.None,{owner:t,repo:r,path:e.path,type:e.type,sha:e.sha}))}catch(e){return[new w(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}return[]}return this.repositories.map(e=>{const t=new w(e.name,l.TreeItemCollapsibleState.Collapsed,{owner:e.owner.login,repo:e.name,type:"repo",url:e.html_url});return t.description=e.private?"Private":"Public",t.tooltip=`${e.full_name}\n${e.description||"No description"}\n⭐ ${e.stargazers_count} stars • 🍴 ${e.forks_count} forks`,t})})}}class E{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=(yield this.octokit.users.getAuthenticated()).data,t=[new l.TreeItem(`👤 ${e.name||e.login}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📧 ${e.email||"Private"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`🏢 ${e.company||"No company"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📍 ${e.location||"No location"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📝 ${e.bio||"No bio"}`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📊 ${e.public_repos} public repos`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👥 ${e.followers} followers`,l.TreeItemCollapsibleState.None),new l.TreeItem(`👤 ${e.following} following`,l.TreeItemCollapsibleState.None),new l.TreeItem(`⭐ ${e.public_gists} public gists`,l.TreeItemCollapsibleState.None),new l.TreeItem(`📅 Joined ${new Date(e.created_at).toLocaleDateString()}`,l.TreeItemCollapsibleState.None)],r=new l.TreeItem("🔗 View Profile in VS Code",l.TreeItemCollapsibleState.None);return r.command={command:"github-activity-dashboard.openProfile",title:"Open Profile in VS Code",arguments:[]},t.push(r),t}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}class v{constructor(){this._onDidChangeTreeData=new l.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield l.authentication.getSession("github",["notifications"],{createIfNone:!0});this.octokit=new p.Octokit({auth:e.accessToken}),this.refresh()}catch(e){l.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new l.TreeItem("Please authenticate with GitHub",l.TreeItemCollapsibleState.None)];try{const e=yield this.octokit.activity.listNotificationsForAuthenticatedUser();return 0===e.data.length?[new l.TreeItem("No notifications",l.TreeItemCollapsibleState.None)]:e.data.map(e=>{const t=new l.TreeItem(e.subject.title,l.TreeItemCollapsibleState.None);return t.description=e.repository.full_name,t.tooltip=`${e.subject.type}: ${e.subject.title}\nRepository: ${e.repository.full_name}\nUpdated: ${e.updated_at}`,e.subject.url&&(t.command={command:"vscode.open",title:"Open Notification",arguments:[l.Uri.parse(e.subject.url.replace("api.github.com/repos","github.com").replace("/pulls/","/pull/").replace("/issues/","/issues/"))]}),t.iconPath=e.unread?new l.ThemeIcon("mail"):new l.ThemeIcon("mail-read"),t})}catch(e){return[new l.TreeItem(`Error: ${e.message}`,l.TreeItemCollapsibleState.None)]}})}}function y(e){return{js:"javascript",ts:"typescript",jsx:"javascriptreact",tsx:"typescriptreact",py:"python",java:"java",cpp:"cpp",c:"c",cs:"csharp",php:"php",rb:"ruby",go:"go",rs:"rust",swift:"swift",kt:"kotlin",scala:"scala",sh:"shellscript",ps1:"powershell",sql:"sql",html:"html",css:"css",scss:"scss",sass:"sass",less:"less",json:"json",xml:"xml",yaml:"yaml",yml:"yaml",md:"markdown",txt:"plaintext"}[e.toLowerCase()]||"plaintext"}},317:e=>{"use strict";e.exports=require("child_process")},346:e=>{e.exports=function e(t,r,s,o){if("function"!=typeof s)throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce(function(r,s){return e.bind(null,t,s,r,o)},s)():Promise.resolve().then(function(){return t.registry[r]?t.registry[r].reduce(function(e,t){return t.hook.bind(null,e,o)},s)():s(o)})}},398:e=>{"use strict";e.exports=require("vscode")},423:function(e,t,r){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(896),n=s(r(753)).default("@kwsites/file-exists");t.exists=function(e,r=t.READABLE){return function(e,t,r){n("checking %s",e);try{const s=o.statSync(e);return s.isFile()&&t?(n("[OK] path represents a file"),!0):s.isDirectory()&&r?(n("[OK] path represents a directory"),!0):(n("[FAIL] path represents something other than a file or directory"),!1)}catch(e){if("ENOENT"===e.code)return n("[FAIL] path is not accessible: %o",e),!1;throw n("[FATAL] %o",e),e}}(e,(r&t.FILE)>0,(r&t.FOLDER)>0)},t.FILE=1,t.FOLDER=2,t.READABLE=t.FILE+t.FOLDER},447:e=>{e.exports=function(e,t,r){if(e.registry[t]){var s=e.registry[t].map(function(e){return e.orig}).indexOf(r);-1!==s&&e.registry[t].splice(s,1)}}},458:(e,t,r)=>{"use strict";function s(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}r.r(t),r.d(t,{Octokit:()=>ee});var o=r(811);function n(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(s=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(t[s])?Object.assign(r,{[s]:t[s]}):s in e?r[s]=n(e[s],t[s]):Object.assign(r,{[s]:t[s]})}),r}function i(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function a(e,t,r){if("string"==typeof t){let[e,s]=t.split(" ");r=Object.assign(s?{method:e,url:s}:{url:e},r)}else r=Object.assign({},t);var s;r.headers=(s=r.headers)?Object.keys(s).reduce((e,t)=>(e[t.toLowerCase()]=s[t],e),{}):{},i(r),i(r.headers);const o=n(e||{},r);return"/graphql"===r.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter(e=>!o.mediaType.previews.includes(e)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),o}const c=/\{[^{}}]+\}/g;function l(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function p(e,t){const r={__proto__:null};for(const s of Object.keys(e))-1===t.indexOf(s)&&(r[s]=e[s]);return r}function u(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function d(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function g(e,t,r){return t="+"===e||"#"===e?u(t):d(t),r?d(r)+"="+t:t}function m(e){return null!=e}function h(e){return";"===e||"&"===e||"?"===e}function f(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,s,o){if(s){let e="";const o=[];if(-1!==r.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(r){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);o.push(function(e,t,r,s){var o=e[r],n=[];if(m(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),n.push(g(t,o,h(t)?r:""));else if("*"===s)Array.isArray(o)?o.filter(m).forEach(function(e){n.push(g(t,e,h(t)?r:""))}):Object.keys(o).forEach(function(e){m(o[e])&&n.push(g(t,o[e],e))});else{const e=[];Array.isArray(o)?o.filter(m).forEach(function(r){e.push(g(t,r))}):Object.keys(o).forEach(function(r){m(o[r])&&(e.push(d(r)),e.push(g(t,o[r].toString())))}),h(t)?n.push(d(r)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===t?m(o)&&n.push(d(r)):""!==o||"&"!==t&&"?"!==t?""===o&&n.push(""):n.push(d(r)+"=");return n}(t,e,s[1],s[2]||s[3]))}),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return u(o)}),"/"===e?e:e.replace(/\/$/,"")}function b(e){let t,r=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n=p(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const t=e.match(c);return t?t.map(l).reduce((e,t)=>e.concat(t),[]):[]}(s);var a;s=(a=s,{expand:f.bind(null,a)}).expand(n),/^http/.test(s)||(s=e.baseUrl+s);const u=p(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=o.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map(t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(r)?s=function(e,t){const r=/\?/.test(e)?"&":"?",s=Object.keys(t);return 0===s.length?e:e+r+s.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(s,u):"data"in u?t=u.data:Object.keys(u).length&&(t=u),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:s,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function w(e,t,r){return b(a(e,t,r))}const T=function e(t,r){const s=a(t,r),o=w.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:e.bind(null,s),merge:a.bind(null,s),parse:b})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/9.0.6 ${s()}`},mediaType:{format:""}});class E extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var v=r(519),y=r.n(v);const k=y()(e=>console.warn(e)),_=y()(e=>console.warn(e));class P extends Error{constructor(e,t,r){let s;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"headers"in r&&void 0!==r.headers&&(s=r.headers),"response"in r&&(this.response=r.response,s=r.response.headers);const o=Object.assign({},r.request);r.request.headers.authorization&&(o.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o,Object.defineProperty(this,"code",{get:()=>(k(new E("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t)}),Object.defineProperty(this,"headers",{get:()=>(_(new E("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),s||{})})}}function O(e){const t=e.request&&e.request.log?e.request.log:console,r=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let s,o,n={},{fetch:i}=globalThis;if(e.request?.fetch&&(i=e.request.fetch),!i)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return i(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async i=>{o=i.url,s=i.status;for(const e of i.headers)n[e[0]]=e[1];if("deprecation"in n){const r=n.link&&n.link.match(/<([^<>]+)>; rel="deprecation"/),s=r&&r.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${n.sunset}${s?`. See ${s}`:""}`)}if(204!==s&&205!==s){if("HEAD"===e.method){if(s<400)return;throw new P(i.statusText,s,{response:{url:o,status:s,headers:n,data:void 0},request:e})}if(304===s)throw new P("Not modified",s,{response:{url:o,status:s,headers:n,data:await C(i)},request:e});if(s>=400){const t=await C(i),r=new P(function(e){if("string"==typeof e)return e;let t;return t="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${t}`:`${e.message}${t}`:`Unknown error: ${JSON.stringify(e)}`}(t),s,{response:{url:o,status:s,headers:n,data:t},request:e});throw r}return r?await C(i):i.body}}).then(e=>({status:s,url:o,headers:n,data:e})).catch(t=>{if(t instanceof P)throw t;if("AbortError"===t.name)throw t;let r=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?r=t.cause.message:"string"==typeof t.cause&&(r=t.cause)),new P(r,500,{request:e})})}async function C(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():function(e){return e.arrayBuffer()}(e)}const S=function e(t,r){const s=t.defaults(r);return Object.assign(function(t,r){const o=s.merge(t,r);if(!o.request||!o.request.hook)return O(s.parse(o));const n=(e,t)=>O(s.parse(s.merge(e,t)));return Object.assign(n,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(n,o)},{endpoint:s,defaults:e.bind(null,s)})}(T,{headers:{"user-agent":`octokit-request.js/8.4.1 ${s()}`}});var G=class extends Error{constructor(e,t,r){super("Request failed due to following response errors:\n"+r.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=r,this.name="GraphqlResponseError",this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},A=["method","baseUrl","url","headers","request","query","mediaType"],F=["query","method","url"],R=/\/api\/v3\/?$/;function x(e,t){const r=e.defaults(t);return Object.assign((e,t)=>function(e,t,r){if(r){if("string"==typeof t&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in r)if(F.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const s="string"==typeof t?Object.assign({query:t},r):t,o=Object.keys(s).reduce((e,t)=>A.includes(t)?(e[t]=s[t],e):(e.variables||(e.variables={}),e.variables[t]=s[t],e),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return R.test(n)&&(o.url=n.replace(R,"/api/graphql")),e(o).then(e=>{if(e.data.errors){const t={};for(const r of Object.keys(e.headers))t[r]=e.headers[r];throw new G(o,t,e.data)}return e.data.data})}(r,e,t),{defaults:x.bind(null,r),endpoint:r.endpoint})}x(S,{headers:{"user-agent":`octokit-graphql.js/7.1.1 ${s()}`},method:"POST",url:"/graphql"});const D=/^v1\./,U=/^ghs_/,I=/^ghu_/;async function $(e){const t=3===e.split(/\./).length,r=D.test(e)||U.test(e),s=I.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}async function L(e,t,r,s){const o=t.endpoint.merge(r,s);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}const j=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign($.bind(null,e),{hook:L.bind(null,e)})};var M="5.2.2",z=()=>{},q=console.warn.bind(console),B=console.error.bind(console),N=`octokit-core.js/${M} ${s()}`,H=class{static{this.VERSION=M}static defaults(e){return class extends(this){constructor(...t){const r=t[0]||{};super("function"!=typeof e?Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null):e(r))}}}static{this.plugins=[]}static plugin(...e){const t=this.plugins;return class extends(this){static{this.plugins=t.concat(e.filter(e=>!t.includes(e)))}}}constructor(e={}){const t=new o.Collection,r={baseUrl:S.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var s;if(r.headers["user-agent"]=e.userAgent?`${e.userAgent} ${N}`:N,e.baseUrl&&(r.baseUrl=e.baseUrl),e.previews&&(r.mediaType.previews=e.previews),e.timeZone&&(r.headers["time-zone"]=e.timeZone),this.request=S.defaults(r),this.graphql=(s=this.request,x(s,{method:"POST",url:"/graphql"})).defaults(r),this.log=function(e={}){return"function"!=typeof e.debug&&(e.debug=z),"function"!=typeof e.info&&(e.info=z),"function"!=typeof e.warn&&(e.warn=q),"function"!=typeof e.error&&(e.error=B),e}(e.log),this.hook=t,e.authStrategy){const{authStrategy:r,...s}=e,o=r(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){const r=j(e.auth);t.wrap("request",r.hook),this.auth=r}else this.auth=async()=>({type:"unauthenticated"});const n=this.constructor;for(let t=0;t<n.plugins.length;++t)Object.assign(this,n.plugins[t](this,e))}};function V(e){e.hook.wrap("request",(t,r)=>{e.log.debug("request",r);const s=Date.now(),o=e.request.endpoint.parse(r),n=o.url.replace(r.baseUrl,"");return t(r).then(t=>(e.log.info(`${o.method} ${n} - ${t.status} in ${Date.now()-s}ms`),t)).catch(t=>{throw e.log.info(`${o.method} ${n} - ${t.status} in ${Date.now()-s}ms`),t})})}function W(e,t,r){const s="function"==typeof t?t.endpoint(r):e.request.endpoint(t,r),o="function"==typeof t?t:e.request,n=s.method,i=s.headers;let a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,r=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],n=e.data[o];return e.data=n,void 0!==t&&(e.data.incomplete_results=t),void 0!==r&&(e.data.repository_selection=r),e.data.total_count=s,e}(await o({method:n,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function K(e,t,r,s){return"function"==typeof r&&(s=r,r=void 0),J(e,[],W(e,t,r)[Symbol.asyncIterator](),s)}function J(e,t,r,s){return r.next().then(o=>{if(o.done)return t;let n=!1;return t=t.concat(s?s(o.value,function(){n=!0}):o.value.data),n?t:J(e,t,r,s)})}function Q(e){return{paginate:Object.assign(K.bind(null,e),{iterator:W.bind(null,e)})}}V.VERSION="4.0.1",Object.assign(K,{iterator:W}),Q.VERSION="11.4.4-cjs.2";const Y=new Map;for(const[e,t]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(const[r,s]of Object.entries(t)){const[t,o,n]=s,[i,a]=t.split(/ /),c=Object.assign({method:i,url:a},o);Y.has(e)||Y.set(e,new Map),Y.get(e).set(r,{scope:e,methodName:r,endpointDefaults:c,decorations:n})}const Z={has:({scope:e},t)=>Y.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,r)=>(Object.defineProperty(e.cache,t,r),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...Y.get(e).keys()],set:(e,t,r)=>e.cache[t]=r,get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];const o=Y.get(t).get(s);if(!o)return;const{endpointDefaults:n,decorations:i}=o;return r[s]=i?function(e,t,r,s,o){const n=e.request.defaults(s);return Object.assign(function(...s){let i=n.endpoint.merge(...s);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[s,n]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${s}.${n}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=n.endpoint.merge(...s);for(const[s,n]of Object.entries(o.renamedParameters))s in i&&(e.log.warn(`"${s}" parameter is deprecated for "octokit.${t}.${r}()". Use "${n}" instead`),n in i||(i[n]=i[s]),delete i[s]);return n(i)}return n(...s)},n)}(e,t,s,n,i):e.request.defaults(n),r[s]}};function X(e){const t=function(e){const t={};for(const r of Y.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Z);return t}(e);return{...t,rest:t}}X.VERSION="13.3.2-cjs.1";var ee=H.plugin(V,X,Q).defaults({userAgent:"octokit-rest.js/20.1.2"})},474:e=>{"use strict";e.exports=require("node:events")},519:(e,t,r)=>{var s=r(587);function o(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function n(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}e.exports=s(o),e.exports.strict=s(n),o.proto=o(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return n(this)},configurable:!0})})},573:e=>{"use strict";e.exports=require("node:buffer")},585:e=>{var t=1e3,r=60*t,s=60*r,o=24*s,n=7*o;function i(e,t,r,s){var o=t>=1.5*r;return Math.round(e/r)+" "+s+(o?"s":"")}e.exports=function(e,a){a=a||{};var c,l,p=typeof e;if("string"===p&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*n;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*s;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===p&&isFinite(e))return a.long?(c=e,(l=Math.abs(c))>=o?i(c,l,o,"day"):l>=s?i(c,l,s,"hour"):l>=r?i(c,l,r,"minute"):l>=t?i(c,l,t,"second"):c+" ms"):function(e){var n=Math.abs(e);return n>=o?Math.round(e/o)+"d":n>=s?Math.round(e/s)+"h":n>=r?Math.round(e/r)+"m":n>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},587:e=>{e.exports=function e(t,r){if(t&&r)return e(t)(r);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach(function(e){s[e]=t[e]}),s;function s(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];var s=t.apply(this,e),o=e[e.length-1];return"function"==typeof s&&s!==o&&Object.keys(o).forEach(function(e){s[e]=o[e]}),s}}},640:e=>{e.exports=function(e,t,r,s){var o=s;e.registry[r]||(e.registry[r]=[]),"before"===t&&(s=function(e,t){return Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))}),"after"===t&&(s=function(e,t){var r;return Promise.resolve().then(e.bind(null,t)).then(function(e){return o(r=e,t)}).then(function(){return r})}),"error"===t&&(s=function(e,t){return Promise.resolve().then(e.bind(null,t)).catch(function(e){return o(e,t)})}),e.registry[r].push({hook:s,orig:o})}},662:(e,t,r)=>{"use strict";var s,o,n,i=Object.create,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,d=(e,t)=>function(){return e&&(t=(0,e[l(e)[0]])(e=0)),t},g=(e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})},m=(e,t,r,s)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))u.call(e,o)||o===r||a(e,o,{get:()=>t[o],enumerable:!(s=c(t,o))||s.enumerable});return e},h=e=>m(a({},"__esModule",{value:!0}),e),f=d({"src/lib/errors/git-error.ts"(){s=class extends Error{constructor(e,t){super(t),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),b=d({"src/lib/errors/git-response-error.ts"(){f(),o=class extends s{constructor(e,t){super(void 0,t||String(e)),this.git=e}}}});function w(...e){const t=new String(e);return n.set(t,e),t}function T(e){return e instanceof String&&n.has(e)}function E(e){return n.get(e)||[]}var v,y,k,_,P,O,C,S,G=d({"src/lib/args/pathspec.ts"(){n=new WeakMap}}),A=d({"src/lib/errors/git-construct-error.ts"(){f(),v=class extends s{constructor(e,t){super(void 0,t),this.config=e}}}}),F=d({"src/lib/errors/git-plugin-error.ts"(){f(),y=class extends s{constructor(e,t,r){super(e,r),this.task=e,this.plugin=t,Object.setPrototypeOf(this,new.target.prototype)}}}}),R=d({"src/lib/errors/task-configuration-error.ts"(){f(),k=class extends s{constructor(e){super(void 0,e)}}}});function x(e){return"function"!=typeof e?C:e}function D(e){return"function"==typeof e&&e!==C}function U(e,t){const r=e.indexOf(t);return r<=0?[e,""]:[e.substr(0,r),e.substr(r+1)]}function I(e,t=0){return L(e)&&e.length>t?e[t]:void 0}function $(e,t=0){if(L(e)&&e.length>t)return e[e.length-1-t]}function L(e){return!(!e||"number"!=typeof e.length)}function j(e="",t=!0,r="\n"){return e.split(r).reduce((e,r)=>{const s=t?r.trim():r;return s&&e.push(s),e},[])}function M(e,t){return j(e,!0).map(e=>t(e))}function z(e){return(0,P.exists)(e,P.FOLDER)}function q(e,t){return Array.isArray(e)?e.includes(t)||e.push(t):e.add(t),t}function B(e,t){return Array.isArray(e)&&!e.includes(t)&&e.push(t),e}function N(e,t){if(Array.isArray(e)){const r=e.indexOf(t);r>=0&&e.splice(r,1)}else e.delete(t);return t}function H(e){return Array.isArray(e)?e:[e]}function V(e){return e.replace(/[\s-]+(.)/g,(e,t)=>t.toUpperCase())}function W(e){return H(e).map(String)}function K(e,t=0){if(null==e)return t;const r=parseInt(e,10);return isNaN(r)?t:r}function J(e,t){const r=[];for(let s=0,o=e.length;s<o;s++)r.push(t,e[s]);return r}function Q(e){return(Array.isArray(e)?_.Buffer.concat(e):e).toString("utf-8")}function Y(e,t){return Object.assign({},...t.map(t=>t in e?{[t]:e[t]}:{}))}function Z(e=0){return new Promise(t=>setTimeout(t,e))}function X(e){if(!1!==e)return e}var ee,te,re,se,oe,ne=d({"src/lib/utils/util.ts"(){_=r(573),P=r(926),O="\0",C=()=>{},S=Object.prototype.toString.call.bind(Object.prototype.toString)}});function ie(e,t,r){return t(e)?e:arguments.length>2?r:void 0}function ae(e,t){const r=T(e)?"string":typeof e;return/number|string|boolean/.test(r)&&(!t||!t.includes(r))}function ce(e){return!!e&&"[object Object]"===S(e)}function le(e){return"function"==typeof e}var pe,ue,de,ge,me,he=d({"src/lib/utils/argument-filters.ts"(){ne(),G(),ee=e=>Array.isArray(e),te=e=>"string"==typeof e,re=e=>Array.isArray(e)&&e.every(te),se=e=>te(e)||Array.isArray(e)&&e.every(te),oe=e=>null!=e&&!"number|boolean|function".includes(typeof e)&&(Array.isArray(e)||"string"==typeof e||"number"==typeof e.length)}}),fe=d({"src/lib/utils/exit-codes.ts"(){pe=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(pe||{})}}),be=d({"src/lib/utils/git-output-streams.ts"(){ue=class e{constructor(e,t){this.stdOut=e,this.stdErr=t}asStrings(){return new e(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),we=d({"src/lib/utils/line-parser.ts"(){de=class{constructor(e,t){this.matches=[],this.parse=(e,t)=>(this.resetMatches(),!!this._regExp.every((t,r)=>this.addMatch(t,r,e(r)))&&!1!==this.useMatches(t,this.prepareMatches())),this._regExp=Array.isArray(e)?e:[e],t&&(this.useMatches=t)}useMatches(e,t){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,t,r){const s=r&&e.exec(r);return s&&this.pushMatch(t,s),!!s}pushMatch(e,t){this.matches.push(...t.slice(1))}},ge=class extends de{addMatch(e,t,r){return/^remote:\s/.test(String(r))&&super.addMatch(e,t,r)}pushMatch(e,t){(e>0||t.length>1)&&super.pushMatch(e,t)}}}});function Te(...e){const t=process.cwd(),r=Object.assign({baseDir:t,...me},...e.filter(e=>"object"==typeof e&&e));return r.baseDir=r.baseDir||t,r.trimmed=!0===r.trimmed,r}var Ee=d({"src/lib/utils/simple-git-options.ts"(){me={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function ve(e,t=[]){return ce(e)?Object.keys(e).reduce((t,r)=>{const s=e[r];if(T(s))t.push(s);else if(ae(s,["boolean"]))t.push(r+"="+s);else if(Array.isArray(s))for(const e of s)ae(e,["string","number"])||t.push(r+"="+e);else t.push(r);return t},t):t}function ye(e,t=0,r=!1){const s=[];for(let r=0,o=t<0?e.length:t;r<o;r++)"string|number".includes(typeof e[r])&&s.push(String(e[r]));return ve(ke(e),s),r||s.push(...function(e){const t="function"==typeof $(e);return ie($(e,t?1:0),ee,[])}(e)),s}function ke(e){const t=le($(e));return ie($(e,t?1:0),ce)}function _e(e,t=!0){const r=x($(e));return t||D(r)?r:void 0}var Pe=d({"src/lib/utils/task-options.ts"(){he(),ne(),G()}});function Oe(e,t){return e(t.stdOut,t.stdErr)}function Ce(e,t,r,s=!0){return H(r).forEach(r=>{for(let o=j(r,s),n=0,i=o.length;n<i;n++){const r=(e=0)=>{if(!(n+e>=i))return o[n+e]};t.some(({parse:t})=>t(r,e))}}),e}var Se=d({"src/lib/utils/task-parser.ts"(){ne()}}),Ge={};g(Ge,{ExitCodes:()=>pe,GitOutputStreams:()=>ue,LineParser:()=>de,NOOP:()=>C,NULL:()=>O,RemoteLineParser:()=>ge,append:()=>q,appendTaskOptions:()=>ve,asArray:()=>H,asCamelCase:()=>V,asFunction:()=>x,asNumber:()=>K,asStringArray:()=>W,bufferToString:()=>Q,callTaskParser:()=>Oe,createInstanceConfig:()=>Te,delay:()=>Z,filterArray:()=>ee,filterFunction:()=>le,filterHasLength:()=>oe,filterPlainObject:()=>ce,filterPrimitives:()=>ae,filterString:()=>te,filterStringArray:()=>re,filterStringOrStringArray:()=>se,filterType:()=>ie,first:()=>I,folderExists:()=>z,forEachLineWithContent:()=>M,getTrailingOptions:()=>ye,including:()=>B,isUserFunction:()=>D,last:()=>$,objectToString:()=>S,orVoid:()=>X,parseStringResponse:()=>Ce,pick:()=>Y,prefixedArray:()=>J,remove:()=>N,splitOn:()=>U,toLinesWithContent:()=>j,trailingFunctionArgument:()=>_e,trailingOptionsArgument:()=>ke});var Ae,Fe,Re,xe=d({"src/lib/utils/index.ts"(){he(),fe(),be(),we(),Ee(),Pe(),Se(),ne()}}),De={};function Ue(e){switch(e){case"bare":return $e();case"root":return Ie()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:Fe,parser:Re}}function Ie(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:Fe,parser:e=>/^\.(git)?$/.test(e.trim())}}function $e(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:Fe,parser:Re}}g(De,{CheckRepoActions:()=>Ae,checkIsBareRepoTask:()=>$e,checkIsRepoRootTask:()=>Ie,checkIsRepoTask:()=>Ue});var Le,je,Me,ze,qe,Be=d({"src/lib/tasks/check-is-repo.ts"(){xe(),Ae=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Ae||{}),Fe=({exitCode:e},t,r,s)=>{if(128===e&&function(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}(t))return r(Buffer.from("false"));s(t)},Re=e=>"true"===e.trim()}}),Ne=d({"src/lib/responses/CleanSummary.ts"(){xe(),Le=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},je=/^[a-z]+\s*/i,Me=/^[a-z]+\s+[a-z]+\s*/i,ze=/\/$/}}),He={};function Ve(e){return{commands:qe,format:"empty",parser:e}}function We(e){return{commands:qe,format:"empty",parser(){throw"string"==typeof e?new k(e):e}}}function Ke(e,t=!1){return{commands:e,format:"utf-8",parser:e=>t?String(e).trim():e}}function Je(e){return{commands:e,format:"buffer",parser:e=>e}}function Qe(e){return"buffer"===e.format}function Ye(e){return"empty"===e.format||!e.commands.length}g(He,{EMPTY_COMMANDS:()=>qe,adhocExecTask:()=>Ve,configurationErrorTask:()=>We,isBufferTask:()=>Qe,isEmptyTask:()=>Ye,straightThroughBufferTask:()=>Je,straightThroughStringTask:()=>Ke});var Ze,Xe,et,tt,rt,st=d({"src/lib/tasks/task.ts"(){R(),qe=[]}}),ot={};function nt(e,t){const{cleanMode:r,options:s,valid:o}=function(e){let t,r=[],s={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(e=>{var o;!function(e){return"f"===e||"n"===e}(e)?s.options=s.options&&(o=r[r.length]=`-${e}`,/^-[a-z]$/i.test(o)&&rt.has(o.charAt(1))):(t=e,s.cleanMode=!0)}),{cleanMode:t,options:r,valid:s}}(e);return r?o.options?(s.push(...t),s.some(ct)?We(Ze):it(r,s)):We(et+JSON.stringify(e)):We(Xe)}function it(e,t){return{commands:["clean",`-${e}`,...t],format:"utf-8",parser:t=>function(e,t){const r=new Le(e),s=e?Me:je;return j(t).forEach(e=>{const t=e.replace(s,"");r.paths.push(t),(ze.test(t)?r.folders:r.files).push(t)}),r}("n"===e,t)}}function at(e){return Array.isArray(e)&&e.every(e=>rt.has(e))}function ct(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:"--interactive"===e}g(ot,{CONFIG_ERROR_INTERACTIVE_MODE:()=>Ze,CONFIG_ERROR_MODE_REQUIRED:()=>Xe,CONFIG_ERROR_UNKNOWN_OPTION:()=>et,CleanOptions:()=>tt,cleanTask:()=>it,cleanWithOptionsTask:()=>nt,isCleanOptionsArray:()=>at});var lt,pt=d({"src/lib/tasks/clean.ts"(){Ne(),xe(),st(),Ze="Git clean interactive mode is not supported",Xe='Git clean mode parameter ("n" or "f") is required',et="Git clean unknown option found in: ",tt=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(tt||{}),rt=new Set(["i",...W(Object.values(tt))])}});function ut(e){return e.replace(/^(file):/,"")}function*dt(e,t=null){const r=e.split("\0");for(let e=0,s=r.length-1;e<s;){const s=ut(r[e++]);let o=r[e++],n=t;if(o.includes("\n")){const e=U(o,"\n");n=e[0],o=e[1]}yield{file:s,key:n,value:o}}}var gt,mt=d({"src/lib/responses/ConfigList.ts"(){xe(),lt=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,t)=>Object.assign(e,this.values[t]),{})),this._all}addFile(e){if(!(e in this.values)){const t=$(this.files);this.values[e]=t?Object.create(this.values[t]):{},this.files.push(e)}return this.values[e]}addValue(e,t,r){const s=this.addFile(e);s.hasOwnProperty(t)?Array.isArray(s[t])?s[t].push(r):s[t]=[s[t],r]:s[t]=r,this._all=void 0}}}});function ht(e,t){return"string"==typeof e&&gt.hasOwnProperty(e)?e:t}var ft,bt,wt,Tt,Et,vt,yt=d({"src/lib/tasks/config.ts"(){mt(),xe(),gt=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(gt||{})}}),kt=d({"src/lib/tasks/diff-name-status.ts"(){ft=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(ft||{}),bt=new Set(Object.values(ft))}});function _t(...e){return(new vt).param(...e)}var Pt,Ot,Ct=d({"src/lib/tasks/grep.ts"(){xe(),st(),wt=["-h"],Tt=Symbol("grepQuery"),vt=class{constructor(){this[Et]=[]}*[(Et=Tt,Symbol.iterator)](){for(const e of this[Tt])yield e}and(...e){return e.length&&this[Tt].push("--and","(",...J(e,"-e"),")"),this}param(...e){return this[Tt].push(...J(e,"-e")),this}}}}),St={};function Gt(e,t){const r=["reset"];return Ft(e)&&r.push(`--${e}`),r.push(...t),Ke(r)}function At(e){if(Ft(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Ft(e){return Ot.includes(e)}g(St,{ResetMode:()=>Pt,getResetMode:()=>At,resetTask:()=>Gt});var Rt=d({"src/lib/tasks/reset.ts"(){st(),Pt=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(Pt||{}),Ot=Array.from(Object.values(Pt))}}),xt={};g(xt,{CheckRepoActions:()=>Ae,CleanOptions:()=>tt,DiffNameStatus:()=>ft,GitConfigScope:()=>gt,GitConstructError:()=>v,GitError:()=>s,GitPluginError:()=>y,GitResponseError:()=>o,ResetMode:()=>Pt,TaskConfigurationError:()=>k,grepQueryBuilder:()=>_t,pathspec:()=>w});var Dt=d({"src/lib/api.ts"(){G(),A(),f(),F(),b(),R(),Be(),pt(),yt(),kt(),Ct(),Rt()}}),Ut=d({"src/lib/plugins/abort-plugin.ts"(){F()}});var It,$t,Lt=d({"src/lib/plugins/block-unsafe-operations-plugin.ts"(){F()}}),jt=d({"src/lib/plugins/command-config-prefixing-plugin.ts"(){xe()}});var Mt,zt,qt=d({"src/lib/plugins/completion-detection.plugin.ts"(){It=r(100),xe(),$t=(0,It.deferred)().promise}});function Bt(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function Nt(e,t){if(e.length<1||e.length>2)throw new y(void 0,"binary",Mt);if(e.some(Bt)){if(!t)throw new y(void 0,"binary",zt);console.warn(zt)}const[r,s]=e;return{binary:r,prefix:s}}var Ht=d({"src/lib/plugins/custom-binary.plugin.ts"(){F(),xe(),Mt="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",zt="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option"}});function Vt(e){return!(!e.exitCode||!e.stdErr.length)}function Wt(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function Kt(e=!1,t=Vt,r=Wt){return(s,o)=>!e&&s||!t(o)?s:r(o)}function Jt(e){return{type:"task.error",action(t,r){const o=e(t.error,{stdErr:r.stdErr,stdOut:r.stdOut,exitCode:r.exitCode});return Buffer.isBuffer(o)?{error:new s(void 0,o.toString("utf-8"))}:{error:o}}}}var Qt,Yt,Zt,Xt=d({"src/lib/plugins/error-detection.plugin.ts"(){f()}}),er=d({"src/lib/plugins/plugin-store.ts"(){Qt=r(474),xe(),Yt=class{constructor(){this.plugins=new Set,this.events=new Qt.EventEmitter}on(e,t){this.events.on(e,t)}reconfigure(e,t){this.events.emit(e,t)}append(e,t){const r=q(this.plugins,{type:e,action:t});return()=>this.plugins.delete(r)}add(e){const t=[];return H(e).forEach(e=>e&&this.plugins.add(q(t,e))),()=>{t.forEach(e=>this.plugins.delete(e))}}exec(e,t,r){let s=t;const o=Object.freeze(Object.create(r));for(const t of this.plugins)t.type===e&&(s=t.action(s,o));return s}}}}),tr=d({"src/lib/plugins/progress-monitor-plugin.ts"(){xe()}}),rr=d({"src/lib/plugins/simple-git-plugin.ts"(){}}),sr=d({"src/lib/plugins/spawn-options-plugin.ts"(){xe()}}),or=d({"src/lib/plugins/timout-plugin.ts"(){F()}}),nr=d({"src/lib/plugins/index.ts"(){Ut(),Lt(),jt(),qt(),Ht(),Xt(),er(),tr(),rr(),sr(),or()}}),ir=d({"src/lib/plugins/suffix-paths.plugin.ts"(){G()}});function ar(e,t,r){return t&&String(t).replace(/\s*/,"")?(s,...o)=>{e(`%s ${s}`,t,...o),r&&r(s,...o)}:r?(t,...s)=>{e(t,...s),r(t,...s)}:e}function cr(e,t,r,s=function(){return(0,Zt.default)("simple-git")}()){const o=e&&`[${e}]`||"",n=[],i="string"==typeof t?s.extend(t):t,a=function(e,t,{namespace:r}){if("string"==typeof e)return e;const s=t&&t.namespace||"";return s.startsWith(r)?s.substr(r.length+1):s||r}(ie(t,te),i,s);return function t(r){const n=r&&`[${r}]`||"",a=i&&ar(i,n)||C,l=ar(s,`${o} ${n}`,a);return Object.assign(i?a:l,{label:e,sibling:c,info:l,step:t})}(r);function c(t,r){return q(n,cr(e,a.replace(/^[^:]+/,t),r,s))}}var lr,pr,ur,dr=d({"src/lib/git-logger.ts"(){var e,t;t=null!=(e=r(753))?i(p(e)):{},Zt=m(e&&e.__esModule?t:a(t,"default",{value:e,enumerable:!0}),e),xe(),Zt.default.formatters.L=e=>String(oe(e)?e.length:"-"),Zt.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):S(e)}}),gr=d({"src/lib/runners/tasks-pending-queue.ts"(){f(),dr(),lr=class e{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(t){const r=e.getName(t.commands[0]);return{task:t,logger:cr(this.logLabel,r),name:r}}push(e){const t=this.createProgress(e);return t.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,t),t}fatal(e){for(const[t,{logger:r}]of Array.from(this._queue.entries()))t===e.task?(r.info("Failed %o",e),r("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):r.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(t);if(0!==this._queue.size)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){const t=this.withProgress(e);if(!t)throw new s(void 0,"TasksPendingQueue: attempt called for an unknown task");return t.logger("Starting task"),t}static getName(t="empty"){return`task:${t}:${++e.counter}`}static{this.counter=0}}}});function mr(e,t){return{method:I(e.commands)||"",commands:t}}function hr(e,t,r,s){return o=>{r("%s received %L bytes",t,o),s("%B",o),e.push(o)}}var fr,br=d({"src/lib/runners/git-executor-chain.ts"(){pr=r(317),f(),st(),xe(),gr(),ur=class{constructor(e,t,r){this._executor=e,this._scheduler=t,this._plugins=r,this._chain=Promise.resolve(),this._queue=new lr}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}async attemptTask(e){const t=await this._scheduler.next(),r=()=>this._queue.complete(e);try{const{logger:t}=this._queue.attempt(e);return await(Ye(e)?this.attemptEmptyTask(e,t):this.attemptRemoteTask(e,t))}catch(t){throw this.onFatalException(e,t)}finally{r(),t()}}onFatalException(e,t){const r=t instanceof s?Object.assign(t,{task:e}):new s(e,t&&String(t));return this._chain=Promise.resolve(),this._queue.fatal(r),r}async attemptRemoteTask(e,t){const r=this._plugins.exec("spawn.binary","",mr(e,e.commands)),s=this._plugins.exec("spawn.args",[...e.commands],mr(e,e.commands)),o=await this.gitResponse(e,r,s,this.outputHandler,t.step("SPAWN")),n=await this.handleTaskData(e,s,o,t.step("HANDLE"));return t("passing response to task's parser as a %s",e.format),Qe(e)?Oe(e.parser,n):Oe(e.parser,n.asStrings())}async attemptEmptyTask(e,t){return t("empty task bypassing child process to call to task's parser"),e.parser(this)}handleTaskData(e,t,r,s){const{exitCode:o,rejection:n,stdOut:i,stdErr:a}=r;return new Promise((c,l)=>{s("Preparing to handle process response exitCode=%d stdOut=",o);const{error:p}=this._plugins.exec("task.error",{error:n},{...mr(e,t),...r});return p&&e.onError?(s.info("exitCode=%s handling with custom error handler"),e.onError(r,p,e=>{s.info("custom error handler treated as success"),s("custom error returned a %s",S(e)),c(new ue(Array.isArray(e)?Buffer.concat(e):e,Buffer.concat(a)))},l)):p?(s.info("handling as error: exitCode=%s stdErr=%s rejection=%o",o,a.length,n),l(p)):(s.info("retrieving task output complete"),void c(new ue(Buffer.concat(i),Buffer.concat(a))))})}async gitResponse(e,t,r,s,o){const n=o.sibling("output"),i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},mr(e,e.commands));return new Promise(a=>{const c=[],l=[];o.info("%s %o",t,r),o("%O",i);let p=this._beforeSpawn(e,r);if(p)return a({stdOut:c,stdErr:l,exitCode:9901,rejection:p});this._plugins.exec("spawn.before",void 0,{...mr(e,r),kill(e){p=e||p}});const u=(0,pr.spawn)(t,r,i);u.stdout.on("data",hr(c,"stdOut",o,n.step("stdOut"))),u.stderr.on("data",hr(l,"stdErr",o,n.step("stdErr"))),u.on("error",function(e,t){return r=>{t("[ERROR] child process exception %o",r),e.push(Buffer.from(String(r.stack),"ascii"))}}(l,o)),s&&(o("Passing child process stdOut/stdErr to custom outputHandler"),s(t,u.stdout,u.stderr,[...r])),this._plugins.exec("spawn.after",void 0,{...mr(e,r),spawned:u,close(e,t){a({stdOut:c,stdErr:l,exitCode:e,rejection:p||t})},kill(e){u.killed||(p=e,u.kill("SIGINT"))}})})}_beforeSpawn(e,t){let r;return this._plugins.exec("spawn.before",void 0,{...mr(e,t),kill(e){r=e||r}}),r}}}}),wr={};g(wr,{GitExecutor:()=>fr});var Tr=d({"src/lib/runners/git-executor.ts"(){br(),fr=class{constructor(e,t,r){this.cwd=e,this._scheduler=t,this._plugins=r,this._chain=new ur(this,this._scheduler,this._plugins)}chain(){return new ur(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});var Er=d({"src/lib/task-callback.ts"(){b(),xe()}});function vr(e,t){return Ve(r=>{if(!z(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(t||r).cwd=e})}var yr=d({"src/lib/tasks/change-working-directory.ts"(){xe(),st()}});function kr(e){const t=["checkout",...e];return"-b"===t[1]&&t.includes("-B")&&(t[1]=N(t,"-B")),Ke(t)}var _r,Pr,Or=d({"src/lib/tasks/checkout.ts"(){xe(),st()}}),Cr=d({"src/lib/tasks/count-objects.ts"(){xe(),_r=new de(/([a-z-]+): (\d+)$/,(e,[t,r])=>{const s=V(t);e.hasOwnProperty(s)&&(e[s]=K(r))})}});function Sr(e){return Ce({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},Pr,e)}var Gr=d({"src/lib/parsers/parse-commit.ts"(){xe(),Pr=[new de(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[t,r,s])=>{e.branch=t,e.commit=s,e.root=!!r}),new de(/\s*Author:\s(.+)/i,(e,[t])=>{const r=t.split("<"),s=r.pop();s&&s.includes("@")&&(e.author={email:s.substr(0,s.length-1),name:r.join("<").trim()})}),new de(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[t,r,s])=>{e.summary.changes=parseInt(t,10)||0,e.summary.insertions=parseInt(r,10)||0,e.summary.deletions=parseInt(s,10)||0}),new de(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[t,r,s])=>{e.summary.changes=parseInt(t,10)||0;const o=parseInt(r,10)||0;"-"===s?e.summary.deletions=o:"+"===s&&(e.summary.insertions=o)})]}});var Ar,Fr,Rr,xr,Dr=d({"src/lib/tasks/commit.ts"(){Gr(),xe(),st()}}),Ur=d({"src/lib/tasks/first-commit.ts"(){xe(),st()}}),Ir=d({"src/lib/tasks/hash-object.ts"(){st()}}),$r=d({"src/lib/responses/InitSummary.ts"(){Ar=class{constructor(e,t,r,s){this.bare=e,this.path=t,this.existing=r,this.gitDir=s}},Fr=/^Init.+ repository in (.+)$/,Rr=/^Rein.+ in (.+)$/}});var Lr,jr=d({"src/lib/tasks/init.ts"(){$r(),xr="--bare"}});function Mr(e){for(let t=0;t<e.length;t++){const r=Lr.exec(e[t]);if(r)return`--${r[1]}`}return""}function zr(e){return Lr.test(e)}var qr,Br,Nr,Hr,Vr,Wr,Kr=d({"src/lib/args/log-format.ts"(){Lr=/^--(stat|numstat|name-only|name-status)(=|$)/}}),Jr=d({"src/lib/responses/DiffSummary.ts"(){qr=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function Qr(e=""){const t=Wr[e];return e=>Ce(new qr,t,e,!1)}var Yr,Zr,Xr,es,ts=d({"src/lib/parsers/parse-diff-summary.ts"(){Kr(),Jr(),kt(),xe(),Br=[new de(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[t,r,s=""])=>{e.files.push({file:t.trim(),changes:K(r),insertions:s.replace(/[^+]/g,"").length,deletions:s.replace(/[^-]/g,"").length,binary:!1})}),new de(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[t,r,s])=>{e.files.push({file:t.trim(),before:K(r),after:K(s),binary:!0})}),new de(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[t,r])=>{const s=/(\d+) i/.exec(r),o=/(\d+) d/.exec(r);e.changed=K(t),e.insertions=K(s?.[1]),e.deletions=K(o?.[1])})],Nr=[new de(/(\d+)\t(\d+)\t(.+)$/,(e,[t,r,s])=>{const o=K(t),n=K(r);e.changed++,e.insertions+=o,e.deletions+=n,e.files.push({file:s,changes:o+n,insertions:o,deletions:n,binary:!1})}),new de(/-\t-\t(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,after:0,before:0,binary:!0})})],Hr=[new de(/(.+)$/,(e,[t])=>{e.changed++,e.files.push({file:t,changes:0,insertions:0,deletions:0,binary:!1})})],Vr=[new de(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[t,r,s,o,n])=>{var i;e.changed++,e.files.push({file:n??s,changes:0,insertions:0,deletions:0,binary:!1,status:X((i=t,bt.has(i)&&t)),from:X(!!n&&s!==n&&s),similarity:K(r)})})],Wr={"":Br,"--stat":Br,"--numstat":Nr,"--name-status":Vr,"--name-only":Hr}}});function rs(e=Xr,t=es,r=""){const s=Qr(r);return function(r){const o=j(r.trim(),!1,Yr).map(function(r){const o=r.split(Zr),n=function(e,t){return t.reduce((t,r,s)=>(t[r]=e[s]||"",t),Object.create({diff:null}))}(o[0].split(e),t);return o.length>1&&o[1].trim()&&(n.diff=s(o[1])),n});return{all:o,latest:o.length&&o[0]||null,total:o.length}}}var ss=d({"src/lib/parsers/parse-list-log-summary.ts"(){xe(),ts(),Kr(),Yr="òòòòòò ",Zr=" òò",Xr=" ò ",es=["hash","date","message","refs","author_name","author_email"]}}),os={};function ns(e){let t=Mr(e);const r=["diff"];return""===t&&(t="--stat",r.push("--stat=4096")),r.push(...e),is(r)||{commands:r,format:"utf-8",parser:Qr(t)}}function is(e){const t=e.filter(zr);return t.length>1?We(`Summary flags are mutually exclusive - pick one of ${t.join(",")}`):t.length&&e.includes("-z")?We(`Summary flag ${t} parsing is not compatible with null termination option '-z'`):void 0}g(os,{diffSummaryTask:()=>ns,validateLogFormatConfig:()=>is});var as,cs=d({"src/lib/tasks/diff.ts"(){Kr(),ts(),st()}});function ls(e={},t=[]){const r=ie(e.splitter,te,Xr),s=ce(e.format)?e.format:{hash:"%H",date:!1===e.strictDate?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:!1!==e.mailMap?"%aN":"%an",author_email:!1!==e.mailMap?"%aE":"%ae"},[o,n]=function(e,t){const r=[],s=[];return Object.keys(e).forEach(t=>{r.push(t),s.push(String(e[t]))}),[r,s.join(t)]}(s,r),i=[],a=[`--pretty=format:${Yr}${n}${Zr}`,...t],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){const t=!1!==e.symmetric?"...":"..";i.push(`${e.from||""}${t}${e.to||""}`)}var l;return te(e.file)&&a.push("--follow",w(e.file)),ve((l=e,Object.keys(l).reduce((e,t)=>(t in as||(e[t]=l[t]),e),{})),a),{fields:o,splitter:r,commands:[...a,...i]}}var ps,us,ds,gs,ms,hs=d({"src/lib/tasks/log.ts"(){Kr(),G(),ss(),xe(),st(),cs(),as=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(as||{})}}),fs=d({"src/lib/responses/MergeSummary.ts"(){ps=class{constructor(e,t=null,r){this.reason=e,this.file=t,this.meta=r}toString(){return`${this.file}:${this.reason}`}},us=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),bs=d({"src/lib/responses/PullSummary.ts"(){ds=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},gs=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function ws(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function Ts(e){const t=/^\s*(\d+)/.exec(e),r=/delta (\d+)/i.exec(e);return{count:K(t&&t[1]||"0"),delta:K(r&&r[1]||"0")}}var Es,vs,ys=d({"src/lib/parsers/parse-remote-objects.ts"(){xe(),ms=[new ge(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[t,r])=>{const s=t.toLowerCase(),o=ws(e.remoteMessages);Object.assign(o,{[s]:K(r)})}),new ge(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[t,r])=>{const s=t.toLowerCase(),o=ws(e.remoteMessages);Object.assign(o,{[s]:K(r)})}),new ge(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[t,r,s])=>{const o=ws(e.remoteMessages);o.total=Ts(t),o.reused=Ts(r),o.packReused=K(s)})]}});function ks(e,t){return Ce({remoteMessages:new vs},Es,t)}var _s,Ps,Os,Cs,Ss,Gs,As,Fs,Rs,xs=d({"src/lib/parsers/parse-remote-messages.ts"(){xe(),ys(),Es=[new ge(/^remote:\s*(.+)$/,(e,[t])=>(e.remoteMessages.all.push(t.trim()),!1)),...ms,new ge([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[t])=>{e.remoteMessages.pullRequestUrl=t}),new ge([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[t,r,s])=>{e.remoteMessages.vulnerabilities={count:K(t),summary:r,url:s}})],vs=class{constructor(){this.all=[]}}}}),Ds=d({"src/lib/parsers/parse-pull.ts"(){bs(),xe(),xs(),_s=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Ps=/^(create|delete) mode \d+ (.+)/,Os=[new de(/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,(e,[t,r,s])=>{e.files.push(t),r&&(e.insertions[t]=r.length),s&&(e.deletions[t]=s.length)}),new de(_s,(e,[t,,r,,s])=>(void 0!==r||void 0!==s)&&(e.summary.changes=+t||0,e.summary.insertions=+r||0,e.summary.deletions=+s||0,!0)),new de(Ps,(e,[t,r])=>{q(e.files,r),q("create"===t?e.created:e.deleted,r)})],Cs=[new de(/^from\s(.+)$/i,(e,[t])=>{e.remote=t}),new de(/^fatal:\s(.+)$/,(e,[t])=>{e.message=t}),new de(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[t,r,s,o])=>{e.branch.local=s,e.hash.local=t,e.branch.remote=o,e.hash.remote=r})],Ss=(e,t)=>Ce(new ds,Os,[e,t]),Gs=(e,t)=>Object.assign(new ds,Ss(e,t),ks(0,t))}}),Us=d({"src/lib/parsers/parse-merge.ts"(){fs(),xe(),Ds(),As=[new de(/^Auto-merging\s+(.+)$/,(e,[t])=>{e.merges.push(t)}),new de(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[t,r])=>{e.conflicts.push(new ps(t,r))}),new de(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[t,r,s])=>{e.conflicts.push(new ps(t,r,{deleteRef:s}))}),new de(/^CONFLICT\s+\((.+)\):/,(e,[t])=>{e.conflicts.push(new ps(t,null))}),new de(/^Automatic merge failed;\s+(.+)$/,(e,[t])=>{e.result=t})],Fs=(e,t)=>Object.assign(Rs(e,t),Gs(e,t)),Rs=e=>Ce(new us,As,e)}});function Is(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(e,t){const r=Fs(e,t);if(r.failed)throw new o(r);return r}}:We("Git.merge requires at least one option")}var $s,Ls,js,Ms=d({"src/lib/tasks/merge.ts"(){b(),Us(),st()}}),zs=d({"src/lib/parsers/parse-push.ts"(){xe(),xs(),$s=[new de(/^Pushing to (.+)$/,(e,[t])=>{e.repo=t}),new de(/^updating local tracking ref '(.+)'/,(e,[t])=>{e.ref={...e.ref||{},local:t}}),new de(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[t,r,s])=>{e.pushed.push(function(e,t,r){const s=r.includes("deleted"),o=r.includes("tag")||/^refs\/tags/.test(e),n=!r.includes("new");return{deleted:s,tag:o,branch:!o,new:!n,alreadyUpdated:n,local:e,remote:t}}(t,r,s))}),new de(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[t,r,s])=>{e.branch={...e.branch||{},local:t,remote:r,remoteName:s}}),new de(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[t,r,s,o])=>{e.update={head:{local:t,remote:r},hash:{from:s,to:o}}})],Ls=(e,t)=>({...js(e,t),...ks(0,t)}),js=(e,t)=>Ce({pushed:[]},$s,[e,t])}}),qs={};function Bs(e={},t){return q(t,"--tags"),Ns(e,t)}function Ns(e={},t){const r=["push",...t];return e.branch&&r.splice(1,0,e.branch),e.remote&&r.splice(1,0,e.remote),N(r,"-v"),q(r,"--verbose"),q(r,"--porcelain"),{commands:r,format:"utf-8",parser:Ls}}g(qs,{pushTagsTask:()=>Bs,pushTask:()=>Ns});var Hs,Vs,Ws,Ks,Js,Qs=d({"src/lib/tasks/push.ts"(){zs(),xe()}}),Ys=d({"src/lib/tasks/show.ts"(){xe(),st()}}),Zs=d({"src/lib/responses/FileStatusSummary.ts"(){Hs=/^(.+)\0(.+)$/,Vs=class{constructor(e,t,r){if(this.path=e,this.index=t,this.working_dir=r,"R"===t||"R"===r){const t=Hs.exec(e)||[null,e,e];this.from=t[2]||"",this.path=t[1]||""}}}}});function Xs(e){const[t,r]=e.split(O);return{from:r||t,to:t}}function eo(e,t,r){return[`${e}${t}`,r]}function to(e,...t){return t.map(t=>eo(e,t,(e,t)=>q(e.conflicted,t)))}function ro(e,t){const r=t.trim();switch(" "){case r.charAt(2):return s(r.charAt(0),r.charAt(1),r.substr(3));case r.charAt(1):return s(" ",r.charAt(0),r.substr(2));default:return}function s(t,r,s){const o=`${t}${r}`,n=Ks.get(o);n&&n(e,s),"##"!==o&&"!!"!==o&&e.files.push(new Vs(s,t,r))}}var so,oo,no,io=d({"src/lib/responses/StatusSummary.ts"(){xe(),Zs(),Ws=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Ks=new Map([eo(" ","A",(e,t)=>q(e.created,t)),eo(" ","D",(e,t)=>q(e.deleted,t)),eo(" ","M",(e,t)=>q(e.modified,t)),eo("A"," ",(e,t)=>q(e.created,t)&&q(e.staged,t)),eo("A","M",(e,t)=>q(e.created,t)&&q(e.staged,t)&&q(e.modified,t)),eo("D"," ",(e,t)=>q(e.deleted,t)&&q(e.staged,t)),eo("M"," ",(e,t)=>q(e.modified,t)&&q(e.staged,t)),eo("M","M",(e,t)=>q(e.modified,t)&&q(e.staged,t)),eo("R"," ",(e,t)=>{q(e.renamed,Xs(t))}),eo("R","M",(e,t)=>{const r=Xs(t);q(e.renamed,r),q(e.modified,r.to)}),eo("!","!",(e,t)=>{q(e.ignored=e.ignored||[],t)}),eo("?","?",(e,t)=>q(e.not_added,t)),...to("A","A","U"),...to("D","D","U"),...to("U","A","D","U"),["##",(e,t)=>{let r;r=/ahead (\d+)/.exec(t),e.ahead=r&&+r[1]||0,r=/behind (\d+)/.exec(t),e.behind=r&&+r[1]||0,r=/^(.+?(?=(?:\.{3}|\s|$)))/.exec(t),e.current=r&&r[1],r=/\.{3}(\S*)/.exec(t),e.tracking=r&&r[1],r=/\son\s([\S]+)$/.exec(t),e.current=r&&r[1]||e.current,e.detached=/\(no branch\)/.test(t)}]]),Js=function(e){const t=e.split(O),r=new Ws;for(let e=0,s=t.length;e<s;){let s=t[e++].trim();s&&("R"===s.charAt(0)&&(s+=O+(t[e++]||"")),ro(r,s))}return r}}}),ao=d({"src/lib/tasks/status.ts"(){io(),so=["--null","-z"]}});function co(e=0,t=0,r=0,s="",o=!0){return Object.defineProperty({major:e,minor:t,patch:r,agent:s,installed:o},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function lo(e){return e===oo?co(0,0,0,"",!1):Ce(co(0,0,0,e),no,e)}var po,uo=d({"src/lib/tasks/version.ts"(){xe(),oo="installed=false",no=[new de(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[t,r,s,o=""])=>{Object.assign(e,co(K(t),K(r),K(s),o))}),new de(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[t,r,s,o=""])=>{Object.assign(e,co(K(t),K(r),s,o))})]}}),go={};g(go,{SimpleGitApi:()=>po});var mo,ho,fo,bo=d({"src/lib/simple-git-api.ts"(){Er(),yr(),Or(),Cr(),Dr(),yt(),Ur(),Ct(),Ir(),jr(),hs(),Ms(),Qs(),Ys(),ao(),st(),uo(),xe(),po=class{constructor(e){this._executor=e}_runTask(e,t){const r=this._executor.chain(),s=r.push(e);return t&&function(e,t,r=C){t.then(e=>{r(null,e)},t=>{t?.task===e&&r(t instanceof o?function(e){let t=e=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${e} should be GitResponseError.git.${e}, this will no longer be available in version 3`),t=C};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(function(r,s){return s in e||(r[s]={enumerable:!1,configurable:!1,get:()=>(t(s),e.git[s])}),r},{}))}(t):t,void 0)})}(e,s,t),Object.create(this,{then:{value:s.then.bind(s)},catch:{value:s.catch.bind(s)},_executor:{value:r}})}add(e){return this._runTask(Ke(["add",...H(e)]),_e(arguments))}cwd(e){const t=_e(arguments);return"string"==typeof e?this._runTask(vr(e,this._executor),t):"string"==typeof e?.path?this._runTask(vr(e.path,e.root&&this._executor||void 0),t):this._runTask(We("Git.cwd: workingDirectory must be supplied as a string"),t)}hashObject(e,t){return this._runTask(function(e,t){const r=["hash-object",e];return t&&r.push("-w"),Ke(r,!0)}(e,!0===t),_e(arguments))}init(e){return this._runTask(function(e=!1,t,r){const s=["init",...r];return e&&!s.includes(xr)&&s.splice(1,0,xr),{commands:s,format:"utf-8",parser:e=>function(e,t,r){const s=String(r).trim();let o;if(o=Fr.exec(s))return new Ar(e,t,!1,o[1]);if(o=Rr.exec(s))return new Ar(e,t,!0,o[1]);let n="";const i=s.split(" ");for(;i.length;)if("in"===i.shift()){n=i.join(" ");break}return new Ar(e,t,/^re/i.test(s),n)}(s.includes("--bare"),t,e)}}(!0===e,this._executor.cwd,ye(arguments)),_e(arguments))}merge(){return this._runTask(Is(ye(arguments)),_e(arguments))}mergeFromTo(e,t){return te(e)&&te(t)?this._runTask(Is([e,t,...ye(arguments)]),_e(arguments,!1)):this._runTask(We("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){const e=Ns({remote:ie(arguments[0],te),branch:ie(arguments[1],te)},ye(arguments));return this._runTask(e,_e(arguments))}stash(){return this._runTask(Ke(["stash",...ye(arguments)]),_e(arguments))}status(){return this._runTask({format:"utf-8",commands:["status","--porcelain","-b","-u","--null",...ye(arguments).filter(e=>!so.includes(e))],parser:e=>Js(e)},_e(arguments))}},Object.assign(po.prototype,{checkout(){return this._runTask(kr(ye(arguments,1)),_e(arguments))},checkoutBranch(e,t){return this._runTask(kr(["-b",e,t,...ye(arguments)]),_e(arguments))},checkoutLocalBranch(e){return this._runTask(kr(["-b",e,...ye(arguments)]),_e(arguments))}},{commit(e,...t){const r=_e(arguments),s=function(e){return!se(e)&&We("git.commit: requires the commit message to be supplied as a string/string[]")}(e)||function(e,t,r){return{commands:["-c","core.abbrev=40","commit",...J(e,"-m"),...t,...r],format:"utf-8",parser:Sr}}(H(e),H(ie(t[0],se,[])),[...ie(t[1],ee,[]),...ye(arguments,0,!0)]);return this._runTask(s,r)}},{addConfig(e,t,...r){return this._runTask(function(e,t,r,s){const o=["config",`--${s}`];return r&&o.push("--add"),o.push(e,t),{commands:o,format:"utf-8",parser:e=>e}}(e,t,!0===r[0],ht(r[1],"local")),_e(arguments))},getConfig(e,t){return this._runTask(function(e,t){const r=["config","--null","--show-origin","--get-all",e];return t&&r.splice(1,0,`--${t}`),{commands:r,format:"utf-8",parser:t=>function(e,t){let r=null;const s=[],o=new Map;for(const n of dt(e,t))n.key===t&&(s.push(r=n.value),o.has(n.file)||o.set(n.file,[]),o.get(n.file).push(r));return{key:t,paths:Array.from(o.keys()),scopes:o,value:r,values:s}}(t,e)}}(e,ht(t,void 0)),_e(arguments))},listConfig(...e){return this._runTask(function(e){const t=["config","--list","--show-origin","--null"];return e&&t.push(`--${e}`),{commands:t,format:"utf-8",parser:e=>function(e){const t=new lt;for(const r of dt(e))t.addValue(r.file,String(r.key),r.value);return t}(e)}}(ht(e[0],void 0)),_e(arguments))}},{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser:e=>Ce({count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0},[_r],e)})}},{firstCommit(){return this._runTask(Ke(["rev-list","--max-parents=0","HEAD"],!0),_e(arguments))}},{grep(e){const t=_e(arguments),r=ye(arguments);for(const e of wt)if(r.includes(e))return this._runTask(We(`git.grep: use of "${e}" is not supported.`),t);"string"==typeof e&&(e=_t().param(e));const s=["grep","--null","-n","--full-name",...r,...e];return this._runTask({commands:s,format:"utf-8",parser:e=>function(e){const t=new Set,r={};return M(e,e=>{const[s,o,n]=e.split(O);t.add(s),(r[s]=r[s]||[]).push({line:K(o),path:s,preview:n})}),{paths:t,results:r}}(e)},t)}},{log(...e){const t=_e(arguments),r=ls(ke(arguments),ie(arguments[0],ee)),s=function(e,t){return te(e)&&te(t)&&We("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}(...e)||is(r.commands)||function(e){return function(e,t,r){const s=rs(e,t,Mr(r));return{commands:["log",...r],format:"utf-8",parser:s}}(e.splitter,e.fields,e.commands)}(r);return this._runTask(s,t)}},{showBuffer(){const e=["show",...ye(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Je(e),_e(arguments))},show(){const e=["show",...ye(arguments,1)];return this._runTask(Ke(e),_e(arguments))}},{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:lo,onError(e,t,r,s){if(-2===e.exitCode)return r(Buffer.from(oo));s(t)}})}})}}),wo={};g(wo,{Scheduler:()=>fo});var To=d({"src/lib/runners/scheduler.ts"(){xe(),mo=r(100),dr(),ho=(()=>{let e=0;return()=>{e++;const{promise:t,done:r}=(0,mo.createDeferred)();return{promise:t,done:r,id:e}}})(),fo=class{constructor(e=2){this.concurrency=e,this.logger=cr("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency)return void this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);const e=q(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),N(this.running,e),this.schedule()})}next(){const{promise:e,id:t}=q(this.pending,ho());return this.logger("Scheduling id=%s",t),this.schedule(),e}}}}),Eo={};function vo(e,t){return Ke(["apply",...t,...e])}g(Eo,{applyPatchTask:()=>vo});var yo,ko,_o,Po,Oo=d({"src/lib/tasks/apply-patch.ts"(){st()}}),Co=d({"src/lib/responses/BranchDeleteSummary.ts"(){yo=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function So(e,t){return 1===t&&ko.test(e)}var Go,Ao,Fo=d({"src/lib/parsers/parse-branch-delete.ts"(){Co(),xe(),ko=/^error[^']+'([^']+)'/m,_o=[new de(/(\S+)\s+\(\S+\s([^)]+)\)/,(e,[t,r])=>{const s=function(e,t){return{branch:e,hash:t,success:!0}}(t,r);e.all.push(s),e.branches[t]=s}),new de(ko,(e,[t])=>{const r=function(e){return{branch:e,hash:null,success:!1}}(t);e.errors.push(r),e.all.push(r),e.branches[t]=r})],Po=(e,t)=>Ce(new yo,_o,[e,t])}}),Ro=d({"src/lib/responses/BranchSummary.ts"(){Go=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,t,r,s,o){"*"===e&&(this.detached=t,this.current=r),this.all.push(r),this.branches[r]={current:"*"===e,linkedWorkTree:"+"===e,name:r,commit:s,label:o}}}}});function xo(e){return e?e.charAt(0):""}function Do(e){return Ce(new Go,Ao,e)}var Uo=d({"src/lib/parsers/parse-branch.ts"(){Ro(),xe(),Ao=[new de(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[t,r,s,o])=>{e.push(xo(t),!0,r,s,o)}),new de(/^([*+]\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s,(e,[t,r,s,o])=>{e.push(xo(t),!1,r,s,o)})]}}),Io={};function $o(e){const t=["-d","-D","--delete"];return e.some(e=>t.includes(e))}function Lo(e){const t=$o(e),r=["branch",...e];return 1===r.length&&r.push("-a"),r.includes("-v")||r.splice(1,0,"-v"),{format:"utf-8",commands:r,parser:(e,r)=>t?Po(e,r).all[0]:Do(e)}}function jo(){return{format:"utf-8",commands:["branch","-v"],parser:Do}}function Mo(e,t=!1){return{format:"utf-8",commands:["branch","-v",t?"-D":"-d",...e],parser:(e,t)=>Po(e,t),onError({exitCode:e,stdOut:t},r,s,o){if(!So(String(r),e))return o(r);s(t)}}}function zo(e,t=!1){const r={format:"utf-8",commands:["branch","-v",t?"-D":"-d",e],parser:(t,r)=>Po(t,r).branches[e],onError({exitCode:e,stdErr:t,stdOut:s},n,i,a){if(!So(String(n),e))return a(n);throw new o(r.parser(Q(s),Q(t)),String(n))}};return r}g(Io,{branchLocalTask:()=>jo,branchTask:()=>Lo,containsDeleteBranchCommand:()=>$o,deleteBranchTask:()=>zo,deleteBranchesTask:()=>Mo});var qo,Bo=d({"src/lib/tasks/branch.ts"(){b(),Fo(),Uo(),xe()}}),No=d({"src/lib/responses/CheckIgnore.ts"(){qo=e=>e.split(/\n/g).map(e=>e.trim()).filter(e=>!!e)}}),Ho={};function Vo(e){return{commands:["check-ignore",...e],format:"utf-8",parser:qo}}g(Ho,{checkIgnoreTask:()=>Vo});var Wo=d({"src/lib/tasks/check-ignore.ts"(){No()}}),Ko={};function Jo(e){return/^--upload-pack(=|$)/.test(e)}function Qo(e,t,r){const s=["clone",...r];return te(e)&&s.push(e),te(t)&&s.push(t),s.find(Jo)?We("git.fetch: potential exploit argument blocked."):Ke(s)}function Yo(e,t,r){return q(r,"--mirror"),Qo(e,t,r)}g(Ko,{cloneMirrorTask:()=>Yo,cloneTask:()=>Qo});var Zo,Xo=d({"src/lib/tasks/clone.ts"(){st(),xe()}});function en(e,t){return Ce({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},Zo,[e,t])}var tn=d({"src/lib/parsers/parse-fetch.ts"(){xe(),Zo=[new de(/From (.+)$/,(e,[t])=>{e.remote=t}),new de(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.branches.push({name:t,tracking:r})}),new de(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[t,r])=>{e.tags.push({name:t,tracking:r})}),new de(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[t])=>{e.deleted.push({tracking:t})}),new de(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[t,r,s,o])=>{e.updated.push({name:s,tracking:o,to:r,from:t})})]}}),rn={};function sn(e){return/^--upload-pack(=|$)/.test(e)}function on(e,t,r){const s=["fetch",...r];return e&&t&&s.push(e,t),s.find(sn)?We("git.fetch: potential exploit argument blocked."):{commands:s,format:"utf-8",parser:en}}g(rn,{fetchTask:()=>on});var nn,an=d({"src/lib/tasks/fetch.ts"(){tn(),st()}});function cn(e){return Ce({moves:[]},nn,e)}var ln=d({"src/lib/parsers/parse-move.ts"(){xe(),nn=[new de(/^Renaming (.+) to (.+)$/,(e,[t,r])=>{e.moves.push({from:t,to:r})})]}}),pn={};function un(e,t){return{commands:["mv","-v",...H(e),t],format:"utf-8",parser:cn}}g(pn,{moveTask:()=>un});var dn=d({"src/lib/tasks/move.ts"(){ln(),xe()}}),gn={};function mn(e,t,r){const s=["pull",...r];return e&&t&&s.splice(1,0,e,t),{commands:s,format:"utf-8",parser:(e,t)=>Gs(e,t),onError(e,t,r,s){const n=function(e,t){const r=Ce(new gs,Cs,[e,t]);return r.message&&r}(Q(e.stdOut),Q(e.stdErr));if(n)return s(new o(n));s(t)}}}g(gn,{pullTask:()=>mn});var hn=d({"src/lib/tasks/pull.ts"(){b(),Ds(),xe()}});function fn(e){const t={};return wn(e,([e])=>t[e]={name:e}),Object.values(t)}function bn(e){const t={};return wn(e,([e,r,s])=>{t.hasOwnProperty(e)||(t[e]={name:e,refs:{fetch:"",push:""}}),s&&r&&(t[e].refs[s.replace(/[^a-z]/g,"")]=r)}),Object.values(t)}function wn(e,t){M(e,e=>t(e.split(/\s+/)))}var Tn=d({"src/lib/responses/GetRemoteSummary.ts"(){xe()}}),En={};function vn(e,t,r){return Ke(["remote","add",...r,e,t])}function yn(e){const t=["remote"];return e&&t.push("-v"),{commands:t,format:"utf-8",parser:e?bn:fn}}function kn(e){const t=[...e];return"ls-remote"!==t[0]&&t.unshift("ls-remote"),Ke(t)}function _n(e){const t=[...e];return"remote"!==t[0]&&t.unshift("remote"),Ke(t)}function Pn(e){return Ke(["remote","remove",e])}g(En,{addRemoteTask:()=>vn,getRemotesTask:()=>yn,listRemotesTask:()=>kn,remoteTask:()=>_n,removeRemoteTask:()=>Pn});var On=d({"src/lib/tasks/remote.ts"(){Tn(),st()}}),Cn={};function Sn(e={},t){const r=ls(e),s=["stash","list",...r.commands,...t],o=rs(r.splitter,r.fields,Mr(s));return is(s)||{commands:s,format:"utf-8",parser:o}}g(Cn,{stashListTask:()=>Sn});var Gn=d({"src/lib/tasks/stash-list.ts"(){Kr(),ss(),cs(),hs()}}),An={};function Fn(e,t){return xn(["add",e,t])}function Rn(e){return xn(["init",...e])}function xn(e){const t=[...e];return"submodule"!==t[0]&&t.unshift("submodule"),Ke(t)}function Dn(e){return xn(["update",...e])}g(An,{addSubModuleTask:()=>Fn,initSubModuleTask:()=>Rn,subModuleTask:()=>xn,updateSubModuleTask:()=>Dn});var Un,In,$n=d({"src/lib/tasks/sub-module.ts"(){st()}});function Ln(e,t){return e===t?0:e>t?1:-1}function jn(e){return e.trim()}function Mn(e){return"string"==typeof e&&parseInt(e.replace(/^\D+/g,""),10)||0}var zn=d({"src/lib/responses/TagList.ts"(){Un=class{constructor(e,t){this.all=e,this.latest=t}},In=function(e,t=!1){const r=e.split("\n").map(jn).filter(Boolean);t||r.sort(function(e,t){const r=e.split("."),s=t.split(".");if(1===r.length||1===s.length)return function(e,t){const r=isNaN(e);return r!==isNaN(t)?r?1:-1:r?Ln(e,t):0}(Mn(r[0]),Mn(s[0]));for(let e=0,t=Math.max(r.length,s.length);e<t;e++){const t=Ln(Mn(r[e]),Mn(s[e]));if(t)return t}return 0});const s=t?r[0]:[...r].reverse().find(e=>e.indexOf(".")>=0);return new Un(r,s)}}}),qn={};function Bn(e=[]){const t=e.some(e=>/^--sort=/.test(e));return{format:"utf-8",commands:["tag","-l",...e],parser:e=>In(e,t)}}function Nn(e){return{format:"utf-8",commands:["tag",e],parser:()=>({name:e})}}function Hn(e,t){return{format:"utf-8",commands:["tag","-a","-m",t,e],parser:()=>({name:e})}}g(qn,{addAnnotatedTagTask:()=>Hn,addTagTask:()=>Nn,tagListTask:()=>Bn});var Vn,Wn,Kn,Jn=d({"src/lib/tasks/tag.ts"(){zn()}}),Qn=(Vn={"src/git.js"(e,t){var{GitExecutor:r}=(Tr(),h(wr)),{SimpleGitApi:s}=(bo(),h(go)),{Scheduler:o}=(To(),h(wo)),{configurationErrorTask:n}=(st(),h(He)),{asArray:i,filterArray:a,filterPrimitives:c,filterString:l,filterStringOrStringArray:p,filterType:u,getTrailingOptions:d,trailingFunctionArgument:g,trailingOptionsArgument:m}=(xe(),h(Ge)),{applyPatchTask:f}=(Oo(),h(Eo)),{branchTask:b,branchLocalTask:w,deleteBranchesTask:T,deleteBranchTask:E}=(Bo(),h(Io)),{checkIgnoreTask:v}=(Wo(),h(Ho)),{checkIsRepoTask:y}=(Be(),h(De)),{cloneTask:k,cloneMirrorTask:_}=(Xo(),h(Ko)),{cleanWithOptionsTask:P,isCleanOptionsArray:O}=(pt(),h(ot)),{diffSummaryTask:C}=(cs(),h(os)),{fetchTask:S}=(an(),h(rn)),{moveTask:G}=(dn(),h(pn)),{pullTask:A}=(hn(),h(gn)),{pushTagsTask:F}=(Qs(),h(qs)),{addRemoteTask:R,getRemotesTask:x,listRemotesTask:D,remoteTask:U,removeRemoteTask:I}=(On(),h(En)),{getResetMode:$,resetTask:L}=(Rt(),h(St)),{stashListTask:j}=(Gn(),h(Cn)),{addSubModuleTask:M,initSubModuleTask:z,subModuleTask:q,updateSubModuleTask:B}=($n(),h(An)),{addAnnotatedTagTask:N,addTagTask:H,tagListTask:V}=(Jn(),h(qn)),{straightThroughBufferTask:W,straightThroughStringTask:K}=(st(),h(He));function J(e,t){this._plugins=t,this._executor=new r(e.baseDir,new o(e.maxConcurrentProcesses),t),this._trimmed=e.trimmed}function Q(e,t,r,s){return"string"!=typeof r?n(`git.${e}() requires a string 'repoPath'`):t(r,u(s,l),d(arguments))}(J.prototype=Object.create(s.prototype)).constructor=J,J.prototype.customBinary=function(e){return this._plugins.reconfigure("binary",e),this},J.prototype.env=function(e,t){return 1===arguments.length&&"object"==typeof e?this._executor.env=e:(this._executor.env=this._executor.env||{})[e]=t,this},J.prototype.stashList=function(e){return this._runTask(j(m(arguments)||{},a(e)&&e||[]),g(arguments))},J.prototype.clone=function(){return this._runTask(Q("clone",k,...arguments),g(arguments))},J.prototype.mirror=function(){return this._runTask(Q("mirror",_,...arguments),g(arguments))},J.prototype.mv=function(e,t){return this._runTask(G(e,t),g(arguments))},J.prototype.checkoutLatestTag=function(e){var t=this;return this.pull(function(){t.tags(function(r,s){t.checkout(s.latest,e)})})},J.prototype.pull=function(e,t,r,s){return this._runTask(A(u(e,l),u(t,l),d(arguments)),g(arguments))},J.prototype.fetch=function(e,t){return this._runTask(S(u(e,l),u(t,l),d(arguments)),g(arguments))},J.prototype.silent=function(e){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},J.prototype.tags=function(e,t){return this._runTask(V(d(arguments)),g(arguments))},J.prototype.rebase=function(){return this._runTask(K(["rebase",...d(arguments)]),g(arguments))},J.prototype.reset=function(e){return this._runTask(L($(e),d(arguments)),g(arguments))},J.prototype.revert=function(e){const t=g(arguments);return"string"!=typeof e?this._runTask(n("Commit must be a string"),t):this._runTask(K(["revert",...d(arguments,0,!0),e]),t)},J.prototype.addTag=function(e){const t="string"==typeof e?H(e):n("Git.addTag requires a tag name");return this._runTask(t,g(arguments))},J.prototype.addAnnotatedTag=function(e,t){return this._runTask(N(e,t),g(arguments))},J.prototype.deleteLocalBranch=function(e,t,r){return this._runTask(E(e,"boolean"==typeof t&&t),g(arguments))},J.prototype.deleteLocalBranches=function(e,t,r){return this._runTask(T(e,"boolean"==typeof t&&t),g(arguments))},J.prototype.branch=function(e,t){return this._runTask(b(d(arguments)),g(arguments))},J.prototype.branchLocal=function(e){return this._runTask(w(),g(arguments))},J.prototype.raw=function(e){const t=!Array.isArray(e),r=[].slice.call(t?arguments:e,0);for(let e=0;e<r.length&&t;e++)if(!c(r[e])){r.splice(e,r.length-e);break}r.push(...d(arguments,0,!0));var s=g(arguments);return r.length?this._runTask(K(r,this._trimmed),s):this._runTask(n("Raw: must supply one or more command to execute"),s)},J.prototype.submoduleAdd=function(e,t,r){return this._runTask(M(e,t),g(arguments))},J.prototype.submoduleUpdate=function(e,t){return this._runTask(B(d(arguments,!0)),g(arguments))},J.prototype.submoduleInit=function(e,t){return this._runTask(z(d(arguments,!0)),g(arguments))},J.prototype.subModule=function(e,t){return this._runTask(q(d(arguments)),g(arguments))},J.prototype.listRemote=function(){return this._runTask(D(d(arguments)),g(arguments))},J.prototype.addRemote=function(e,t,r){return this._runTask(R(e,t,d(arguments)),g(arguments))},J.prototype.removeRemote=function(e,t){return this._runTask(I(e),g(arguments))},J.prototype.getRemotes=function(e,t){return this._runTask(x(!0===e),g(arguments))},J.prototype.remote=function(e,t){return this._runTask(U(d(arguments)),g(arguments))},J.prototype.tag=function(e,t){const r=d(arguments);return"tag"!==r[0]&&r.unshift("tag"),this._runTask(K(r),g(arguments))},J.prototype.updateServerInfo=function(e){return this._runTask(K(["update-server-info"]),g(arguments))},J.prototype.pushTags=function(e,t){const r=F({remote:u(e,l)},d(arguments));return this._runTask(r,g(arguments))},J.prototype.rm=function(e){return this._runTask(K(["rm","-f",...i(e)]),g(arguments))},J.prototype.rmKeepLocal=function(e){return this._runTask(K(["rm","--cached",...i(e)]),g(arguments))},J.prototype.catFile=function(e,t){return this._catFile("utf-8",arguments)},J.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},J.prototype._catFile=function(e,t){var r=g(t),s=["cat-file"],o=t[0];if("string"==typeof o)return this._runTask(n("Git.catFile: options must be supplied as an array of strings"),r);Array.isArray(o)&&s.push.apply(s,o);const i="buffer"===e?W(s):K(s);return this._runTask(i,r)},J.prototype.diff=function(e,t){const r=l(e)?n("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):K(["diff",...d(arguments)]);return this._runTask(r,g(arguments))},J.prototype.diffSummary=function(){return this._runTask(C(d(arguments,1)),g(arguments))},J.prototype.applyPatch=function(e){const t=p(e)?f(i(e),d([].slice.call(arguments,1))):n("git.applyPatch requires one or more string patches as the first argument");return this._runTask(t,g(arguments))},J.prototype.revparse=function(){const e=["rev-parse",...d(arguments,!0)];return this._runTask(K(e,!0),g(arguments))},J.prototype.clean=function(e,t,r){const s=O(e),o=s&&e.join("")||u(e,l)||"",n=d([].slice.call(arguments,s?1:0));return this._runTask(P(o,n),g(arguments))},J.prototype.exec=function(e){const t={commands:[],format:"utf-8",parser(){"function"==typeof e&&e()}};return this._runTask(t)},J.prototype.clearQueue=function(){return this},J.prototype.checkIgnore=function(e,t){return this._runTask(v(i(u(e,p,[]))),g(arguments))},J.prototype.checkIsRepo=function(e,t){return this._runTask(y(u(e,l)),g(arguments))},t.exports=J}},function(){return Wn||(0,Vn[l(Vn)[0]])((Wn={exports:{}}).exports,Wn),Wn.exports}),Yn={};function Zn(e){return Object.defineProperties(e,{__esModule:{value:!0},default:{value:e}})}function Xn(e){return Object.assign(e.bind(null),xt)}function ei(e,t){const r=new Yt,s=Te(e&&("string"==typeof e?{baseDir:e}:e)||{},t);if(!z(s.baseDir))throw new v(s,"Cannot use simple-git on a directory that does not exist");return Array.isArray(s.config)&&r.add(function(e){const t=J(e,"-c");return{type:"spawn.args",action:e=>[...t,...e]}}(s.config)),r.add(function({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:t=!1}={}){return{type:"spawn.args",action:(r,s)=>(r.forEach((o,n)=>{const i=n<r.length?r[n+1]:"";e||function(e,t){if(function(e){return"string"==typeof e&&"-c"===e.trim().toLowerCase()}(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(t))throw new y(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}(o,i),t||function(e,t){if(/^\s*--(upload|receive)-pack/.test(e))throw new y(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if("clone"===t&&/^\s*-u\b/.test(e))throw new y(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if("push"===t&&/^\s*--exec\b/.test(e))throw new y(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}(o,s.method)}),r)}}(s.unsafe)),r.add({type:"spawn.args",action(e){const t=[];let r;function s(e){(r=r||[]).push(...e)}for(let r=0;r<e.length;r++){const o=e[r];if(T(o))s(E(o));else{if("--"===o){s(e.slice(r+1).flatMap(e=>T(e)&&E(e)||e));break}t.push(o)}}return r?[...t,"--",...r.map(String)]:t}}),r.add(function({onClose:e=!0,onExit:t=50}={}){function r(e,t,r){!1!==e&&(!0===e?t.promise:t.promise.then(()=>Z(e))).then(r.done)}return{type:"spawn.after",async action(s,{spawned:o,close:n}){const i=function(){let s=-1;const o={close:(0,It.deferred)(),closeTimeout:(0,It.deferred)(),exit:(0,It.deferred)(),exitTimeout:(0,It.deferred)()},n=Promise.race([!1===e?$t:o.closeTimeout.promise,!1===t?$t:o.exitTimeout.promise]);return r(e,o.close,o.closeTimeout),r(t,o.exit,o.exitTimeout),{close(e){s=e,o.close.done()},exit(e){s=e,o.exit.done()},get exitCode(){return s},result:n}}();let a=!0,c=()=>{a=!1};o.stdout?.on("data",c),o.stderr?.on("data",c),o.on("error",c),o.on("close",e=>i.close(e)),o.on("exit",e=>i.exit(e));try{await i.result,a&&await Z(50),n(i.exitCode)}catch(e){n(i.exitCode,e)}}}}(s.completion)),s.abort&&r.add(function(e){if(!e)return;const t={type:"spawn.after",action(t,r){function s(){r.kill(new y(void 0,"abort","Abort signal received"))}e.addEventListener("abort",s),r.spawned.on("close",()=>e.removeEventListener("abort",s))}};return[{type:"spawn.before",action(t,r){e.aborted&&r.kill(new y(void 0,"abort","Abort already signaled"))}},t]}(s.abort)),s.progress&&r.add(function(e){const t="--progress",r=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action:(e,s)=>r.includes(s.method)?B(e,t):e},{type:"spawn.after",action(r,s){s.commands.includes(t)&&s.spawned.stderr?.on("data",t=>{const r=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(t.toString("utf8"));var o;r&&e({method:s.method,stage:(o=r[1],String(o.toLowerCase().split(" ",1))||"unknown"),progress:K(r[2]),processed:K(r[3]),total:K(r[4])})})}}]}(s.progress)),s.timeout&&r.add(function({block:e,stdErr:t=!0,stdOut:r=!0}){if(e>0)return{type:"spawn.after",action(s,o){let n;function i(){n&&clearTimeout(n),n=setTimeout(c,e)}function a(){o.spawned.stdout?.off("data",i),o.spawned.stderr?.off("data",i),o.spawned.off("exit",a),o.spawned.off("close",a),n&&clearTimeout(n)}function c(){a(),o.kill(new y(void 0,"timeout","block timeout reached"))}r&&o.spawned.stdout?.on("data",i),t&&o.spawned.stderr?.on("data",i),o.spawned.on("exit",a),o.spawned.on("close",a),i()}}}(s.timeout)),s.spawnOptions&&r.add(function(e){const t=Y(e,["uid","gid"]);return{type:"spawn.options",action:e=>({...t,...e})}}(s.spawnOptions)),r.add(Jt(Kt(!0))),s.errors&&r.add(Jt(s.errors)),function(e,t=["git"],r=!1){let s=Nt(H(t),r);e.on("binary",e=>{s=Nt(H(e),r)}),e.append("spawn.binary",()=>s.binary),e.append("spawn.args",e=>s.prefix?[s.prefix,...e]:e)}(r,s.binary,s.unsafe?.allowUnsafeCustomBinary),new Kn(s,r)}g(Yn,{esModuleFactory:()=>Zn,gitExportFactory:()=>Xn,gitInstanceFactory:()=>ei});var ti,ri,si=d({"src/lib/git-factory.ts"(){Dt(),nr(),ir(),xe(),Kn=Qn()}}),oi={};function ni(...e){let t,r=Promise.resolve();try{t=ei(...e)}catch(e){r=Promise.reject(e)}function s(){return i}function n(){return r}const i=[...ti,...ri].reduce((e,i)=>{const a=ri.includes(i),c=a?(l=i,p=t,function(...e){if("function"==typeof e[e.length])throw new TypeError("Promise interface requires that handlers are not supplied inline, trailing function not allowed in call to "+l);return r.then(function(){return new Promise(function(t,r){e.push((e,s)=>{if(e)return r((n=e)instanceof Error?n:"string"==typeof n?new Error(n):new o(n));var n;t(s)}),p[l].apply(p,e)})})}):function(e,t,r){return(...s)=>(t[e](...s),r)}(i,t,e);var l,p;const u=a?n:s;return Object.defineProperty(e,i,{enumerable:!1,configurable:!1,value:t?c:u}),e},{});return i}g(oi,{gitP:()=>ni});var ii=d({"src/lib/runners/promise-wrapped.ts"(){b(),si(),ti=["customBinary","env","outputHandler","silent"],ri=["add","addAnnotatedTag","addConfig","addRemote","addTag","applyPatch","binaryCatFile","branch","branchLocal","catFile","checkIgnore","checkIsRepo","checkout","checkoutBranch","checkoutLatestTag","checkoutLocalBranch","clean","clone","commit","cwd","deleteLocalBranch","deleteLocalBranches","diff","diffSummary","exec","fetch","getRemotes","init","listConfig","listRemote","log","merge","mergeFromTo","mirror","mv","pull","push","pushTags","raw","rebase","remote","removeRemote","reset","revert","revparse","rm","rmKeepLocal","show","stash","stashList","status","subModule","submoduleAdd","submoduleInit","submoduleUpdate","tag","tags","updateServerInfo"]}}),{gitP:ai}=(ii(),h(oi)),{esModuleFactory:ci,gitInstanceFactory:li,gitExportFactory:pi}=(si(),h(Yn)),ui=ci(pi(li));e.exports=Object.assign(ui,{gitP:ai,simpleGit:ui})},736:(e,t,r)=>{e.exports=function(e){function t(e){let r,o,n,i=null;function a(...e){if(!a.enabled)return;const s=a,o=Number(new Date),n=o-(r||o);s.diff=n,s.prev=r,s.curr=o,r=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(r,o)=>{if("%%"===r)return"%";i++;const n=t.formatters[o];if("function"==typeof n){const t=e[i];r=n.call(s,t),e.splice(i,1),i--}return r}),t.formatArgs.call(s,e),(s.log||t.log).apply(s,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=s,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(o!==t.namespaces&&(o=t.namespaces,n=t.enabled(e)),n),set:e=>{i=e}}),"function"==typeof t.init&&t.init(a),a}function s(e,r){const s=t(this.namespace+(void 0===r?":":r)+e);return s.log=this.log,s}function o(e,t){let r=0,s=0,o=-1,n=0;for(;r<e.length;)if(s<t.length&&(t[s]===e[r]||"*"===t[s]))"*"===t[s]?(o=s,n=r,s++):(r++,s++);else{if(-1===o)return!1;s=o+1,n++,r=n}for(;s<t.length&&"*"===t[s];)s++;return s===t.length}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names,...t.skips.map(e=>"-"+e)].join(",");return t.enable(""),e},t.enable=function(e){t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const e of r)"-"===e[0]?t.skips.push(e.slice(1)):t.names.push(e)},t.enabled=function(e){for(const r of t.skips)if(o(e,r))return!1;for(const r of t.names)if(o(e,r))return!0;return!1},t.humanize=r(585),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(r=>{t[r]=e[r]}),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return t.colors[Math.abs(r)%t.colors.length]},t.enable(t.load()),t}},753:(e,t,r)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=r(833):e.exports=r(33)},811:(e,t,r)=>{var s=r(346),o=r(640),n=r(447),i=Function.bind,a=i.bind(i);function c(e,t,r){var s=a(n,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(function(s){var n=r?[t,s,r]:[t,s];e[s]=e.api[s]=a(o,null).apply(null,n)})}function l(){var e={registry:{}},t=s.bind(null,e);return c(t,e),t}var p=!1;function u(){return p||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),p=!0),l()}u.Singular=function(){var e={registry:{}},t=s.bind(null,e,"h");return c(t,e,"h"),t}.bind(),u.Collection=l.bind(),e.exports=u,e.exports.Hook=u,e.exports.Singular=u.Singular,e.exports.Collection=u.Collection},833:(e,t,r)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;t.splice(1,0,r,"color: inherit");let s=0,o=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(s++,"%c"===e&&(o=s))}),t.splice(o,0,r)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")||t.storage.getItem("DEBUG")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=r(736)(t);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},896:e=>{"use strict";e.exports=require("fs")},926:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(423))}},t={};function r(s){var o=t[s];if(void 0!==o)return o.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s=r(265);module.exports=s})();
//# sourceMappingURL=extension.js.map