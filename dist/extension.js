(()=>{var e={18:e=>{"use strict";e.exports=require("tty")},23:e=>{"use strict";e.exports=require("util")},33:(e,r,t)=>{const s=t(18),o=t(23);r.init=function(e){e.inspectOpts={};const t=Object.keys(r.inspectOpts);for(let s=0;s<t.length;s++)e.inspectOpts[t[s]]=r.inspectOpts[t[s]]},r.log=function(...e){return process.stderr.write(o.formatWithOptions(r.inspectOpts,...e)+"\n")},r.formatArgs=function(t){const{namespace:s,useColors:o}=this;if(o){const r=this.color,o="[3"+(r<8?r:"8;5;"+r),n=`  ${o};1m${s} [0m`;t[0]=n+t[0].split("\n").join("\n"+n),t.push(o+"m+"+e.exports.humanize(this.diff)+"[0m")}else t[0]=(r.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+s+" "+t[0]},r.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},r.load=function(){return process.env.DEBUG},r.useColors=function(){return"colors"in r.inspectOpts?Boolean(r.inspectOpts.colors):s.isatty(process.stderr.fd)},r.destroy=o.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),r.colors=[6,2,3,4,5,1];try{const e=t(Object(function(){var e=new Error("Cannot find module 'supports-color'");throw e.code="MODULE_NOT_FOUND",e}()));e&&(e.stderr||e).level>=2&&(r.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}r.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,r)=>{const t=r.substring(6).toLowerCase().replace(/_([a-z])/g,(e,r)=>r.toUpperCase());let s=process.env[r];return s=!!/^(yes|on|true|enabled)$/i.test(s)||!/^(no|off|false|disabled)$/i.test(s)&&("null"===s?null:Number(s)),e[t]=s,e},{}),e.exports=t(736)(r);const{formatters:n}=e.exports;n.o=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts).split("\n").map(e=>e.trim()).join(" ")},n.O=function(e){return this.inspectOpts.colors=this.useColors,o.inspect(e,this.inspectOpts)}},100:(e,r)=>{"use strict";function t(){let e,r,t="pending";return{promise:new Promise((t,s)=>{e=t,r=s}),done(r){"pending"===t&&(t="resolved",e(r))},fail(e){"pending"===t&&(t="rejected",r(e))},get fulfilled(){return"pending"!==t},get status(){return t}}}Object.defineProperty(r,"__esModule",{value:!0}),r.createDeferred=r.deferred=void 0,r.deferred=t,r.createDeferred=t,r.default=t},265:function(e,r,t){"use strict";var s,o=this&&this.__createBinding||(Object.create?function(e,r,t,s){void 0===s&&(s=t);var o=Object.getOwnPropertyDescriptor(r,t);o&&!("get"in o?!r.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,s,o)}:function(e,r,t,s){void 0===s&&(s=t),e[s]=r[t]}),n=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),i=this&&this.__importStar||(s=function(e){return s=Object.getOwnPropertyNames||function(e){var r=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[r.length]=t);return r},s(e)},function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t=s(e),i=0;i<t.length;i++)"default"!==t[i]&&o(r,e,t[i]);return n(r,e),r}),a=this&&this.__awaiter||function(e,r,t,s){return new(t||(t=Promise))(function(o,n){function i(e){try{c(s.next(e))}catch(e){n(e)}}function a(e){try{c(s.throw(e))}catch(e){n(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t(function(e){e(r)})).then(i,a)}c((s=s.apply(e,r||[])).next())})},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.activate=function(e){const r=new d;u.window.registerTreeDataProvider("github-activity-dashboard",r);const t=new m;u.window.registerTreeDataProvider("github-repositories",t);const s=new h;u.window.registerTreeDataProvider("github-history",s);const o=new f;u.window.registerTreeDataProvider("github-stars",o);const n=new T;u.window.registerTreeDataProvider("github-notifications",n),u.commands.registerCommand("github-activity-dashboard.refresh",()=>{r.refresh(),t.refresh(),s.refresh(),o.refresh(),n.refresh()}),u.commands.registerCommand("github-activity-dashboard.createIssue",()=>a(this,void 0,void 0,function*(){var e;const t=yield u.window.showInputBox({prompt:"Enter issue title",placeHolder:"Bug: Something is not working..."});if(!t)return;const s=yield u.window.showInputBox({prompt:"Enter issue description (optional)",placeHolder:"Describe the issue..."}),o=null===(e=u.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(o)try{const e=(0,p.default)(o.uri.fsPath),n=(yield e.listRemote(["--get-url","origin"])).match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!n)return void u.window.showErrorMessage("Not a GitHub repository");const[,i,a]=n,c=yield u.authentication.getSession("github",["repo"],{createIfNone:!0}),d=new l.Octokit({auth:c.accessToken}),g=yield d.issues.create({owner:i,repo:a,title:t,body:s||""});u.window.showInformationMessage(`Issue created: #${g.data.number}`),r.refresh()}catch(e){u.window.showErrorMessage(`Failed to create issue: ${e.message}`)}else u.window.showErrorMessage("No workspace folder open")})),u.commands.registerCommand("github-activity-dashboard.searchRepos",()=>a(this,void 0,void 0,function*(){const e=yield u.window.showInputBox({prompt:"Search GitHub repositories",placeHolder:"Enter search terms..."});if(e)try{const r=yield u.authentication.getSession("github",["repo"],{createIfNone:!0}),t=new l.Octokit({auth:r.accessToken}),s=yield t.search.repos({q:e,sort:"stars",order:"desc"}),o=u.window.createQuickPick();o.items=s.data.items.slice(0,20).map(e=>({label:e.full_name,description:`⭐ ${e.stargazers_count} | ${e.description||"No description"}`,detail:e.html_url})),o.placeholder="Select a repository to open",o.onDidChangeSelection(e=>{e[0]&&(u.env.openExternal(u.Uri.parse(e[0].detail)),o.dispose())}),o.show()}catch(e){u.window.showErrorMessage(`Search failed: ${e.message}`)}})),u.commands.registerCommand("github-activity-dashboard.checkoutCommit",e=>a(this,void 0,void 0,function*(){var o;const n=null===(o=u.workspace.workspaceFolders)||void 0===o?void 0:o[0];if(n){const o=(0,p.default)(n.uri.fsPath);try{yield o.checkout(e),u.window.showInformationMessage(`Checked out commit ${e.substring(0,7)}`),r.refresh(),t.refresh(),s.refresh()}catch(e){u.window.showErrorMessage(`Failed to checkout commit: ${e.message}`)}}})),u.commands.registerCommand("github-activity-dashboard.openFile",e=>a(this,void 0,void 0,function*(){if(!e.fileInfo.owner||!e.fileInfo.repo||!e.fileInfo.sha)return;const r=new l.Octokit({auth:(yield u.authentication.getSession("github",["repo"],{createIfNone:!0})).accessToken}),t=yield r.git.getBlob({owner:e.fileInfo.owner,repo:e.fileInfo.repo,file_sha:e.fileInfo.sha}),s=Buffer.from(t.data.content,"base64").toString("utf8"),o={js:"javascript",ts:"typescript",jsx:"javascriptreact",tsx:"typescriptreact",py:"python",java:"java",cpp:"cpp",c:"c",cs:"csharp",php:"php",rb:"ruby",go:"go",rs:"rust",swift:"swift",kt:"kotlin",scala:"scala",sh:"shellscript",ps1:"powershell",sql:"sql",html:"html",css:"css",scss:"scss",sass:"sass",less:"less",json:"json",xml:"xml",yaml:"yaml",yml:"yaml",md:"markdown",txt:"plaintext"}[(e.label.split(".").pop()||"").toLowerCase()]||"plaintext",n=yield u.workspace.openTextDocument({content:s,language:o});yield u.window.showTextDocument(n,{preview:!0})}))},r.deactivate=function(){};const u=i(t(398)),l=t(458),p=c(t(662));class d{constructor(){this._onDidChangeTreeData=new u.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){const e=yield u.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new l.Octokit({auth:e.accessToken}),this.refresh()})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e)return[];{const e=yield this.octokit.users.getAuthenticated().then(e=>e.data.login),[r,t]=yield Promise.all([this.octokit.search.issuesAndPullRequests({q:`is:open is:issue assignee:${e}`}),this.octokit.search.issuesAndPullRequests({q:`is:open is:pr review-requested:${e}`})]),s=r.data.items.map(e=>{const r=new u.TreeItem(e.title,u.TreeItemCollapsibleState.None);return r.command={command:"vscode.open",title:"Open Issue",arguments:[u.Uri.parse(e.html_url)]},r.tooltip=`#${e.number}`,r}),o=t.data.items.map(e=>{const r=new u.TreeItem(e.title,u.TreeItemCollapsibleState.None);return r.command={command:"vscode.open",title:"Open Pull Request",arguments:[u.Uri.parse(e.html_url)]},r.tooltip=`#${e.number}`,r});return[new u.TreeItem(`Assigned Issues (${s.length})`,u.TreeItemCollapsibleState.Expanded),...s,new u.TreeItem(`Review Requests (${o.length})`,u.TreeItemCollapsibleState.Expanded),...o]}})}}class g extends u.TreeItem{constructor(e,r,t){super(e,r),this.label=e,this.collapsibleState=r,this.fileInfo=t,"file"===t.type?(this.command={command:"github-activity-dashboard.openFile",title:"Open File",arguments:[this]},this.iconPath=new u.ThemeIcon("file")):"dir"===t.type&&(this.iconPath=new u.ThemeIcon("folder"))}}class m{constructor(){this._onDidChangeTreeData=new u.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield u.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new l.Octokit({auth:e.accessToken}),this.refresh()}catch(e){u.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getGitInfo(){return a(this,void 0,void 0,function*(){var e;const r=null===(e=u.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(!r)return null;const s=r.uri.fsPath;try{const e=e=>new Promise((r,o)=>{t(317).exec(e,{cwd:s},(e,t,s)=>{if(e)return o(e);r({stdout:t,stderr:s})})}),r=(yield e("git config --get remote.origin.url")).stdout.trim().match(/github\.com[/:]([\w-]+)\/([\w-]+)(?:\.git)?/);if(!r)return null;const[,o,n]=r,i=(yield e("git rev-parse --abbrev-ref HEAD")).stdout.trim();yield e("git fetch");const a=(yield e(`git rev-list --left-right --count origin/${i}...HEAD`)).stdout.trim(),[c,u]=a.split("\t").map(Number);return{owner:o,repo:n,branch:i,ahead:u,behind:c}}catch(e){return console.error("Error getting git info:",e),null}})}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[];if(e){const{owner:r,repo:t,path:s}=e.fileInfo;if("string"!=typeof r||"string"!=typeof t||"string"!=typeof s)return[];const o=yield this.octokit.repos.getContent({owner:r,repo:t,path:s});return Array.isArray(o.data)?o.data.map(e=>new g(e.name,"dir"===e.type?u.TreeItemCollapsibleState.Collapsed:u.TreeItemCollapsibleState.None,{owner:r,repo:t,path:e.path,type:e.type,sha:e.sha})):[]}{const e=yield this.getGitInfo();if(!e)return[new g("Not a git repository or no remote found.",u.TreeItemCollapsibleState.None,{type:"message"})];const{owner:r,repo:t,branch:s,ahead:o,behind:n}=e;let i="";i=o>0&&n>0?`↑${o} ↓${n}`:o>0?`↑${o}`:n>0?`↓${n}`:"✓ Synced";const a=new g(`${t} (${s})`,u.TreeItemCollapsibleState.Collapsed,{owner:r,repo:t,path:"",type:"dir"});return a.description=i,a.tooltip=`Current repository: ${r}/${t}`,a.iconPath=new u.ThemeIcon("repo"),[a]}})}}class h{constructor(){this._onDidChangeTreeData=new u.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){var e;const r=null===(e=u.workspace.workspaceFolders)||void 0===e?void 0:e[0];if(!r)return[new u.TreeItem("No workspace folder open.",u.TreeItemCollapsibleState.None)];try{const e=(0,p.default)(r.uri.fsPath);if(!(yield e.checkIsRepo()))return[new u.TreeItem("Not a git repository.",u.TreeItemCollapsibleState.None)];const t=yield e.log({maxCount:20});return 0===t.all.length?[new u.TreeItem("No commits found.",u.TreeItemCollapsibleState.None)]:t.all.map(e=>{const r=new u.TreeItem(e.message,u.TreeItemCollapsibleState.None);return r.description=`${e.author_name} - ${new Date(e.date).toLocaleDateString()}`,r.tooltip=`${e.hash}\n${e.author_name} - ${e.date}\n\n${e.message}`,r.command={command:"github-activity-dashboard.checkoutCommit",title:"Checkout Commit",arguments:[e.hash]},r.iconPath=new u.ThemeIcon("git-commit"),r})}catch(e){return console.error("Failed to get git history:",e),[new u.TreeItem(`Error: ${e.message}`,u.TreeItemCollapsibleState.None)]}})}}class f{constructor(){this._onDidChangeTreeData=new u.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield u.authentication.getSession("github",["repo"],{createIfNone:!0});this.octokit=new l.Octokit({auth:e.accessToken}),this.refresh()}catch(e){u.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new u.TreeItem("Please authenticate with GitHub",u.TreeItemCollapsibleState.None)];try{return(yield this.octokit.activity.listReposStarredByAuthenticatedUser()).data.map(e=>{const r=new u.TreeItem(e.name,u.TreeItemCollapsibleState.None);return r.description=e.description||"",r.tooltip=`${e.full_name}\n⭐ ${e.stargazers_count} stars\n🍴 ${e.forks_count} forks\n\n${e.description||"No description"}`,r.command={command:"vscode.open",title:"Open Repository",arguments:[u.Uri.parse(e.html_url)]},r.contextValue="starredRepo",r.iconPath=new u.ThemeIcon("star-full"),r})}catch(e){return[new u.TreeItem(`Error: ${e.message}`,u.TreeItemCollapsibleState.None)]}})}}class T{constructor(){this._onDidChangeTreeData=new u.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this.initializeOctokit()}initializeOctokit(){return a(this,void 0,void 0,function*(){try{const e=yield u.authentication.getSession("github",["notifications"],{createIfNone:!0});this.octokit=new l.Octokit({auth:e.accessToken}),this.refresh()}catch(e){u.window.showErrorMessage("Could not authenticate with GitHub.")}})}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){return a(this,void 0,void 0,function*(){if(!this.octokit)return[new u.TreeItem("Please authenticate with GitHub",u.TreeItemCollapsibleState.None)];try{const e=yield this.octokit.activity.listNotificationsForAuthenticatedUser();return 0===e.data.length?[new u.TreeItem("No notifications",u.TreeItemCollapsibleState.None)]:e.data.map(e=>{const r=new u.TreeItem(e.subject.title,u.TreeItemCollapsibleState.None);return r.description=e.repository.full_name,r.tooltip=`${e.subject.type}: ${e.subject.title}\nRepository: ${e.repository.full_name}\nUpdated: ${e.updated_at}`,e.subject.url&&(r.command={command:"vscode.open",title:"Open Notification",arguments:[u.Uri.parse(e.subject.url.replace("api.github.com/repos","github.com").replace("/pulls/","/pull/").replace("/issues/","/issues/"))]}),r.iconPath=e.unread?new u.ThemeIcon("mail"):new u.ThemeIcon("mail-read"),r})}catch(e){return[new u.TreeItem(`Error: ${e.message}`,u.TreeItemCollapsibleState.None)]}})}}},317:e=>{"use strict";e.exports=require("child_process")},346:e=>{e.exports=function e(r,t,s,o){if("function"!=typeof s)throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce(function(t,s){return e.bind(null,r,s,t,o)},s)():Promise.resolve().then(function(){return r.registry[t]?r.registry[t].reduce(function(e,r){return r.hook.bind(null,e,o)},s)():s(o)})}},398:e=>{"use strict";e.exports=require("vscode")},423:function(e,r,t){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(896),n=s(t(753)).default("@kwsites/file-exists");r.exists=function(e,t=r.READABLE){return function(e,r,t){n("checking %s",e);try{const s=o.statSync(e);return s.isFile()&&r?(n("[OK] path represents a file"),!0):s.isDirectory()&&t?(n("[OK] path represents a directory"),!0):(n("[FAIL] path represents something other than a file or directory"),!1)}catch(e){if("ENOENT"===e.code)return n("[FAIL] path is not accessible: %o",e),!1;throw n("[FATAL] %o",e),e}}(e,(t&r.FILE)>0,(t&r.FOLDER)>0)},r.FILE=1,r.FOLDER=2,r.READABLE=r.FILE+r.FOLDER},447:e=>{e.exports=function(e,r,t){if(e.registry[r]){var s=e.registry[r].map(function(e){return e.orig}).indexOf(t);-1!==s&&e.registry[r].splice(s,1)}}},458:(e,r,t)=>{"use strict";function s(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}t.r(r),t.d(r,{Octokit:()=>ee});var o=t(811);function n(e,r){const t=Object.assign({},e);return Object.keys(r).forEach(s=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(r[s])?Object.assign(t,{[s]:r[s]}):s in e?t[s]=n(e[s],r[s]):Object.assign(t,{[s]:r[s]})}),t}function i(e){for(const r in e)void 0===e[r]&&delete e[r];return e}function a(e,r,t){if("string"==typeof r){let[e,s]=r.split(" ");t=Object.assign(s?{method:e,url:s}:{url:e},t)}else t=Object.assign({},r);var s;t.headers=(s=t.headers)?Object.keys(s).reduce((e,r)=>(e[r.toLowerCase()]=s[r],e),{}):{},i(t),i(t.headers);const o=n(e||{},t);return"/graphql"===t.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter(e=>!o.mediaType.previews.includes(e)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),o}const c=/\{[^{}}]+\}/g;function u(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function l(e,r){const t={__proto__:null};for(const s of Object.keys(e))-1===r.indexOf(s)&&(t[s]=e[s]);return t}function p(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function d(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function g(e,r,t){return r="+"===e||"#"===e?p(r):d(r),t?d(t)+"="+r:r}function m(e){return null!=e}function h(e){return";"===e||"&"===e||"?"===e}function f(e,r){var t=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,s,o){if(s){let e="";const o=[];if(-1!==t.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(t){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);o.push(function(e,r,t,s){var o=e[t],n=[];if(m(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),n.push(g(r,o,h(r)?t:""));else if("*"===s)Array.isArray(o)?o.filter(m).forEach(function(e){n.push(g(r,e,h(r)?t:""))}):Object.keys(o).forEach(function(e){m(o[e])&&n.push(g(r,o[e],e))});else{const e=[];Array.isArray(o)?o.filter(m).forEach(function(t){e.push(g(r,t))}):Object.keys(o).forEach(function(t){m(o[t])&&(e.push(d(t)),e.push(g(r,o[t].toString())))}),h(r)?n.push(d(t)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===r?m(o)&&n.push(d(t)):""!==o||"&"!==r&&"?"!==r?""===o&&n.push(""):n.push(d(t)+"=");return n}(r,e,s[1],s[2]||s[3]))}),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return p(o)}),"/"===e?e:e.replace(/\/$/,"")}function T(e){let r,t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n=l(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const r=e.match(c);return r?r.map(u).reduce((e,r)=>e.concat(r),[]):[]}(s);var a;s=(a=s,{expand:f.bind(null,a)}).expand(n),/^http/.test(s)||(s=e.baseUrl+s);const p=l(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&e.mediaType.previews?.length)){const r=o.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];o.accept=r.concat(e.mediaType.previews).map(r=>`application/vnd.github.${r}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(t)?s=function(e,r){const t=/\?/.test(e)?"&":"?",s=Object.keys(r);return 0===s.length?e:e+t+s.map(e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`).join("&")}(s,p):"data"in p?r=p.data:Object.keys(p).length&&(r=p),o["content-type"]||void 0===r||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&void 0===r&&(r=""),Object.assign({method:t,url:s,headers:o},void 0!==r?{body:r}:null,e.request?{request:e.request}:null)}function b(e,r,t){return T(a(e,r,t))}const E=function e(r,t){const s=a(r,t),o=b.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:e.bind(null,s),merge:a.bind(null,s),parse:T})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/9.0.6 ${s()}`},mediaType:{format:""}});class w extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var y=t(519),_=t.n(y);const k=_()(e=>console.warn(e)),v=_()(e=>console.warn(e));class O extends Error{constructor(e,r,t){let s;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=r,"headers"in t&&void 0!==t.headers&&(s=t.headers),"response"in t&&(this.response=t.response,s=t.response.headers);const o=Object.assign({},t.request);t.request.headers.authorization&&(o.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o,Object.defineProperty(this,"code",{get:()=>(k(new w("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),r)}),Object.defineProperty(this,"headers",{get:()=>(v(new w("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),s||{})})}}function P(e){const r=e.request&&e.request.log?e.request.log:console,t=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const r=Object.getPrototypeOf(e);if(null===r)return!0;const t=Object.prototype.hasOwnProperty.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&Function.prototype.call(t)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let s,o,n={},{fetch:i}=globalThis;if(e.request?.fetch&&(i=e.request.fetch),!i)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return i(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async i=>{o=i.url,s=i.status;for(const e of i.headers)n[e[0]]=e[1];if("deprecation"in n){const t=n.link&&n.link.match(/<([^<>]+)>; rel="deprecation"/),s=t&&t.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${n.sunset}${s?`. See ${s}`:""}`)}if(204!==s&&205!==s){if("HEAD"===e.method){if(s<400)return;throw new O(i.statusText,s,{response:{url:o,status:s,headers:n,data:void 0},request:e})}if(304===s)throw new O("Not modified",s,{response:{url:o,status:s,headers:n,data:await G(i)},request:e});if(s>=400){const r=await G(i),t=new O(function(e){if("string"==typeof e)return e;let r;return r="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${r}`:`${e.message}${r}`:`Unknown error: ${JSON.stringify(e)}`}(r),s,{response:{url:o,status:s,headers:n,data:r},request:e});throw t}return t?await G(i):i.body}}).then(e=>({status:s,url:o,headers:n,data:e})).catch(r=>{if(r instanceof O)throw r;if("AbortError"===r.name)throw r;let t=r.message;throw"TypeError"===r.name&&"cause"in r&&(r.cause instanceof Error?t=r.cause.message:"string"==typeof r.cause&&(t=r.cause)),new O(t,500,{request:e})})}async function G(e){const r=e.headers.get("content-type");return/application\/json/.test(r)?e.json().catch(()=>e.text()).catch(()=>""):!r||/^text\/|charset=utf-8$/.test(r)?e.text():function(e){return e.arrayBuffer()}(e)}const S=function e(r,t){const s=r.defaults(t);return Object.assign(function(r,t){const o=s.merge(r,t);if(!o.request||!o.request.hook)return P(s.parse(o));const n=(e,r)=>P(s.parse(s.merge(e,r)));return Object.assign(n,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(n,o)},{endpoint:s,defaults:e.bind(null,s)})}(E,{headers:{"user-agent":`octokit-request.js/8.4.1 ${s()}`}});var A=class extends Error{constructor(e,r,t){super("Request failed due to following response errors:\n"+t.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=r,this.response=t,this.name="GraphqlResponseError",this.errors=t.errors,this.data=t.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},C=["method","baseUrl","url","headers","request","query","mediaType"],F=["query","method","url"],R=/\/api\/v3\/?$/;function D(e,r){const t=e.defaults(r);return Object.assign((e,r)=>function(e,r,t){if(t){if("string"==typeof r&&"query"in t)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in t)if(F.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const s="string"==typeof r?Object.assign({query:r},t):r,o=Object.keys(s).reduce((e,r)=>C.includes(r)?(e[r]=s[r],e):(e.variables||(e.variables={}),e.variables[r]=s[r],e),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return R.test(n)&&(o.url=n.replace(R,"/api/graphql")),e(o).then(e=>{if(e.data.errors){const r={};for(const t of Object.keys(e.headers))r[t]=e.headers[t];throw new A(o,r,e.data)}return e.data.data})}(t,e,r),{defaults:D.bind(null,t),endpoint:t.endpoint})}D(S,{headers:{"user-agent":`octokit-graphql.js/7.1.1 ${s()}`},method:"POST",url:"/graphql"});const U=/^v1\./,j=/^ghs_/,L=/^ghu_/;async function I(e){const r=3===e.split(/\./).length,t=U.test(e)||j.test(e),s=L.test(e);return{type:"token",token:e,tokenType:r?"app":t?"installation":s?"user-to-server":"oauth"}}async function x(e,r,t,s){const o=r.endpoint.merge(t,s);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),r(o)}const $=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(I.bind(null,e),{hook:x.bind(null,e)})};var q="5.2.2",M=()=>{},B=console.warn.bind(console),N=console.error.bind(console),H=`octokit-core.js/${q} ${s()}`,z=class{static{this.VERSION=q}static defaults(e){return class extends(this){constructor(...r){const t=r[0]||{};super("function"!=typeof e?Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:`${t.userAgent} ${e.userAgent}`}:null):e(t))}}}static{this.plugins=[]}static plugin(...e){const r=this.plugins;return class extends(this){static{this.plugins=r.concat(e.filter(e=>!r.includes(e)))}}}constructor(e={}){const r=new o.Collection,t={baseUrl:S.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};var s;if(t.headers["user-agent"]=e.userAgent?`${e.userAgent} ${H}`:H,e.baseUrl&&(t.baseUrl=e.baseUrl),e.previews&&(t.mediaType.previews=e.previews),e.timeZone&&(t.headers["time-zone"]=e.timeZone),this.request=S.defaults(t),this.graphql=(s=this.request,D(s,{method:"POST",url:"/graphql"})).defaults(t),this.log=function(e={}){return"function"!=typeof e.debug&&(e.debug=M),"function"!=typeof e.info&&(e.info=M),"function"!=typeof e.warn&&(e.warn=B),"function"!=typeof e.error&&(e.error=N),e}(e.log),this.hook=r,e.authStrategy){const{authStrategy:t,...s}=e,o=t(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},e.auth));r.wrap("request",o.hook),this.auth=o}else if(e.auth){const t=$(e.auth);r.wrap("request",t.hook),this.auth=t}else this.auth=async()=>({type:"unauthenticated"});const n=this.constructor;for(let r=0;r<n.plugins.length;++r)Object.assign(this,n.plugins[r](this,e))}};function W(e){e.hook.wrap("request",(r,t)=>{e.log.debug("request",t);const s=Date.now(),o=e.request.endpoint.parse(t),n=o.url.replace(t.baseUrl,"");return r(t).then(r=>(e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-s}ms`),r)).catch(r=>{throw e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-s}ms`),r})})}function V(e,r,t){const s="function"==typeof r?r.endpoint(t):e.request.endpoint(r,t),o="function"==typeof r?r:e.request,n=s.method,i=s.headers;let a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const r=e.data.incomplete_results,t=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],n=e.data[o];return e.data=n,void 0!==r&&(e.data.incomplete_results=r),void 0!==t&&(e.data.repository_selection=t),e.data.total_count=s,e}(await o({method:n,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function K(e,r,t,s){return"function"==typeof t&&(s=t,t=void 0),J(e,[],V(e,r,t)[Symbol.asyncIterator](),s)}function J(e,r,t,s){return t.next().then(o=>{if(o.done)return r;let n=!1;return r=r.concat(s?s(o.value,function(){n=!0}):o.value.data),n?r:J(e,r,t,s)})}function Q(e){return{paginate:Object.assign(K.bind(null,e),{iterator:V.bind(null,e)})}}W.VERSION="4.0.1",Object.assign(K,{iterator:V}),Q.VERSION="11.4.4-cjs.2";const Z=new Map;for(const[e,r]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(const[t,s]of Object.entries(r)){const[r,o,n]=s,[i,a]=r.split(/ /),c=Object.assign({method:i,url:a},o);Z.has(e)||Z.set(e,new Map),Z.get(e).set(t,{scope:e,methodName:t,endpointDefaults:c,decorations:n})}const Y={has:({scope:e},r)=>Z.get(e).has(r),getOwnPropertyDescriptor(e,r){return{value:this.get(e,r),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,r,t)=>(Object.defineProperty(e.cache,r,t),!0),deleteProperty:(e,r)=>(delete e.cache[r],!0),ownKeys:({scope:e})=>[...Z.get(e).keys()],set:(e,r,t)=>e.cache[r]=t,get({octokit:e,scope:r,cache:t},s){if(t[s])return t[s];const o=Z.get(r).get(s);if(!o)return;const{endpointDefaults:n,decorations:i}=o;return t[s]=i?function(e,r,t,s,o){const n=e.request.defaults(s);return Object.assign(function(...s){let i=n.endpoint.merge(...s);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[s,n]=o.renamed;e.log.warn(`octokit.${r}.${t}() has been renamed to octokit.${s}.${n}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=n.endpoint.merge(...s);for(const[s,n]of Object.entries(o.renamedParameters))s in i&&(e.log.warn(`"${s}" parameter is deprecated for "octokit.${r}.${t}()". Use "${n}" instead`),n in i||(i[n]=i[s]),delete i[s]);return n(i)}return n(...s)},n)}(e,r,s,n,i):e.request.defaults(n),t[s]}};function X(e){const r=function(e){const r={};for(const t of Z.keys())r[t]=new Proxy({octokit:e,scope:t,cache:{}},Y);return r}(e);return{...r,rest:r}}X.VERSION="13.3.2-cjs.1";var ee=z.plugin(W,X,Q).defaults({userAgent:"octokit-rest.js/20.1.2"})},474:e=>{"use strict";e.exports=require("node:events")},519:(e,r,t)=>{var s=t(587);function o(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function n(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=!1,r}e.exports=s(o),e.exports.strict=s(n),o.proto=o(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return n(this)},configurable:!0})})},573:e=>{"use strict";e.exports=require("node:buffer")},585:e=>{var r=1e3,t=60*r,s=60*t,o=24*s,n=7*o;function i(e,r,t,s){var o=r>=1.5*t;return Math.round(e/t)+" "+s+(o?"s":"")}e.exports=function(e,a){a=a||{};var c,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*n;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*s;case"minutes":case"minute":case"mins":case"min":case"m":return a*t;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(c=e,(u=Math.abs(c))>=o?i(c,u,o,"day"):u>=s?i(c,u,s,"hour"):u>=t?i(c,u,t,"minute"):u>=r?i(c,u,r,"second"):c+" ms"):function(e){var n=Math.abs(e);return n>=o?Math.round(e/o)+"d":n>=s?Math.round(e/s)+"h":n>=t?Math.round(e/t)+"m":n>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},587:e=>{e.exports=function e(r,t){if(r&&t)return e(r)(t);if("function"!=typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach(function(e){s[e]=r[e]}),s;function s(){for(var e=new Array(arguments.length),t=0;t<e.length;t++)e[t]=arguments[t];var s=r.apply(this,e),o=e[e.length-1];return"function"==typeof s&&s!==o&&Object.keys(o).forEach(function(e){s[e]=o[e]}),s}}},640:e=>{e.exports=function(e,r,t,s){var o=s;e.registry[t]||(e.registry[t]=[]),"before"===r&&(s=function(e,r){return Promise.resolve().then(o.bind(null,r)).then(e.bind(null,r))}),"after"===r&&(s=function(e,r){var t;return Promise.resolve().then(e.bind(null,r)).then(function(e){return o(t=e,r)}).then(function(){return t})}),"error"===r&&(s=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch(function(e){return o(e,r)})}),e.registry[t].push({hook:s,orig:o})}},662:(e,r,t)=>{"use strict";var s,o,n,i=Object.create,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=Object.getOwnPropertyNames,l=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty,d=(e,r)=>function(){return e&&(r=(0,e[u(e)[0]])(e=0)),r},g=(e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})},m=(e,r,t,s)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let o of u(r))p.call(e,o)||o===t||a(e,o,{get:()=>r[o],enumerable:!(s=c(r,o))||s.enumerable});return e},h=e=>m(a({},"__esModule",{value:!0}),e),f=d({"src/lib/errors/git-error.ts"(){s=class extends Error{constructor(e,r){super(r),this.task=e,Object.setPrototypeOf(this,new.target.prototype)}}}}),T=d({"src/lib/errors/git-response-error.ts"(){f(),o=class extends s{constructor(e,r){super(void 0,r||String(e)),this.git=e}}}});function b(...e){const r=new String(e);return n.set(r,e),r}function E(e){return e instanceof String&&n.has(e)}function w(e){return n.get(e)||[]}var y,_,k,v,O,P,G,S,A=d({"src/lib/args/pathspec.ts"(){n=new WeakMap}}),C=d({"src/lib/errors/git-construct-error.ts"(){f(),y=class extends s{constructor(e,r){super(void 0,r),this.config=e}}}}),F=d({"src/lib/errors/git-plugin-error.ts"(){f(),_=class extends s{constructor(e,r,t){super(e,t),this.task=e,this.plugin=r,Object.setPrototypeOf(this,new.target.prototype)}}}}),R=d({"src/lib/errors/task-configuration-error.ts"(){f(),k=class extends s{constructor(e){super(void 0,e)}}}});function D(e){return"function"!=typeof e?G:e}function U(e){return"function"==typeof e&&e!==G}function j(e,r){const t=e.indexOf(r);return t<=0?[e,""]:[e.substr(0,t),e.substr(t+1)]}function L(e,r=0){return x(e)&&e.length>r?e[r]:void 0}function I(e,r=0){if(x(e)&&e.length>r)return e[e.length-1-r]}function x(e){return!(!e||"number"!=typeof e.length)}function $(e="",r=!0,t="\n"){return e.split(t).reduce((e,t)=>{const s=r?t.trim():t;return s&&e.push(s),e},[])}function q(e,r){return $(e,!0).map(e=>r(e))}function M(e){return(0,O.exists)(e,O.FOLDER)}function B(e,r){return Array.isArray(e)?e.includes(r)||e.push(r):e.add(r),r}function N(e,r){return Array.isArray(e)&&!e.includes(r)&&e.push(r),e}function H(e,r){if(Array.isArray(e)){const t=e.indexOf(r);t>=0&&e.splice(t,1)}else e.delete(r);return r}function z(e){return Array.isArray(e)?e:[e]}function W(e){return e.replace(/[\s-]+(.)/g,(e,r)=>r.toUpperCase())}function V(e){return z(e).map(String)}function K(e,r=0){if(null==e)return r;const t=parseInt(e,10);return isNaN(t)?r:t}function J(e,r){const t=[];for(let s=0,o=e.length;s<o;s++)t.push(r,e[s]);return t}function Q(e){return(Array.isArray(e)?v.Buffer.concat(e):e).toString("utf-8")}function Z(e,r){return Object.assign({},...r.map(r=>r in e?{[r]:e[r]}:{}))}function Y(e=0){return new Promise(r=>setTimeout(r,e))}function X(e){if(!1!==e)return e}var ee,re,te,se,oe,ne=d({"src/lib/utils/util.ts"(){v=t(573),O=t(926),P="\0",G=()=>{},S=Object.prototype.toString.call.bind(Object.prototype.toString)}});function ie(e,r,t){return r(e)?e:arguments.length>2?t:void 0}function ae(e,r){const t=E(e)?"string":typeof e;return/number|string|boolean/.test(t)&&(!r||!r.includes(t))}function ce(e){return!!e&&"[object Object]"===S(e)}function ue(e){return"function"==typeof e}var le,pe,de,ge,me,he=d({"src/lib/utils/argument-filters.ts"(){ne(),A(),ee=e=>Array.isArray(e),re=e=>"string"==typeof e,te=e=>Array.isArray(e)&&e.every(re),se=e=>re(e)||Array.isArray(e)&&e.every(re),oe=e=>null!=e&&!"number|boolean|function".includes(typeof e)&&(Array.isArray(e)||"string"==typeof e||"number"==typeof e.length)}}),fe=d({"src/lib/utils/exit-codes.ts"(){le=(e=>(e[e.SUCCESS=0]="SUCCESS",e[e.ERROR=1]="ERROR",e[e.NOT_FOUND=-2]="NOT_FOUND",e[e.UNCLEAN=128]="UNCLEAN",e))(le||{})}}),Te=d({"src/lib/utils/git-output-streams.ts"(){pe=class e{constructor(e,r){this.stdOut=e,this.stdErr=r}asStrings(){return new e(this.stdOut.toString("utf8"),this.stdErr.toString("utf8"))}}}}),be=d({"src/lib/utils/line-parser.ts"(){de=class{constructor(e,r){this.matches=[],this.parse=(e,r)=>(this.resetMatches(),!!this._regExp.every((r,t)=>this.addMatch(r,t,e(t)))&&!1!==this.useMatches(r,this.prepareMatches())),this._regExp=Array.isArray(e)?e:[e],r&&(this.useMatches=r)}useMatches(e,r){throw new Error("LineParser:useMatches not implemented")}resetMatches(){this.matches.length=0}prepareMatches(){return this.matches}addMatch(e,r,t){const s=t&&e.exec(t);return s&&this.pushMatch(r,s),!!s}pushMatch(e,r){this.matches.push(...r.slice(1))}},ge=class extends de{addMatch(e,r,t){return/^remote:\s/.test(String(t))&&super.addMatch(e,r,t)}pushMatch(e,r){(e>0||r.length>1)&&super.pushMatch(e,r)}}}});function Ee(...e){const r=process.cwd(),t=Object.assign({baseDir:r,...me},...e.filter(e=>"object"==typeof e&&e));return t.baseDir=t.baseDir||r,t.trimmed=!0===t.trimmed,t}var we=d({"src/lib/utils/simple-git-options.ts"(){me={binary:"git",maxConcurrentProcesses:5,config:[],trimmed:!1}}});function ye(e,r=[]){return ce(e)?Object.keys(e).reduce((r,t)=>{const s=e[t];if(E(s))r.push(s);else if(ae(s,["boolean"]))r.push(t+"="+s);else if(Array.isArray(s))for(const e of s)ae(e,["string","number"])||r.push(t+"="+e);else r.push(t);return r},r):r}function _e(e,r=0,t=!1){const s=[];for(let t=0,o=r<0?e.length:r;t<o;t++)"string|number".includes(typeof e[t])&&s.push(String(e[t]));return ye(ke(e),s),t||s.push(...function(e){const r="function"==typeof I(e);return ie(I(e,r?1:0),ee,[])}(e)),s}function ke(e){const r=ue(I(e));return ie(I(e,r?1:0),ce)}function ve(e,r=!0){const t=D(I(e));return r||U(t)?t:void 0}var Oe=d({"src/lib/utils/task-options.ts"(){he(),ne(),A()}});function Pe(e,r){return e(r.stdOut,r.stdErr)}function Ge(e,r,t,s=!0){return z(t).forEach(t=>{for(let o=$(t,s),n=0,i=o.length;n<i;n++){const t=(e=0)=>{if(!(n+e>=i))return o[n+e]};r.some(({parse:r})=>r(t,e))}}),e}var Se=d({"src/lib/utils/task-parser.ts"(){ne()}}),Ae={};g(Ae,{ExitCodes:()=>le,GitOutputStreams:()=>pe,LineParser:()=>de,NOOP:()=>G,NULL:()=>P,RemoteLineParser:()=>ge,append:()=>B,appendTaskOptions:()=>ye,asArray:()=>z,asCamelCase:()=>W,asFunction:()=>D,asNumber:()=>K,asStringArray:()=>V,bufferToString:()=>Q,callTaskParser:()=>Pe,createInstanceConfig:()=>Ee,delay:()=>Y,filterArray:()=>ee,filterFunction:()=>ue,filterHasLength:()=>oe,filterPlainObject:()=>ce,filterPrimitives:()=>ae,filterString:()=>re,filterStringArray:()=>te,filterStringOrStringArray:()=>se,filterType:()=>ie,first:()=>L,folderExists:()=>M,forEachLineWithContent:()=>q,getTrailingOptions:()=>_e,including:()=>N,isUserFunction:()=>U,last:()=>I,objectToString:()=>S,orVoid:()=>X,parseStringResponse:()=>Ge,pick:()=>Z,prefixedArray:()=>J,remove:()=>H,splitOn:()=>j,toLinesWithContent:()=>$,trailingFunctionArgument:()=>ve,trailingOptionsArgument:()=>ke});var Ce,Fe,Re,De=d({"src/lib/utils/index.ts"(){he(),fe(),Te(),be(),we(),Oe(),Se(),ne()}}),Ue={};function je(e){switch(e){case"bare":return Ie();case"root":return Le()}return{commands:["rev-parse","--is-inside-work-tree"],format:"utf-8",onError:Fe,parser:Re}}function Le(){return{commands:["rev-parse","--git-dir"],format:"utf-8",onError:Fe,parser:e=>/^\.(git)?$/.test(e.trim())}}function Ie(){return{commands:["rev-parse","--is-bare-repository"],format:"utf-8",onError:Fe,parser:Re}}g(Ue,{CheckRepoActions:()=>Ce,checkIsBareRepoTask:()=>Ie,checkIsRepoRootTask:()=>Le,checkIsRepoTask:()=>je});var xe,$e,qe,Me,Be,Ne=d({"src/lib/tasks/check-is-repo.ts"(){De(),Ce=(e=>(e.BARE="bare",e.IN_TREE="tree",e.IS_REPO_ROOT="root",e))(Ce||{}),Fe=({exitCode:e},r,t,s)=>{if(128===e&&function(e){return/(Not a git repository|Kein Git-Repository)/i.test(String(e))}(r))return t(Buffer.from("false"));s(r)},Re=e=>"true"===e.trim()}}),He=d({"src/lib/responses/CleanSummary.ts"(){De(),xe=class{constructor(e){this.dryRun=e,this.paths=[],this.files=[],this.folders=[]}},$e=/^[a-z]+\s*/i,qe=/^[a-z]+\s+[a-z]+\s*/i,Me=/\/$/}}),ze={};function We(e){return{commands:Be,format:"empty",parser:e}}function Ve(e){return{commands:Be,format:"empty",parser(){throw"string"==typeof e?new k(e):e}}}function Ke(e,r=!1){return{commands:e,format:"utf-8",parser:e=>r?String(e).trim():e}}function Je(e){return{commands:e,format:"buffer",parser:e=>e}}function Qe(e){return"buffer"===e.format}function Ze(e){return"empty"===e.format||!e.commands.length}g(ze,{EMPTY_COMMANDS:()=>Be,adhocExecTask:()=>We,configurationErrorTask:()=>Ve,isBufferTask:()=>Qe,isEmptyTask:()=>Ze,straightThroughBufferTask:()=>Je,straightThroughStringTask:()=>Ke});var Ye,Xe,er,rr,tr,sr=d({"src/lib/tasks/task.ts"(){R(),Be=[]}}),or={};function nr(e,r){const{cleanMode:t,options:s,valid:o}=function(e){let r,t=[],s={cleanMode:!1,options:!0};return e.replace(/[^a-z]i/g,"").split("").forEach(e=>{var o;!function(e){return"f"===e||"n"===e}(e)?s.options=s.options&&(o=t[t.length]=`-${e}`,/^-[a-z]$/i.test(o)&&tr.has(o.charAt(1))):(r=e,s.cleanMode=!0)}),{cleanMode:r,options:t,valid:s}}(e);return t?o.options?(s.push(...r),s.some(cr)?Ve(Ye):ir(t,s)):Ve(er+JSON.stringify(e)):Ve(Xe)}function ir(e,r){return{commands:["clean",`-${e}`,...r],format:"utf-8",parser:r=>function(e,r){const t=new xe(e),s=e?qe:$e;return $(r).forEach(e=>{const r=e.replace(s,"");t.paths.push(r),(Me.test(r)?t.folders:t.files).push(r)}),t}("n"===e,r)}}function ar(e){return Array.isArray(e)&&e.every(e=>tr.has(e))}function cr(e){return/^-[^\-]/.test(e)?e.indexOf("i")>0:"--interactive"===e}g(or,{CONFIG_ERROR_INTERACTIVE_MODE:()=>Ye,CONFIG_ERROR_MODE_REQUIRED:()=>Xe,CONFIG_ERROR_UNKNOWN_OPTION:()=>er,CleanOptions:()=>rr,cleanTask:()=>ir,cleanWithOptionsTask:()=>nr,isCleanOptionsArray:()=>ar});var ur,lr=d({"src/lib/tasks/clean.ts"(){He(),De(),sr(),Ye="Git clean interactive mode is not supported",Xe='Git clean mode parameter ("n" or "f") is required',er="Git clean unknown option found in: ",rr=(e=>(e.DRY_RUN="n",e.FORCE="f",e.IGNORED_INCLUDED="x",e.IGNORED_ONLY="X",e.EXCLUDING="e",e.QUIET="q",e.RECURSIVE="d",e))(rr||{}),tr=new Set(["i",...V(Object.values(rr))])}});function pr(e){return e.replace(/^(file):/,"")}function*dr(e,r=null){const t=e.split("\0");for(let e=0,s=t.length-1;e<s;){const s=pr(t[e++]);let o=t[e++],n=r;if(o.includes("\n")){const e=j(o,"\n");n=e[0],o=e[1]}yield{file:s,key:n,value:o}}}var gr,mr=d({"src/lib/responses/ConfigList.ts"(){De(),ur=class{constructor(){this.files=[],this.values=Object.create(null)}get all(){return this._all||(this._all=this.files.reduce((e,r)=>Object.assign(e,this.values[r]),{})),this._all}addFile(e){if(!(e in this.values)){const r=I(this.files);this.values[e]=r?Object.create(this.values[r]):{},this.files.push(e)}return this.values[e]}addValue(e,r,t){const s=this.addFile(e);s.hasOwnProperty(r)?Array.isArray(s[r])?s[r].push(t):s[r]=[s[r],t]:s[r]=t,this._all=void 0}}}});function hr(e,r){return"string"==typeof e&&gr.hasOwnProperty(e)?e:r}var fr,Tr,br,Er,wr,yr,_r=d({"src/lib/tasks/config.ts"(){mr(),De(),gr=(e=>(e.system="system",e.global="global",e.local="local",e.worktree="worktree",e))(gr||{})}}),kr=d({"src/lib/tasks/diff-name-status.ts"(){fr=(e=>(e.ADDED="A",e.COPIED="C",e.DELETED="D",e.MODIFIED="M",e.RENAMED="R",e.CHANGED="T",e.UNMERGED="U",e.UNKNOWN="X",e.BROKEN="B",e))(fr||{}),Tr=new Set(Object.values(fr))}});function vr(...e){return(new yr).param(...e)}var Or,Pr,Gr=d({"src/lib/tasks/grep.ts"(){De(),sr(),br=["-h"],Er=Symbol("grepQuery"),yr=class{constructor(){this[wr]=[]}*[(wr=Er,Symbol.iterator)](){for(const e of this[Er])yield e}and(...e){return e.length&&this[Er].push("--and","(",...J(e,"-e"),")"),this}param(...e){return this[Er].push(...J(e,"-e")),this}}}}),Sr={};function Ar(e,r){const t=["reset"];return Fr(e)&&t.push(`--${e}`),t.push(...r),Ke(t)}function Cr(e){if(Fr(e))return e;switch(typeof e){case"string":case"undefined":return"soft"}}function Fr(e){return Pr.includes(e)}g(Sr,{ResetMode:()=>Or,getResetMode:()=>Cr,resetTask:()=>Ar});var Rr=d({"src/lib/tasks/reset.ts"(){sr(),Or=(e=>(e.MIXED="mixed",e.SOFT="soft",e.HARD="hard",e.MERGE="merge",e.KEEP="keep",e))(Or||{}),Pr=Array.from(Object.values(Or))}}),Dr={};g(Dr,{CheckRepoActions:()=>Ce,CleanOptions:()=>rr,DiffNameStatus:()=>fr,GitConfigScope:()=>gr,GitConstructError:()=>y,GitError:()=>s,GitPluginError:()=>_,GitResponseError:()=>o,ResetMode:()=>Or,TaskConfigurationError:()=>k,grepQueryBuilder:()=>vr,pathspec:()=>b});var Ur=d({"src/lib/api.ts"(){A(),C(),f(),F(),T(),R(),Ne(),lr(),_r(),kr(),Gr(),Rr()}}),jr=d({"src/lib/plugins/abort-plugin.ts"(){F()}});var Lr,Ir,xr=d({"src/lib/plugins/block-unsafe-operations-plugin.ts"(){F()}}),$r=d({"src/lib/plugins/command-config-prefixing-plugin.ts"(){De()}});var qr,Mr,Br=d({"src/lib/plugins/completion-detection.plugin.ts"(){Lr=t(100),De(),Ir=(0,Lr.deferred)().promise}});function Nr(e){return!e||!/^([a-z]:)?([a-z0-9/.\\_-]+)$/i.test(e)}function Hr(e,r){if(e.length<1||e.length>2)throw new _(void 0,"binary",qr);if(e.some(Nr)){if(!r)throw new _(void 0,"binary",Mr);console.warn(Mr)}const[t,s]=e;return{binary:t,prefix:s}}var zr=d({"src/lib/plugins/custom-binary.plugin.ts"(){F(),De(),qr="Invalid value supplied for custom binary, requires a single string or an array containing either one or two strings",Mr="Invalid value supplied for custom binary, restricted characters must be removed or supply the unsafe.allowUnsafeCustomBinary option"}});function Wr(e){return!(!e.exitCode||!e.stdErr.length)}function Vr(e){return Buffer.concat([...e.stdOut,...e.stdErr])}function Kr(e=!1,r=Wr,t=Vr){return(s,o)=>!e&&s||!r(o)?s:t(o)}function Jr(e){return{type:"task.error",action(r,t){const o=e(r.error,{stdErr:t.stdErr,stdOut:t.stdOut,exitCode:t.exitCode});return Buffer.isBuffer(o)?{error:new s(void 0,o.toString("utf-8"))}:{error:o}}}}var Qr,Zr,Yr,Xr=d({"src/lib/plugins/error-detection.plugin.ts"(){f()}}),et=d({"src/lib/plugins/plugin-store.ts"(){Qr=t(474),De(),Zr=class{constructor(){this.plugins=new Set,this.events=new Qr.EventEmitter}on(e,r){this.events.on(e,r)}reconfigure(e,r){this.events.emit(e,r)}append(e,r){const t=B(this.plugins,{type:e,action:r});return()=>this.plugins.delete(t)}add(e){const r=[];return z(e).forEach(e=>e&&this.plugins.add(B(r,e))),()=>{r.forEach(e=>this.plugins.delete(e))}}exec(e,r,t){let s=r;const o=Object.freeze(Object.create(t));for(const r of this.plugins)r.type===e&&(s=r.action(s,o));return s}}}}),rt=d({"src/lib/plugins/progress-monitor-plugin.ts"(){De()}}),tt=d({"src/lib/plugins/simple-git-plugin.ts"(){}}),st=d({"src/lib/plugins/spawn-options-plugin.ts"(){De()}}),ot=d({"src/lib/plugins/timout-plugin.ts"(){F()}}),nt=d({"src/lib/plugins/index.ts"(){jr(),xr(),$r(),Br(),zr(),Xr(),et(),rt(),tt(),st(),ot()}}),it=d({"src/lib/plugins/suffix-paths.plugin.ts"(){A()}});function at(e,r,t){return r&&String(r).replace(/\s*/,"")?(s,...o)=>{e(`%s ${s}`,r,...o),t&&t(s,...o)}:t?(r,...s)=>{e(r,...s),t(r,...s)}:e}function ct(e,r,t,s=function(){return(0,Yr.default)("simple-git")}()){const o=e&&`[${e}]`||"",n=[],i="string"==typeof r?s.extend(r):r,a=function(e,r,{namespace:t}){if("string"==typeof e)return e;const s=r&&r.namespace||"";return s.startsWith(t)?s.substr(t.length+1):s||t}(ie(r,re),i,s);return function r(t){const n=t&&`[${t}]`||"",a=i&&at(i,n)||G,u=at(s,`${o} ${n}`,a);return Object.assign(i?a:u,{label:e,sibling:c,info:u,step:r})}(t);function c(r,t){return B(n,ct(e,a.replace(/^[^:]+/,r),t,s))}}var ut,lt,pt,dt=d({"src/lib/git-logger.ts"(){var e,r;r=null!=(e=t(753))?i(l(e)):{},Yr=m(e&&e.__esModule?r:a(r,"default",{value:e,enumerable:!0}),e),De(),Yr.default.formatters.L=e=>String(oe(e)?e.length:"-"),Yr.default.formatters.B=e=>Buffer.isBuffer(e)?e.toString("utf8"):S(e)}}),gt=d({"src/lib/runners/tasks-pending-queue.ts"(){f(),dt(),ut=class e{constructor(e="GitExecutor"){this.logLabel=e,this._queue=new Map}withProgress(e){return this._queue.get(e)}createProgress(r){const t=e.getName(r.commands[0]);return{task:r,logger:ct(this.logLabel,t),name:t}}push(e){const r=this.createProgress(e);return r.logger("Adding task to the queue, commands = %o",e.commands),this._queue.set(e,r),r}fatal(e){for(const[r,{logger:t}]of Array.from(this._queue.entries()))r===e.task?(t.info("Failed %o",e),t("Fatal exception, any as-yet un-started tasks run through this executor will not be attempted")):t.info("A fatal exception occurred in a previous task, the queue has been purged: %o",e.message),this.complete(r);if(0!==this._queue.size)throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`)}complete(e){this.withProgress(e)&&this._queue.delete(e)}attempt(e){const r=this.withProgress(e);if(!r)throw new s(void 0,"TasksPendingQueue: attempt called for an unknown task");return r.logger("Starting task"),r}static getName(r="empty"){return`task:${r}:${++e.counter}`}static{this.counter=0}}}});function mt(e,r){return{method:L(e.commands)||"",commands:r}}function ht(e,r,t,s){return o=>{t("%s received %L bytes",r,o),s("%B",o),e.push(o)}}var ft,Tt=d({"src/lib/runners/git-executor-chain.ts"(){lt=t(317),f(),sr(),De(),gt(),pt=class{constructor(e,r,t){this._executor=e,this._scheduler=r,this._plugins=t,this._chain=Promise.resolve(),this._queue=new ut}get cwd(){return this._cwd||this._executor.cwd}set cwd(e){this._cwd=e}get env(){return this._executor.env}get outputHandler(){return this._executor.outputHandler}chain(){return this}push(e){return this._queue.push(e),this._chain=this._chain.then(()=>this.attemptTask(e))}async attemptTask(e){const r=await this._scheduler.next(),t=()=>this._queue.complete(e);try{const{logger:r}=this._queue.attempt(e);return await(Ze(e)?this.attemptEmptyTask(e,r):this.attemptRemoteTask(e,r))}catch(r){throw this.onFatalException(e,r)}finally{t(),r()}}onFatalException(e,r){const t=r instanceof s?Object.assign(r,{task:e}):new s(e,r&&String(r));return this._chain=Promise.resolve(),this._queue.fatal(t),t}async attemptRemoteTask(e,r){const t=this._plugins.exec("spawn.binary","",mt(e,e.commands)),s=this._plugins.exec("spawn.args",[...e.commands],mt(e,e.commands)),o=await this.gitResponse(e,t,s,this.outputHandler,r.step("SPAWN")),n=await this.handleTaskData(e,s,o,r.step("HANDLE"));return r("passing response to task's parser as a %s",e.format),Qe(e)?Pe(e.parser,n):Pe(e.parser,n.asStrings())}async attemptEmptyTask(e,r){return r("empty task bypassing child process to call to task's parser"),e.parser(this)}handleTaskData(e,r,t,s){const{exitCode:o,rejection:n,stdOut:i,stdErr:a}=t;return new Promise((c,u)=>{s("Preparing to handle process response exitCode=%d stdOut=",o);const{error:l}=this._plugins.exec("task.error",{error:n},{...mt(e,r),...t});return l&&e.onError?(s.info("exitCode=%s handling with custom error handler"),e.onError(t,l,e=>{s.info("custom error handler treated as success"),s("custom error returned a %s",S(e)),c(new pe(Array.isArray(e)?Buffer.concat(e):e,Buffer.concat(a)))},u)):l?(s.info("handling as error: exitCode=%s stdErr=%s rejection=%o",o,a.length,n),u(l)):(s.info("retrieving task output complete"),void c(new pe(Buffer.concat(i),Buffer.concat(a))))})}async gitResponse(e,r,t,s,o){const n=o.sibling("output"),i=this._plugins.exec("spawn.options",{cwd:this.cwd,env:this.env,windowsHide:!0},mt(e,e.commands));return new Promise(a=>{const c=[],u=[];o.info("%s %o",r,t),o("%O",i);let l=this._beforeSpawn(e,t);if(l)return a({stdOut:c,stdErr:u,exitCode:9901,rejection:l});this._plugins.exec("spawn.before",void 0,{...mt(e,t),kill(e){l=e||l}});const p=(0,lt.spawn)(r,t,i);p.stdout.on("data",ht(c,"stdOut",o,n.step("stdOut"))),p.stderr.on("data",ht(u,"stdErr",o,n.step("stdErr"))),p.on("error",function(e,r){return t=>{r("[ERROR] child process exception %o",t),e.push(Buffer.from(String(t.stack),"ascii"))}}(u,o)),s&&(o("Passing child process stdOut/stdErr to custom outputHandler"),s(r,p.stdout,p.stderr,[...t])),this._plugins.exec("spawn.after",void 0,{...mt(e,t),spawned:p,close(e,r){a({stdOut:c,stdErr:u,exitCode:e,rejection:l||r})},kill(e){p.killed||(l=e,p.kill("SIGINT"))}})})}_beforeSpawn(e,r){let t;return this._plugins.exec("spawn.before",void 0,{...mt(e,r),kill(e){t=e||t}}),t}}}}),bt={};g(bt,{GitExecutor:()=>ft});var Et=d({"src/lib/runners/git-executor.ts"(){Tt(),ft=class{constructor(e,r,t){this.cwd=e,this._scheduler=r,this._plugins=t,this._chain=new pt(this,this._scheduler,this._plugins)}chain(){return new pt(this,this._scheduler,this._plugins)}push(e){return this._chain.push(e)}}}});var wt=d({"src/lib/task-callback.ts"(){T(),De()}});function yt(e,r){return We(t=>{if(!M(e))throw new Error(`Git.cwd: cannot change to non-directory "${e}"`);return(r||t).cwd=e})}var _t=d({"src/lib/tasks/change-working-directory.ts"(){De(),sr()}});function kt(e){const r=["checkout",...e];return"-b"===r[1]&&r.includes("-B")&&(r[1]=H(r,"-B")),Ke(r)}var vt,Ot,Pt=d({"src/lib/tasks/checkout.ts"(){De(),sr()}}),Gt=d({"src/lib/tasks/count-objects.ts"(){De(),vt=new de(/([a-z-]+): (\d+)$/,(e,[r,t])=>{const s=W(r);e.hasOwnProperty(s)&&(e[s]=K(t))})}});function St(e){return Ge({author:null,branch:"",commit:"",root:!1,summary:{changes:0,insertions:0,deletions:0}},Ot,e)}var At=d({"src/lib/parsers/parse-commit.ts"(){De(),Ot=[new de(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/,(e,[r,t,s])=>{e.branch=r,e.commit=s,e.root=!!t}),new de(/\s*Author:\s(.+)/i,(e,[r])=>{const t=r.split("<"),s=t.pop();s&&s.includes("@")&&(e.author={email:s.substr(0,s.length-1),name:t.join("<").trim()})}),new de(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g,(e,[r,t,s])=>{e.summary.changes=parseInt(r,10)||0,e.summary.insertions=parseInt(t,10)||0,e.summary.deletions=parseInt(s,10)||0}),new de(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/,(e,[r,t,s])=>{e.summary.changes=parseInt(r,10)||0;const o=parseInt(t,10)||0;"-"===s?e.summary.deletions=o:"+"===s&&(e.summary.insertions=o)})]}});var Ct,Ft,Rt,Dt,Ut=d({"src/lib/tasks/commit.ts"(){At(),De(),sr()}}),jt=d({"src/lib/tasks/first-commit.ts"(){De(),sr()}}),Lt=d({"src/lib/tasks/hash-object.ts"(){sr()}}),It=d({"src/lib/responses/InitSummary.ts"(){Ct=class{constructor(e,r,t,s){this.bare=e,this.path=r,this.existing=t,this.gitDir=s}},Ft=/^Init.+ repository in (.+)$/,Rt=/^Rein.+ in (.+)$/}});var xt,$t=d({"src/lib/tasks/init.ts"(){It(),Dt="--bare"}});function qt(e){for(let r=0;r<e.length;r++){const t=xt.exec(e[r]);if(t)return`--${t[1]}`}return""}function Mt(e){return xt.test(e)}var Bt,Nt,Ht,zt,Wt,Vt,Kt=d({"src/lib/args/log-format.ts"(){xt=/^--(stat|numstat|name-only|name-status)(=|$)/}}),Jt=d({"src/lib/responses/DiffSummary.ts"(){Bt=class{constructor(){this.changed=0,this.deletions=0,this.insertions=0,this.files=[]}}}});function Qt(e=""){const r=Vt[e];return e=>Ge(new Bt,r,e,!1)}var Zt,Yt,Xt,es,rs=d({"src/lib/parsers/parse-diff-summary.ts"(){Kt(),Jt(),kr(),De(),Nt=[new de(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/,(e,[r,t,s=""])=>{e.files.push({file:r.trim(),changes:K(t),insertions:s.replace(/[^+]/g,"").length,deletions:s.replace(/[^-]/g,"").length,binary:!1})}),new de(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)/,(e,[r,t,s])=>{e.files.push({file:r.trim(),before:K(t),after:K(s),binary:!0})}),new de(/(\d+) files? changed\s*((?:, \d+ [^,]+){0,2})/,(e,[r,t])=>{const s=/(\d+) i/.exec(t),o=/(\d+) d/.exec(t);e.changed=K(r),e.insertions=K(s?.[1]),e.deletions=K(o?.[1])})],Ht=[new de(/(\d+)\t(\d+)\t(.+)$/,(e,[r,t,s])=>{const o=K(r),n=K(t);e.changed++,e.insertions+=o,e.deletions+=n,e.files.push({file:s,changes:o+n,insertions:o,deletions:n,binary:!1})}),new de(/-\t-\t(.+)$/,(e,[r])=>{e.changed++,e.files.push({file:r,after:0,before:0,binary:!0})})],zt=[new de(/(.+)$/,(e,[r])=>{e.changed++,e.files.push({file:r,changes:0,insertions:0,deletions:0,binary:!1})})],Wt=[new de(/([ACDMRTUXB])([0-9]{0,3})\t(.[^\t]*)(\t(.[^\t]*))?$/,(e,[r,t,s,o,n])=>{var i;e.changed++,e.files.push({file:n??s,changes:0,insertions:0,deletions:0,binary:!1,status:X((i=r,Tr.has(i)&&r)),from:X(!!n&&s!==n&&s),similarity:K(t)})})],Vt={"":Nt,"--stat":Nt,"--numstat":Ht,"--name-status":Wt,"--name-only":zt}}});function ts(e=Xt,r=es,t=""){const s=Qt(t);return function(t){const o=$(t.trim(),!1,Zt).map(function(t){const o=t.split(Yt),n=function(e,r){return r.reduce((r,t,s)=>(r[t]=e[s]||"",r),Object.create({diff:null}))}(o[0].split(e),r);return o.length>1&&o[1].trim()&&(n.diff=s(o[1])),n});return{all:o,latest:o.length&&o[0]||null,total:o.length}}}var ss=d({"src/lib/parsers/parse-list-log-summary.ts"(){De(),rs(),Kt(),Zt="òòòòòò ",Yt=" òò",Xt=" ò ",es=["hash","date","message","refs","author_name","author_email"]}}),os={};function ns(e){let r=qt(e);const t=["diff"];return""===r&&(r="--stat",t.push("--stat=4096")),t.push(...e),is(t)||{commands:t,format:"utf-8",parser:Qt(r)}}function is(e){const r=e.filter(Mt);return r.length>1?Ve(`Summary flags are mutually exclusive - pick one of ${r.join(",")}`):r.length&&e.includes("-z")?Ve(`Summary flag ${r} parsing is not compatible with null termination option '-z'`):void 0}g(os,{diffSummaryTask:()=>ns,validateLogFormatConfig:()=>is});var as,cs=d({"src/lib/tasks/diff.ts"(){Kt(),rs(),sr()}});function us(e={},r=[]){const t=ie(e.splitter,re,Xt),s=ce(e.format)?e.format:{hash:"%H",date:!1===e.strictDate?"%ai":"%aI",message:"%s",refs:"%D",body:e.multiLine?"%B":"%b",author_name:!1!==e.mailMap?"%aN":"%an",author_email:!1!==e.mailMap?"%aE":"%ae"},[o,n]=function(e,r){const t=[],s=[];return Object.keys(e).forEach(r=>{t.push(r),s.push(String(e[r]))}),[t,s.join(r)]}(s,t),i=[],a=[`--pretty=format:${Zt}${n}${Yt}`,...r],c=e.n||e["max-count"]||e.maxCount;if(c&&a.push(`--max-count=${c}`),e.from||e.to){const r=!1!==e.symmetric?"...":"..";i.push(`${e.from||""}${r}${e.to||""}`)}var u;return re(e.file)&&a.push("--follow",b(e.file)),ye((u=e,Object.keys(u).reduce((e,r)=>(r in as||(e[r]=u[r]),e),{})),a),{fields:o,splitter:t,commands:[...a,...i]}}var ls,ps,ds,gs,ms,hs=d({"src/lib/tasks/log.ts"(){Kt(),A(),ss(),De(),sr(),cs(),as=(e=>(e[e["--pretty"]=0]="--pretty",e[e["max-count"]=1]="max-count",e[e.maxCount=2]="maxCount",e[e.n=3]="n",e[e.file=4]="file",e[e.format=5]="format",e[e.from=6]="from",e[e.to=7]="to",e[e.splitter=8]="splitter",e[e.symmetric=9]="symmetric",e[e.mailMap=10]="mailMap",e[e.multiLine=11]="multiLine",e[e.strictDate=12]="strictDate",e))(as||{})}}),fs=d({"src/lib/responses/MergeSummary.ts"(){ls=class{constructor(e,r=null,t){this.reason=e,this.file=r,this.meta=t}toString(){return`${this.file}:${this.reason}`}},ps=class{constructor(){this.conflicts=[],this.merges=[],this.result="success"}get failed(){return this.conflicts.length>0}get reason(){return this.result}toString(){return this.conflicts.length?`CONFLICTS: ${this.conflicts.join(", ")}`:"OK"}}}}),Ts=d({"src/lib/responses/PullSummary.ts"(){ds=class{constructor(){this.remoteMessages={all:[]},this.created=[],this.deleted=[],this.files=[],this.deletions={},this.insertions={},this.summary={changes:0,deletions:0,insertions:0}}},gs=class{constructor(){this.remote="",this.hash={local:"",remote:""},this.branch={local:"",remote:""},this.message=""}toString(){return this.message}}}});function bs(e){return e.objects=e.objects||{compressing:0,counting:0,enumerating:0,packReused:0,reused:{count:0,delta:0},total:{count:0,delta:0}}}function Es(e){const r=/^\s*(\d+)/.exec(e),t=/delta (\d+)/i.exec(e);return{count:K(r&&r[1]||"0"),delta:K(t&&t[1]||"0")}}var ws,ys,_s=d({"src/lib/parsers/parse-remote-objects.ts"(){De(),ms=[new ge(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i,(e,[r,t])=>{const s=r.toLowerCase(),o=bs(e.remoteMessages);Object.assign(o,{[s]:K(t)})}),new ge(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i,(e,[r,t])=>{const s=r.toLowerCase(),o=bs(e.remoteMessages);Object.assign(o,{[s]:K(t)})}),new ge(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i,(e,[r,t,s])=>{const o=bs(e.remoteMessages);o.total=Es(r),o.reused=Es(t),o.packReused=K(s)})]}});function ks(e,r){return Ge({remoteMessages:new ys},ws,r)}var vs,Os,Ps,Gs,Ss,As,Cs,Fs,Rs,Ds=d({"src/lib/parsers/parse-remote-messages.ts"(){De(),_s(),ws=[new ge(/^remote:\s*(.+)$/,(e,[r])=>(e.remoteMessages.all.push(r.trim()),!1)),...ms,new ge([/create a (?:pull|merge) request/i,/\s(https?:\/\/\S+)$/],(e,[r])=>{e.remoteMessages.pullRequestUrl=r}),new ge([/found (\d+) vulnerabilities.+\(([^)]+)\)/i,/\s(https?:\/\/\S+)$/],(e,[r,t,s])=>{e.remoteMessages.vulnerabilities={count:K(r),summary:t,url:s}})],ys=class{constructor(){this.all=[]}}}}),Us=d({"src/lib/parsers/parse-pull.ts"(){Ts(),De(),Ds(),vs=/(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/,Os=/^(create|delete) mode \d+ (.+)/,Ps=[new de(/^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/,(e,[r,t,s])=>{e.files.push(r),t&&(e.insertions[r]=t.length),s&&(e.deletions[r]=s.length)}),new de(vs,(e,[r,,t,,s])=>(void 0!==t||void 0!==s)&&(e.summary.changes=+r||0,e.summary.insertions=+t||0,e.summary.deletions=+s||0,!0)),new de(Os,(e,[r,t])=>{B(e.files,t),B("create"===r?e.created:e.deleted,t)})],Gs=[new de(/^from\s(.+)$/i,(e,[r])=>{e.remote=r}),new de(/^fatal:\s(.+)$/,(e,[r])=>{e.message=r}),new de(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/,(e,[r,t,s,o])=>{e.branch.local=s,e.hash.local=r,e.branch.remote=o,e.hash.remote=t})],Ss=(e,r)=>Ge(new ds,Ps,[e,r]),As=(e,r)=>Object.assign(new ds,Ss(e,r),ks(0,r))}}),js=d({"src/lib/parsers/parse-merge.ts"(){fs(),De(),Us(),Cs=[new de(/^Auto-merging\s+(.+)$/,(e,[r])=>{e.merges.push(r)}),new de(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/,(e,[r,t])=>{e.conflicts.push(new ls(r,t))}),new de(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/,(e,[r,t,s])=>{e.conflicts.push(new ls(r,t,{deleteRef:s}))}),new de(/^CONFLICT\s+\((.+)\):/,(e,[r])=>{e.conflicts.push(new ls(r,null))}),new de(/^Automatic merge failed;\s+(.+)$/,(e,[r])=>{e.result=r})],Fs=(e,r)=>Object.assign(Rs(e,r),As(e,r)),Rs=e=>Ge(new ps,Cs,e)}});function Ls(e){return e.length?{commands:["merge",...e],format:"utf-8",parser(e,r){const t=Fs(e,r);if(t.failed)throw new o(t);return t}}:Ve("Git.merge requires at least one option")}var Is,xs,$s,qs=d({"src/lib/tasks/merge.ts"(){T(),js(),sr()}}),Ms=d({"src/lib/parsers/parse-push.ts"(){De(),Ds(),Is=[new de(/^Pushing to (.+)$/,(e,[r])=>{e.repo=r}),new de(/^updating local tracking ref '(.+)'/,(e,[r])=>{e.ref={...e.ref||{},local:r}}),new de(/^[=*-]\s+([^:]+):(\S+)\s+\[(.+)]$/,(e,[r,t,s])=>{e.pushed.push(function(e,r,t){const s=t.includes("deleted"),o=t.includes("tag")||/^refs\/tags/.test(e),n=!t.includes("new");return{deleted:s,tag:o,branch:!o,new:!n,alreadyUpdated:n,local:e,remote:r}}(r,t,s))}),new de(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/,(e,[r,t,s])=>{e.branch={...e.branch||{},local:r,remote:t,remoteName:s}}),new de(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/,(e,[r,t,s,o])=>{e.update={head:{local:r,remote:t},hash:{from:s,to:o}}})],xs=(e,r)=>({...$s(e,r),...ks(0,r)}),$s=(e,r)=>Ge({pushed:[]},Is,[e,r])}}),Bs={};function Ns(e={},r){return B(r,"--tags"),Hs(e,r)}function Hs(e={},r){const t=["push",...r];return e.branch&&t.splice(1,0,e.branch),e.remote&&t.splice(1,0,e.remote),H(t,"-v"),B(t,"--verbose"),B(t,"--porcelain"),{commands:t,format:"utf-8",parser:xs}}g(Bs,{pushTagsTask:()=>Ns,pushTask:()=>Hs});var zs,Ws,Vs,Ks,Js,Qs=d({"src/lib/tasks/push.ts"(){Ms(),De()}}),Zs=d({"src/lib/tasks/show.ts"(){De(),sr()}}),Ys=d({"src/lib/responses/FileStatusSummary.ts"(){zs=/^(.+)\0(.+)$/,Ws=class{constructor(e,r,t){if(this.path=e,this.index=r,this.working_dir=t,"R"===r||"R"===t){const r=zs.exec(e)||[null,e,e];this.from=r[2]||"",this.path=r[1]||""}}}}});function Xs(e){const[r,t]=e.split(P);return{from:t||r,to:r}}function eo(e,r,t){return[`${e}${r}`,t]}function ro(e,...r){return r.map(r=>eo(e,r,(e,r)=>B(e.conflicted,r)))}function to(e,r){const t=r.trim();switch(" "){case t.charAt(2):return s(t.charAt(0),t.charAt(1),t.substr(3));case t.charAt(1):return s(" ",t.charAt(0),t.substr(2));default:return}function s(r,t,s){const o=`${r}${t}`,n=Ks.get(o);n&&n(e,s),"##"!==o&&"!!"!==o&&e.files.push(new Ws(s,r,t))}}var so,oo,no,io=d({"src/lib/responses/StatusSummary.ts"(){De(),Ys(),Vs=class{constructor(){this.not_added=[],this.conflicted=[],this.created=[],this.deleted=[],this.ignored=void 0,this.modified=[],this.renamed=[],this.files=[],this.staged=[],this.ahead=0,this.behind=0,this.current=null,this.tracking=null,this.detached=!1,this.isClean=()=>!this.files.length}},Ks=new Map([eo(" ","A",(e,r)=>B(e.created,r)),eo(" ","D",(e,r)=>B(e.deleted,r)),eo(" ","M",(e,r)=>B(e.modified,r)),eo("A"," ",(e,r)=>B(e.created,r)&&B(e.staged,r)),eo("A","M",(e,r)=>B(e.created,r)&&B(e.staged,r)&&B(e.modified,r)),eo("D"," ",(e,r)=>B(e.deleted,r)&&B(e.staged,r)),eo("M"," ",(e,r)=>B(e.modified,r)&&B(e.staged,r)),eo("M","M",(e,r)=>B(e.modified,r)&&B(e.staged,r)),eo("R"," ",(e,r)=>{B(e.renamed,Xs(r))}),eo("R","M",(e,r)=>{const t=Xs(r);B(e.renamed,t),B(e.modified,t.to)}),eo("!","!",(e,r)=>{B(e.ignored=e.ignored||[],r)}),eo("?","?",(e,r)=>B(e.not_added,r)),...ro("A","A","U"),...ro("D","D","U"),...ro("U","A","D","U"),["##",(e,r)=>{let t;t=/ahead (\d+)/.exec(r),e.ahead=t&&+t[1]||0,t=/behind (\d+)/.exec(r),e.behind=t&&+t[1]||0,t=/^(.+?(?=(?:\.{3}|\s|$)))/.exec(r),e.current=t&&t[1],t=/\.{3}(\S*)/.exec(r),e.tracking=t&&t[1],t=/\son\s([\S]+)$/.exec(r),e.current=t&&t[1]||e.current,e.detached=/\(no branch\)/.test(r)}]]),Js=function(e){const r=e.split(P),t=new Vs;for(let e=0,s=r.length;e<s;){let s=r[e++].trim();s&&("R"===s.charAt(0)&&(s+=P+(r[e++]||"")),to(t,s))}return t}}}),ao=d({"src/lib/tasks/status.ts"(){io(),so=["--null","-z"]}});function co(e=0,r=0,t=0,s="",o=!0){return Object.defineProperty({major:e,minor:r,patch:t,agent:s,installed:o},"toString",{value(){return`${this.major}.${this.minor}.${this.patch}`},configurable:!1,enumerable:!1})}function uo(e){return e===oo?co(0,0,0,"",!1):Ge(co(0,0,0,e),no,e)}var lo,po=d({"src/lib/tasks/version.ts"(){De(),oo="installed=false",no=[new de(/version (\d+)\.(\d+)\.(\d+)(?:\s*\((.+)\))?/,(e,[r,t,s,o=""])=>{Object.assign(e,co(K(r),K(t),K(s),o))}),new de(/version (\d+)\.(\d+)\.(\D+)(.+)?$/,(e,[r,t,s,o=""])=>{Object.assign(e,co(K(r),K(t),s,o))})]}}),go={};g(go,{SimpleGitApi:()=>lo});var mo,ho,fo,To=d({"src/lib/simple-git-api.ts"(){wt(),_t(),Pt(),Gt(),Ut(),_r(),jt(),Gr(),Lt(),$t(),hs(),qs(),Qs(),Zs(),ao(),sr(),po(),De(),lo=class{constructor(e){this._executor=e}_runTask(e,r){const t=this._executor.chain(),s=t.push(e);return r&&function(e,r,t=G){r.then(e=>{t(null,e)},r=>{r?.task===e&&t(r instanceof o?function(e){let r=e=>{console.warn(`simple-git deprecation notice: accessing GitResponseError.${e} should be GitResponseError.git.${e}, this will no longer be available in version 3`),r=G};return Object.create(e,Object.getOwnPropertyNames(e.git).reduce(function(t,s){return s in e||(t[s]={enumerable:!1,configurable:!1,get:()=>(r(s),e.git[s])}),t},{}))}(r):r,void 0)})}(e,s,r),Object.create(this,{then:{value:s.then.bind(s)},catch:{value:s.catch.bind(s)},_executor:{value:t}})}add(e){return this._runTask(Ke(["add",...z(e)]),ve(arguments))}cwd(e){const r=ve(arguments);return"string"==typeof e?this._runTask(yt(e,this._executor),r):"string"==typeof e?.path?this._runTask(yt(e.path,e.root&&this._executor||void 0),r):this._runTask(Ve("Git.cwd: workingDirectory must be supplied as a string"),r)}hashObject(e,r){return this._runTask(function(e,r){const t=["hash-object",e];return r&&t.push("-w"),Ke(t,!0)}(e,!0===r),ve(arguments))}init(e){return this._runTask(function(e=!1,r,t){const s=["init",...t];return e&&!s.includes(Dt)&&s.splice(1,0,Dt),{commands:s,format:"utf-8",parser:e=>function(e,r,t){const s=String(t).trim();let o;if(o=Ft.exec(s))return new Ct(e,r,!1,o[1]);if(o=Rt.exec(s))return new Ct(e,r,!0,o[1]);let n="";const i=s.split(" ");for(;i.length;)if("in"===i.shift()){n=i.join(" ");break}return new Ct(e,r,/^re/i.test(s),n)}(s.includes("--bare"),r,e)}}(!0===e,this._executor.cwd,_e(arguments)),ve(arguments))}merge(){return this._runTask(Ls(_e(arguments)),ve(arguments))}mergeFromTo(e,r){return re(e)&&re(r)?this._runTask(Ls([e,r,..._e(arguments)]),ve(arguments,!1)):this._runTask(Ve("Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings"))}outputHandler(e){return this._executor.outputHandler=e,this}push(){const e=Hs({remote:ie(arguments[0],re),branch:ie(arguments[1],re)},_e(arguments));return this._runTask(e,ve(arguments))}stash(){return this._runTask(Ke(["stash",..._e(arguments)]),ve(arguments))}status(){return this._runTask({format:"utf-8",commands:["status","--porcelain","-b","-u","--null",..._e(arguments).filter(e=>!so.includes(e))],parser:e=>Js(e)},ve(arguments))}},Object.assign(lo.prototype,{checkout(){return this._runTask(kt(_e(arguments,1)),ve(arguments))},checkoutBranch(e,r){return this._runTask(kt(["-b",e,r,..._e(arguments)]),ve(arguments))},checkoutLocalBranch(e){return this._runTask(kt(["-b",e,..._e(arguments)]),ve(arguments))}},{commit(e,...r){const t=ve(arguments),s=function(e){return!se(e)&&Ve("git.commit: requires the commit message to be supplied as a string/string[]")}(e)||function(e,r,t){return{commands:["-c","core.abbrev=40","commit",...J(e,"-m"),...r,...t],format:"utf-8",parser:St}}(z(e),z(ie(r[0],se,[])),[...ie(r[1],ee,[]),..._e(arguments,0,!0)]);return this._runTask(s,t)}},{addConfig(e,r,...t){return this._runTask(function(e,r,t,s){const o=["config",`--${s}`];return t&&o.push("--add"),o.push(e,r),{commands:o,format:"utf-8",parser:e=>e}}(e,r,!0===t[0],hr(t[1],"local")),ve(arguments))},getConfig(e,r){return this._runTask(function(e,r){const t=["config","--null","--show-origin","--get-all",e];return r&&t.splice(1,0,`--${r}`),{commands:t,format:"utf-8",parser:r=>function(e,r){let t=null;const s=[],o=new Map;for(const n of dr(e,r))n.key===r&&(s.push(t=n.value),o.has(n.file)||o.set(n.file,[]),o.get(n.file).push(t));return{key:r,paths:Array.from(o.keys()),scopes:o,value:t,values:s}}(r,e)}}(e,hr(r,void 0)),ve(arguments))},listConfig(...e){return this._runTask(function(e){const r=["config","--list","--show-origin","--null"];return e&&r.push(`--${e}`),{commands:r,format:"utf-8",parser:e=>function(e){const r=new ur;for(const t of dr(e))r.addValue(t.file,String(t.key),t.value);return r}(e)}}(hr(e[0],void 0)),ve(arguments))}},{countObjects(){return this._runTask({commands:["count-objects","--verbose"],format:"utf-8",parser:e=>Ge({count:0,garbage:0,inPack:0,packs:0,prunePackable:0,size:0,sizeGarbage:0,sizePack:0},[vt],e)})}},{firstCommit(){return this._runTask(Ke(["rev-list","--max-parents=0","HEAD"],!0),ve(arguments))}},{grep(e){const r=ve(arguments),t=_e(arguments);for(const e of br)if(t.includes(e))return this._runTask(Ve(`git.grep: use of "${e}" is not supported.`),r);"string"==typeof e&&(e=vr().param(e));const s=["grep","--null","-n","--full-name",...t,...e];return this._runTask({commands:s,format:"utf-8",parser:e=>function(e){const r=new Set,t={};return q(e,e=>{const[s,o,n]=e.split(P);r.add(s),(t[s]=t[s]||[]).push({line:K(o),path:s,preview:n})}),{paths:r,results:t}}(e)},r)}},{log(...e){const r=ve(arguments),t=us(ke(arguments),ie(arguments[0],ee)),s=function(e,r){return re(e)&&re(r)&&Ve("git.log(string, string) should be replaced with git.log({ from: string, to: string })")}(...e)||is(t.commands)||function(e){return function(e,r,t){const s=ts(e,r,qt(t));return{commands:["log",...t],format:"utf-8",parser:s}}(e.splitter,e.fields,e.commands)}(t);return this._runTask(s,r)}},{showBuffer(){const e=["show",..._e(arguments,1)];return e.includes("--binary")||e.splice(1,0,"--binary"),this._runTask(Je(e),ve(arguments))},show(){const e=["show",..._e(arguments,1)];return this._runTask(Ke(e),ve(arguments))}},{version(){return this._runTask({commands:["--version"],format:"utf-8",parser:uo,onError(e,r,t,s){if(-2===e.exitCode)return t(Buffer.from(oo));s(r)}})}})}}),bo={};g(bo,{Scheduler:()=>fo});var Eo=d({"src/lib/runners/scheduler.ts"(){De(),mo=t(100),dt(),ho=(()=>{let e=0;return()=>{e++;const{promise:r,done:t}=(0,mo.createDeferred)();return{promise:r,done:t,id:e}}})(),fo=class{constructor(e=2){this.concurrency=e,this.logger=ct("","scheduler"),this.pending=[],this.running=[],this.logger("Constructed, concurrency=%s",e)}schedule(){if(!this.pending.length||this.running.length>=this.concurrency)return void this.logger("Schedule attempt ignored, pending=%s running=%s concurrency=%s",this.pending.length,this.running.length,this.concurrency);const e=B(this.running,this.pending.shift());this.logger("Attempting id=%s",e.id),e.done(()=>{this.logger("Completing id=",e.id),H(this.running,e),this.schedule()})}next(){const{promise:e,id:r}=B(this.pending,ho());return this.logger("Scheduling id=%s",r),this.schedule(),e}}}}),wo={};function yo(e,r){return Ke(["apply",...r,...e])}g(wo,{applyPatchTask:()=>yo});var _o,ko,vo,Oo,Po=d({"src/lib/tasks/apply-patch.ts"(){sr()}}),Go=d({"src/lib/responses/BranchDeleteSummary.ts"(){_o=class{constructor(){this.all=[],this.branches={},this.errors=[]}get success(){return!this.errors.length}}}});function So(e,r){return 1===r&&ko.test(e)}var Ao,Co,Fo=d({"src/lib/parsers/parse-branch-delete.ts"(){Go(),De(),ko=/^error[^']+'([^']+)'/m,vo=[new de(/(\S+)\s+\(\S+\s([^)]+)\)/,(e,[r,t])=>{const s=function(e,r){return{branch:e,hash:r,success:!0}}(r,t);e.all.push(s),e.branches[r]=s}),new de(ko,(e,[r])=>{const t=function(e){return{branch:e,hash:null,success:!1}}(r);e.errors.push(t),e.all.push(t),e.branches[r]=t})],Oo=(e,r)=>Ge(new _o,vo,[e,r])}}),Ro=d({"src/lib/responses/BranchSummary.ts"(){Ao=class{constructor(){this.all=[],this.branches={},this.current="",this.detached=!1}push(e,r,t,s,o){"*"===e&&(this.detached=r,this.current=t),this.all.push(t),this.branches[t]={current:"*"===e,linkedWorkTree:"+"===e,name:t,commit:s,label:o}}}}});function Do(e){return e?e.charAt(0):""}function Uo(e){return Ge(new Ao,Co,e)}var jo=d({"src/lib/parsers/parse-branch.ts"(){Ro(),De(),Co=[new de(/^([*+]\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/,(e,[r,t,s,o])=>{e.push(Do(r),!0,t,s,o)}),new de(/^([*+]\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s,(e,[r,t,s,o])=>{e.push(Do(r),!1,t,s,o)})]}}),Lo={};function Io(e){const r=["-d","-D","--delete"];return e.some(e=>r.includes(e))}function xo(e){const r=Io(e),t=["branch",...e];return 1===t.length&&t.push("-a"),t.includes("-v")||t.splice(1,0,"-v"),{format:"utf-8",commands:t,parser:(e,t)=>r?Oo(e,t).all[0]:Uo(e)}}function $o(){return{format:"utf-8",commands:["branch","-v"],parser:Uo}}function qo(e,r=!1){return{format:"utf-8",commands:["branch","-v",r?"-D":"-d",...e],parser:(e,r)=>Oo(e,r),onError({exitCode:e,stdOut:r},t,s,o){if(!So(String(t),e))return o(t);s(r)}}}function Mo(e,r=!1){const t={format:"utf-8",commands:["branch","-v",r?"-D":"-d",e],parser:(r,t)=>Oo(r,t).branches[e],onError({exitCode:e,stdErr:r,stdOut:s},n,i,a){if(!So(String(n),e))return a(n);throw new o(t.parser(Q(s),Q(r)),String(n))}};return t}g(Lo,{branchLocalTask:()=>$o,branchTask:()=>xo,containsDeleteBranchCommand:()=>Io,deleteBranchTask:()=>Mo,deleteBranchesTask:()=>qo});var Bo,No=d({"src/lib/tasks/branch.ts"(){T(),Fo(),jo(),De()}}),Ho=d({"src/lib/responses/CheckIgnore.ts"(){Bo=e=>e.split(/\n/g).map(e=>e.trim()).filter(e=>!!e)}}),zo={};function Wo(e){return{commands:["check-ignore",...e],format:"utf-8",parser:Bo}}g(zo,{checkIgnoreTask:()=>Wo});var Vo=d({"src/lib/tasks/check-ignore.ts"(){Ho()}}),Ko={};function Jo(e){return/^--upload-pack(=|$)/.test(e)}function Qo(e,r,t){const s=["clone",...t];return re(e)&&s.push(e),re(r)&&s.push(r),s.find(Jo)?Ve("git.fetch: potential exploit argument blocked."):Ke(s)}function Zo(e,r,t){return B(t,"--mirror"),Qo(e,r,t)}g(Ko,{cloneMirrorTask:()=>Zo,cloneTask:()=>Qo});var Yo,Xo=d({"src/lib/tasks/clone.ts"(){sr(),De()}});function en(e,r){return Ge({raw:e,remote:null,branches:[],tags:[],updated:[],deleted:[]},Yo,[e,r])}var rn=d({"src/lib/parsers/parse-fetch.ts"(){De(),Yo=[new de(/From (.+)$/,(e,[r])=>{e.remote=r}),new de(/\* \[new branch]\s+(\S+)\s*-> (.+)$/,(e,[r,t])=>{e.branches.push({name:r,tracking:t})}),new de(/\* \[new tag]\s+(\S+)\s*-> (.+)$/,(e,[r,t])=>{e.tags.push({name:r,tracking:t})}),new de(/- \[deleted]\s+\S+\s*-> (.+)$/,(e,[r])=>{e.deleted.push({tracking:r})}),new de(/\s*([^.]+)\.\.(\S+)\s+(\S+)\s*-> (.+)$/,(e,[r,t,s,o])=>{e.updated.push({name:s,tracking:o,to:t,from:r})})]}}),tn={};function sn(e){return/^--upload-pack(=|$)/.test(e)}function on(e,r,t){const s=["fetch",...t];return e&&r&&s.push(e,r),s.find(sn)?Ve("git.fetch: potential exploit argument blocked."):{commands:s,format:"utf-8",parser:en}}g(tn,{fetchTask:()=>on});var nn,an=d({"src/lib/tasks/fetch.ts"(){rn(),sr()}});function cn(e){return Ge({moves:[]},nn,e)}var un=d({"src/lib/parsers/parse-move.ts"(){De(),nn=[new de(/^Renaming (.+) to (.+)$/,(e,[r,t])=>{e.moves.push({from:r,to:t})})]}}),ln={};function pn(e,r){return{commands:["mv","-v",...z(e),r],format:"utf-8",parser:cn}}g(ln,{moveTask:()=>pn});var dn=d({"src/lib/tasks/move.ts"(){un(),De()}}),gn={};function mn(e,r,t){const s=["pull",...t];return e&&r&&s.splice(1,0,e,r),{commands:s,format:"utf-8",parser:(e,r)=>As(e,r),onError(e,r,t,s){const n=function(e,r){const t=Ge(new gs,Gs,[e,r]);return t.message&&t}(Q(e.stdOut),Q(e.stdErr));if(n)return s(new o(n));s(r)}}}g(gn,{pullTask:()=>mn});var hn=d({"src/lib/tasks/pull.ts"(){T(),Us(),De()}});function fn(e){const r={};return bn(e,([e])=>r[e]={name:e}),Object.values(r)}function Tn(e){const r={};return bn(e,([e,t,s])=>{r.hasOwnProperty(e)||(r[e]={name:e,refs:{fetch:"",push:""}}),s&&t&&(r[e].refs[s.replace(/[^a-z]/g,"")]=t)}),Object.values(r)}function bn(e,r){q(e,e=>r(e.split(/\s+/)))}var En=d({"src/lib/responses/GetRemoteSummary.ts"(){De()}}),wn={};function yn(e,r,t){return Ke(["remote","add",...t,e,r])}function _n(e){const r=["remote"];return e&&r.push("-v"),{commands:r,format:"utf-8",parser:e?Tn:fn}}function kn(e){const r=[...e];return"ls-remote"!==r[0]&&r.unshift("ls-remote"),Ke(r)}function vn(e){const r=[...e];return"remote"!==r[0]&&r.unshift("remote"),Ke(r)}function On(e){return Ke(["remote","remove",e])}g(wn,{addRemoteTask:()=>yn,getRemotesTask:()=>_n,listRemotesTask:()=>kn,remoteTask:()=>vn,removeRemoteTask:()=>On});var Pn=d({"src/lib/tasks/remote.ts"(){En(),sr()}}),Gn={};function Sn(e={},r){const t=us(e),s=["stash","list",...t.commands,...r],o=ts(t.splitter,t.fields,qt(s));return is(s)||{commands:s,format:"utf-8",parser:o}}g(Gn,{stashListTask:()=>Sn});var An=d({"src/lib/tasks/stash-list.ts"(){Kt(),ss(),cs(),hs()}}),Cn={};function Fn(e,r){return Dn(["add",e,r])}function Rn(e){return Dn(["init",...e])}function Dn(e){const r=[...e];return"submodule"!==r[0]&&r.unshift("submodule"),Ke(r)}function Un(e){return Dn(["update",...e])}g(Cn,{addSubModuleTask:()=>Fn,initSubModuleTask:()=>Rn,subModuleTask:()=>Dn,updateSubModuleTask:()=>Un});var jn,Ln,In=d({"src/lib/tasks/sub-module.ts"(){sr()}});function xn(e,r){return e===r?0:e>r?1:-1}function $n(e){return e.trim()}function qn(e){return"string"==typeof e&&parseInt(e.replace(/^\D+/g,""),10)||0}var Mn=d({"src/lib/responses/TagList.ts"(){jn=class{constructor(e,r){this.all=e,this.latest=r}},Ln=function(e,r=!1){const t=e.split("\n").map($n).filter(Boolean);r||t.sort(function(e,r){const t=e.split("."),s=r.split(".");if(1===t.length||1===s.length)return function(e,r){const t=isNaN(e);return t!==isNaN(r)?t?1:-1:t?xn(e,r):0}(qn(t[0]),qn(s[0]));for(let e=0,r=Math.max(t.length,s.length);e<r;e++){const r=xn(qn(t[e]),qn(s[e]));if(r)return r}return 0});const s=r?t[0]:[...t].reverse().find(e=>e.indexOf(".")>=0);return new jn(t,s)}}}),Bn={};function Nn(e=[]){const r=e.some(e=>/^--sort=/.test(e));return{format:"utf-8",commands:["tag","-l",...e],parser:e=>Ln(e,r)}}function Hn(e){return{format:"utf-8",commands:["tag",e],parser:()=>({name:e})}}function zn(e,r){return{format:"utf-8",commands:["tag","-a","-m",r,e],parser:()=>({name:e})}}g(Bn,{addAnnotatedTagTask:()=>zn,addTagTask:()=>Hn,tagListTask:()=>Nn});var Wn,Vn,Kn,Jn=d({"src/lib/tasks/tag.ts"(){Mn()}}),Qn=(Wn={"src/git.js"(e,r){var{GitExecutor:t}=(Et(),h(bt)),{SimpleGitApi:s}=(To(),h(go)),{Scheduler:o}=(Eo(),h(bo)),{configurationErrorTask:n}=(sr(),h(ze)),{asArray:i,filterArray:a,filterPrimitives:c,filterString:u,filterStringOrStringArray:l,filterType:p,getTrailingOptions:d,trailingFunctionArgument:g,trailingOptionsArgument:m}=(De(),h(Ae)),{applyPatchTask:f}=(Po(),h(wo)),{branchTask:T,branchLocalTask:b,deleteBranchesTask:E,deleteBranchTask:w}=(No(),h(Lo)),{checkIgnoreTask:y}=(Vo(),h(zo)),{checkIsRepoTask:_}=(Ne(),h(Ue)),{cloneTask:k,cloneMirrorTask:v}=(Xo(),h(Ko)),{cleanWithOptionsTask:O,isCleanOptionsArray:P}=(lr(),h(or)),{diffSummaryTask:G}=(cs(),h(os)),{fetchTask:S}=(an(),h(tn)),{moveTask:A}=(dn(),h(ln)),{pullTask:C}=(hn(),h(gn)),{pushTagsTask:F}=(Qs(),h(Bs)),{addRemoteTask:R,getRemotesTask:D,listRemotesTask:U,remoteTask:j,removeRemoteTask:L}=(Pn(),h(wn)),{getResetMode:I,resetTask:x}=(Rr(),h(Sr)),{stashListTask:$}=(An(),h(Gn)),{addSubModuleTask:q,initSubModuleTask:M,subModuleTask:B,updateSubModuleTask:N}=(In(),h(Cn)),{addAnnotatedTagTask:H,addTagTask:z,tagListTask:W}=(Jn(),h(Bn)),{straightThroughBufferTask:V,straightThroughStringTask:K}=(sr(),h(ze));function J(e,r){this._plugins=r,this._executor=new t(e.baseDir,new o(e.maxConcurrentProcesses),r),this._trimmed=e.trimmed}function Q(e,r,t,s){return"string"!=typeof t?n(`git.${e}() requires a string 'repoPath'`):r(t,p(s,u),d(arguments))}(J.prototype=Object.create(s.prototype)).constructor=J,J.prototype.customBinary=function(e){return this._plugins.reconfigure("binary",e),this},J.prototype.env=function(e,r){return 1===arguments.length&&"object"==typeof e?this._executor.env=e:(this._executor.env=this._executor.env||{})[e]=r,this},J.prototype.stashList=function(e){return this._runTask($(m(arguments)||{},a(e)&&e||[]),g(arguments))},J.prototype.clone=function(){return this._runTask(Q("clone",k,...arguments),g(arguments))},J.prototype.mirror=function(){return this._runTask(Q("mirror",v,...arguments),g(arguments))},J.prototype.mv=function(e,r){return this._runTask(A(e,r),g(arguments))},J.prototype.checkoutLatestTag=function(e){var r=this;return this.pull(function(){r.tags(function(t,s){r.checkout(s.latest,e)})})},J.prototype.pull=function(e,r,t,s){return this._runTask(C(p(e,u),p(r,u),d(arguments)),g(arguments))},J.prototype.fetch=function(e,r){return this._runTask(S(p(e,u),p(r,u),d(arguments)),g(arguments))},J.prototype.silent=function(e){return console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3"),this},J.prototype.tags=function(e,r){return this._runTask(W(d(arguments)),g(arguments))},J.prototype.rebase=function(){return this._runTask(K(["rebase",...d(arguments)]),g(arguments))},J.prototype.reset=function(e){return this._runTask(x(I(e),d(arguments)),g(arguments))},J.prototype.revert=function(e){const r=g(arguments);return"string"!=typeof e?this._runTask(n("Commit must be a string"),r):this._runTask(K(["revert",...d(arguments,0,!0),e]),r)},J.prototype.addTag=function(e){const r="string"==typeof e?z(e):n("Git.addTag requires a tag name");return this._runTask(r,g(arguments))},J.prototype.addAnnotatedTag=function(e,r){return this._runTask(H(e,r),g(arguments))},J.prototype.deleteLocalBranch=function(e,r,t){return this._runTask(w(e,"boolean"==typeof r&&r),g(arguments))},J.prototype.deleteLocalBranches=function(e,r,t){return this._runTask(E(e,"boolean"==typeof r&&r),g(arguments))},J.prototype.branch=function(e,r){return this._runTask(T(d(arguments)),g(arguments))},J.prototype.branchLocal=function(e){return this._runTask(b(),g(arguments))},J.prototype.raw=function(e){const r=!Array.isArray(e),t=[].slice.call(r?arguments:e,0);for(let e=0;e<t.length&&r;e++)if(!c(t[e])){t.splice(e,t.length-e);break}t.push(...d(arguments,0,!0));var s=g(arguments);return t.length?this._runTask(K(t,this._trimmed),s):this._runTask(n("Raw: must supply one or more command to execute"),s)},J.prototype.submoduleAdd=function(e,r,t){return this._runTask(q(e,r),g(arguments))},J.prototype.submoduleUpdate=function(e,r){return this._runTask(N(d(arguments,!0)),g(arguments))},J.prototype.submoduleInit=function(e,r){return this._runTask(M(d(arguments,!0)),g(arguments))},J.prototype.subModule=function(e,r){return this._runTask(B(d(arguments)),g(arguments))},J.prototype.listRemote=function(){return this._runTask(U(d(arguments)),g(arguments))},J.prototype.addRemote=function(e,r,t){return this._runTask(R(e,r,d(arguments)),g(arguments))},J.prototype.removeRemote=function(e,r){return this._runTask(L(e),g(arguments))},J.prototype.getRemotes=function(e,r){return this._runTask(D(!0===e),g(arguments))},J.prototype.remote=function(e,r){return this._runTask(j(d(arguments)),g(arguments))},J.prototype.tag=function(e,r){const t=d(arguments);return"tag"!==t[0]&&t.unshift("tag"),this._runTask(K(t),g(arguments))},J.prototype.updateServerInfo=function(e){return this._runTask(K(["update-server-info"]),g(arguments))},J.prototype.pushTags=function(e,r){const t=F({remote:p(e,u)},d(arguments));return this._runTask(t,g(arguments))},J.prototype.rm=function(e){return this._runTask(K(["rm","-f",...i(e)]),g(arguments))},J.prototype.rmKeepLocal=function(e){return this._runTask(K(["rm","--cached",...i(e)]),g(arguments))},J.prototype.catFile=function(e,r){return this._catFile("utf-8",arguments)},J.prototype.binaryCatFile=function(){return this._catFile("buffer",arguments)},J.prototype._catFile=function(e,r){var t=g(r),s=["cat-file"],o=r[0];if("string"==typeof o)return this._runTask(n("Git.catFile: options must be supplied as an array of strings"),t);Array.isArray(o)&&s.push.apply(s,o);const i="buffer"===e?V(s):K(s);return this._runTask(i,t)},J.prototype.diff=function(e,r){const t=u(e)?n("git.diff: supplying options as a single string is no longer supported, switch to an array of strings"):K(["diff",...d(arguments)]);return this._runTask(t,g(arguments))},J.prototype.diffSummary=function(){return this._runTask(G(d(arguments,1)),g(arguments))},J.prototype.applyPatch=function(e){const r=l(e)?f(i(e),d([].slice.call(arguments,1))):n("git.applyPatch requires one or more string patches as the first argument");return this._runTask(r,g(arguments))},J.prototype.revparse=function(){const e=["rev-parse",...d(arguments,!0)];return this._runTask(K(e,!0),g(arguments))},J.prototype.clean=function(e,r,t){const s=P(e),o=s&&e.join("")||p(e,u)||"",n=d([].slice.call(arguments,s?1:0));return this._runTask(O(o,n),g(arguments))},J.prototype.exec=function(e){const r={commands:[],format:"utf-8",parser(){"function"==typeof e&&e()}};return this._runTask(r)},J.prototype.clearQueue=function(){return this},J.prototype.checkIgnore=function(e,r){return this._runTask(y(i(p(e,l,[]))),g(arguments))},J.prototype.checkIsRepo=function(e,r){return this._runTask(_(p(e,u)),g(arguments))},r.exports=J}},function(){return Vn||(0,Wn[u(Wn)[0]])((Vn={exports:{}}).exports,Vn),Vn.exports}),Zn={};function Yn(e){return Object.defineProperties(e,{__esModule:{value:!0},default:{value:e}})}function Xn(e){return Object.assign(e.bind(null),Dr)}function ei(e,r){const t=new Zr,s=Ee(e&&("string"==typeof e?{baseDir:e}:e)||{},r);if(!M(s.baseDir))throw new y(s,"Cannot use simple-git on a directory that does not exist");return Array.isArray(s.config)&&t.add(function(e){const r=J(e,"-c");return{type:"spawn.args",action:e=>[...r,...e]}}(s.config)),t.add(function({allowUnsafeProtocolOverride:e=!1,allowUnsafePack:r=!1}={}){return{type:"spawn.args",action:(t,s)=>(t.forEach((o,n)=>{const i=n<t.length?t[n+1]:"";e||function(e,r){if(function(e){return"string"==typeof e&&"-c"===e.trim().toLowerCase()}(e)&&/^\s*protocol(.[a-z]+)?.allow/.test(r))throw new _(void 0,"unsafe","Configuring protocol.allow is not permitted without enabling allowUnsafeExtProtocol")}(o,i),r||function(e,r){if(/^\s*--(upload|receive)-pack/.test(e))throw new _(void 0,"unsafe","Use of --upload-pack or --receive-pack is not permitted without enabling allowUnsafePack");if("clone"===r&&/^\s*-u\b/.test(e))throw new _(void 0,"unsafe","Use of clone with option -u is not permitted without enabling allowUnsafePack");if("push"===r&&/^\s*--exec\b/.test(e))throw new _(void 0,"unsafe","Use of push with option --exec is not permitted without enabling allowUnsafePack")}(o,s.method)}),t)}}(s.unsafe)),t.add({type:"spawn.args",action(e){const r=[];let t;function s(e){(t=t||[]).push(...e)}for(let t=0;t<e.length;t++){const o=e[t];if(E(o))s(w(o));else{if("--"===o){s(e.slice(t+1).flatMap(e=>E(e)&&w(e)||e));break}r.push(o)}}return t?[...r,"--",...t.map(String)]:r}}),t.add(function({onClose:e=!0,onExit:r=50}={}){function t(e,r,t){!1!==e&&(!0===e?r.promise:r.promise.then(()=>Y(e))).then(t.done)}return{type:"spawn.after",async action(s,{spawned:o,close:n}){const i=function(){let s=-1;const o={close:(0,Lr.deferred)(),closeTimeout:(0,Lr.deferred)(),exit:(0,Lr.deferred)(),exitTimeout:(0,Lr.deferred)()},n=Promise.race([!1===e?Ir:o.closeTimeout.promise,!1===r?Ir:o.exitTimeout.promise]);return t(e,o.close,o.closeTimeout),t(r,o.exit,o.exitTimeout),{close(e){s=e,o.close.done()},exit(e){s=e,o.exit.done()},get exitCode(){return s},result:n}}();let a=!0,c=()=>{a=!1};o.stdout?.on("data",c),o.stderr?.on("data",c),o.on("error",c),o.on("close",e=>i.close(e)),o.on("exit",e=>i.exit(e));try{await i.result,a&&await Y(50),n(i.exitCode)}catch(e){n(i.exitCode,e)}}}}(s.completion)),s.abort&&t.add(function(e){if(!e)return;const r={type:"spawn.after",action(r,t){function s(){t.kill(new _(void 0,"abort","Abort signal received"))}e.addEventListener("abort",s),t.spawned.on("close",()=>e.removeEventListener("abort",s))}};return[{type:"spawn.before",action(r,t){e.aborted&&t.kill(new _(void 0,"abort","Abort already signaled"))}},r]}(s.abort)),s.progress&&t.add(function(e){const r="--progress",t=["checkout","clone","fetch","pull","push"];return[{type:"spawn.args",action:(e,s)=>t.includes(s.method)?N(e,r):e},{type:"spawn.after",action(t,s){s.commands.includes(r)&&s.spawned.stderr?.on("data",r=>{const t=/^([\s\S]+?):\s*(\d+)% \((\d+)\/(\d+)\)/.exec(r.toString("utf8"));var o;t&&e({method:s.method,stage:(o=t[1],String(o.toLowerCase().split(" ",1))||"unknown"),progress:K(t[2]),processed:K(t[3]),total:K(t[4])})})}}]}(s.progress)),s.timeout&&t.add(function({block:e,stdErr:r=!0,stdOut:t=!0}){if(e>0)return{type:"spawn.after",action(s,o){let n;function i(){n&&clearTimeout(n),n=setTimeout(c,e)}function a(){o.spawned.stdout?.off("data",i),o.spawned.stderr?.off("data",i),o.spawned.off("exit",a),o.spawned.off("close",a),n&&clearTimeout(n)}function c(){a(),o.kill(new _(void 0,"timeout","block timeout reached"))}t&&o.spawned.stdout?.on("data",i),r&&o.spawned.stderr?.on("data",i),o.spawned.on("exit",a),o.spawned.on("close",a),i()}}}(s.timeout)),s.spawnOptions&&t.add(function(e){const r=Z(e,["uid","gid"]);return{type:"spawn.options",action:e=>({...r,...e})}}(s.spawnOptions)),t.add(Jr(Kr(!0))),s.errors&&t.add(Jr(s.errors)),function(e,r=["git"],t=!1){let s=Hr(z(r),t);e.on("binary",e=>{s=Hr(z(e),t)}),e.append("spawn.binary",()=>s.binary),e.append("spawn.args",e=>s.prefix?[s.prefix,...e]:e)}(t,s.binary,s.unsafe?.allowUnsafeCustomBinary),new Kn(s,t)}g(Zn,{esModuleFactory:()=>Yn,gitExportFactory:()=>Xn,gitInstanceFactory:()=>ei});var ri,ti,si=d({"src/lib/git-factory.ts"(){Ur(),nt(),it(),De(),Kn=Qn()}}),oi={};function ni(...e){let r,t=Promise.resolve();try{r=ei(...e)}catch(e){t=Promise.reject(e)}function s(){return i}function n(){return t}const i=[...ri,...ti].reduce((e,i)=>{const a=ti.includes(i),c=a?(u=i,l=r,function(...e){if("function"==typeof e[e.length])throw new TypeError("Promise interface requires that handlers are not supplied inline, trailing function not allowed in call to "+u);return t.then(function(){return new Promise(function(r,t){e.push((e,s)=>{if(e)return t((n=e)instanceof Error?n:"string"==typeof n?new Error(n):new o(n));var n;r(s)}),l[u].apply(l,e)})})}):function(e,r,t){return(...s)=>(r[e](...s),t)}(i,r,e);var u,l;const p=a?n:s;return Object.defineProperty(e,i,{enumerable:!1,configurable:!1,value:r?c:p}),e},{});return i}g(oi,{gitP:()=>ni});var ii=d({"src/lib/runners/promise-wrapped.ts"(){T(),si(),ri=["customBinary","env","outputHandler","silent"],ti=["add","addAnnotatedTag","addConfig","addRemote","addTag","applyPatch","binaryCatFile","branch","branchLocal","catFile","checkIgnore","checkIsRepo","checkout","checkoutBranch","checkoutLatestTag","checkoutLocalBranch","clean","clone","commit","cwd","deleteLocalBranch","deleteLocalBranches","diff","diffSummary","exec","fetch","getRemotes","init","listConfig","listRemote","log","merge","mergeFromTo","mirror","mv","pull","push","pushTags","raw","rebase","remote","removeRemote","reset","revert","revparse","rm","rmKeepLocal","show","stash","stashList","status","subModule","submoduleAdd","submoduleInit","submoduleUpdate","tag","tags","updateServerInfo"]}}),{gitP:ai}=(ii(),h(oi)),{esModuleFactory:ci,gitInstanceFactory:ui,gitExportFactory:li}=(si(),h(Zn)),pi=ci(li(ui));e.exports=Object.assign(pi,{gitP:ai,simpleGit:pi})},736:(e,r,t)=>{e.exports=function(e){function r(e){let t,o,n,i=null;function a(...e){if(!a.enabled)return;const s=a,o=Number(new Date),n=o-(t||o);s.diff=n,s.prev=t,s.curr=o,t=o,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(t,o)=>{if("%%"===t)return"%";i++;const n=r.formatters[o];if("function"==typeof n){const r=e[i];t=n.call(s,r),e.splice(i,1),i--}return t}),r.formatArgs.call(s,e),(s.log||r.log).apply(s,e)}return a.namespace=e,a.useColors=r.useColors(),a.color=r.selectColor(e),a.extend=s,a.destroy=r.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(o!==r.namespaces&&(o=r.namespaces,n=r.enabled(e)),n),set:e=>{i=e}}),"function"==typeof r.init&&r.init(a),a}function s(e,t){const s=r(this.namespace+(void 0===t?":":t)+e);return s.log=this.log,s}function o(e,r){let t=0,s=0,o=-1,n=0;for(;t<e.length;)if(s<r.length&&(r[s]===e[t]||"*"===r[s]))"*"===r[s]?(o=s,n=t,s++):(t++,s++);else{if(-1===o)return!1;s=o+1,n++,t=n}for(;s<r.length&&"*"===r[s];)s++;return s===r.length}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names,...r.skips.map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){r.save(e),r.namespaces=e,r.names=[],r.skips=[];const t=("string"==typeof e?e:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const e of t)"-"===e[0]?r.skips.push(e.slice(1)):r.names.push(e)},r.enabled=function(e){for(const t of r.skips)if(o(e,t))return!1;for(const t of r.names)if(o(e,t))return!0;return!1},r.humanize=t(585),r.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach(t=>{r[t]=e[t]}),r.names=[],r.skips=[],r.formatters={},r.selectColor=function(e){let t=0;for(let r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return r.colors[Math.abs(t)%r.colors.length]},r.enable(r.load()),r}},753:(e,r,t)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=t(833):e.exports=t(33)},811:(e,r,t)=>{var s=t(346),o=t(640),n=t(447),i=Function.bind,a=i.bind(i);function c(e,r,t){var s=a(n,null).apply(null,t?[r,t]:[r]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(function(s){var n=t?[r,s,t]:[r,s];e[s]=e.api[s]=a(o,null).apply(null,n)})}function u(){var e={registry:{}},r=s.bind(null,e);return c(r,e),r}var l=!1;function p(){return l||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),l=!0),u()}p.Singular=function(){var e={registry:{}},r=s.bind(null,e,"h");return c(r,e,"h"),r}.bind(),p.Collection=u.bind(),e.exports=p,e.exports.Hook=p,e.exports.Singular=p.Singular,e.exports.Collection=p.Collection},833:(e,r,t)=>{r.formatArgs=function(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const t="color: "+this.color;r.splice(1,0,t,"color: inherit");let s=0,o=0;r[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(s++,"%c"===e&&(o=s))}),r.splice(o,0,t)},r.save=function(e){try{e?r.storage.setItem("debug",e):r.storage.removeItem("debug")}catch(e){}},r.load=function(){let e;try{e=r.storage.getItem("debug")||r.storage.getItem("DEBUG")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},r.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},r.storage=function(){try{return localStorage}catch(e){}}(),r.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],r.log=console.debug||console.log||(()=>{}),e.exports=t(736)(r);const{formatters:s}=e.exports;s.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},896:e=>{"use strict";e.exports=require("fs")},926:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(e){for(var t in e)r.hasOwnProperty(t)||(r[t]=e[t])}(t(423))}},r={};function t(s){var o=r[s];if(void 0!==o)return o.exports;var n=r[s]={exports:{}};return e[s].call(n.exports,n,n.exports,t),n.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var s in r)t.o(r,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:r[s]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s=t(265);module.exports=s})();
//# sourceMappingURL=extension.js.map